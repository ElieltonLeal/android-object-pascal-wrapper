//
// Generated by JavaToPas v1.5 20140918 - 093158
////////////////////////////////////////////////////////////////////////////////
unit java.sql.Array;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.math.BigDecimal,
  java.sql.Blob,
  java.io.Reader,
  java.sql.Clob,
  java.sql.Date,
  java.sql.ResultSetMetaData,
  java.sql.Ref,
  java.sql.Time,
  java.sql.Timestamp,
  java.lang.JClass,
  java.sql.SQLWarning,
  java.sql.RowId,
  java.sql.NClob,
  java.sql.SQLXML,
  java.sql.Savepoint,
  java.util.Properties,
  java.sql.Struct,
  java.sql.RowIdLifetime,
  java.sql.ParameterMetaData;

type
  JPreparedStatement = interface; // merged
  JCallableStatement = interface; // merged
  JDatabaseMetaData = interface; // merged
  JStatement = interface; // merged
  JConnection = interface; // merged
  JResultSet = interface; // merged
  JArray = interface;

  JArrayClass = interface(JObjectClass)
    ['{A92D7808-40E8-44B3-860A-D2819CC60E6B}']
    function getArray : JObject; cdecl; overload;                               // ()Ljava/lang/Object; A: $401
    function getArray(Int64param0 : Int64; Integerparam1 : Integer) : JObject; cdecl; overload;// (JI)Ljava/lang/Object; A: $401
    function getArray(Int64param0 : Int64; Integerparam1 : Integer; JMapparam2 : JMap) : JObject; cdecl; overload;// (JILjava/util/Map;)Ljava/lang/Object; A: $401
    function getArray(JMapparam0 : JMap) : JObject; cdecl; overload;            // (Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getBaseType : Integer; cdecl;                                      // ()I A: $401
    function getBaseTypeName : JString; cdecl;                                  // ()Ljava/lang/String; A: $401
    function getResultSet : JResultSet; cdecl; overload;                        // ()Ljava/sql/ResultSet; A: $401
    function getResultSet(Int64param0 : Int64; Integerparam1 : Integer) : JResultSet; cdecl; overload;// (JI)Ljava/sql/ResultSet; A: $401
    function getResultSet(Int64param0 : Int64; Integerparam1 : Integer; JMapparam2 : JMap) : JResultSet; cdecl; overload;// (JILjava/util/Map;)Ljava/sql/ResultSet; A: $401
    function getResultSet(JMapparam0 : JMap) : JResultSet; cdecl; overload;     // (Ljava/util/Map;)Ljava/sql/ResultSet; A: $401
    procedure free ; cdecl;                                                     // ()V A: $401
  end;

  [JavaSignature('java/sql/Array')]
  JArray = interface(JObject)
    ['{723D6991-EF12-4222-A1C9-ADF8B35BEA16}']
    function getArray : JObject; cdecl; overload;                               // ()Ljava/lang/Object; A: $401
    function getArray(Int64param0 : Int64; Integerparam1 : Integer) : JObject; cdecl; overload;// (JI)Ljava/lang/Object; A: $401
    function getArray(Int64param0 : Int64; Integerparam1 : Integer; JMapparam2 : JMap) : JObject; cdecl; overload;// (JILjava/util/Map;)Ljava/lang/Object; A: $401
    function getArray(JMapparam0 : JMap) : JObject; cdecl; overload;            // (Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getBaseType : Integer; cdecl;                                      // ()I A: $401
    function getBaseTypeName : JString; cdecl;                                  // ()Ljava/lang/String; A: $401
    function getResultSet : JResultSet; cdecl; overload;                        // ()Ljava/sql/ResultSet; A: $401
    function getResultSet(Int64param0 : Int64; Integerparam1 : Integer) : JResultSet; cdecl; overload;// (JI)Ljava/sql/ResultSet; A: $401
    function getResultSet(Int64param0 : Int64; Integerparam1 : Integer; JMapparam2 : JMap) : JResultSet; cdecl; overload;// (JILjava/util/Map;)Ljava/sql/ResultSet; A: $401
    function getResultSet(JMapparam0 : JMap) : JResultSet; cdecl; overload;     // (Ljava/util/Map;)Ljava/sql/ResultSet; A: $401
    procedure free ; cdecl;                                                     // ()V A: $401
  end;

  TJArray = class(TJavaGenericImport<JArrayClass, JArray>)
  end;

  // Merged from: .\android-19\java.sql.ResultSet.pas
  JResultSetClass = interface(JObjectClass)
    ['{3430CDAF-0C0B-4E1D-8DED-07EA1E48D2CA}']
    function &absolute(Integerparam0 : Integer) : boolean; cdecl;               // (I)Z A: $401
    function _GetCLOSE_CURSORS_AT_COMMIT : Integer; cdecl;                      //  A: $19
    function _GetCONCUR_READ_ONLY : Integer; cdecl;                             //  A: $19
    function _GetCONCUR_UPDATABLE : Integer; cdecl;                             //  A: $19
    function _GetFETCH_FORWARD : Integer; cdecl;                                //  A: $19
    function _GetFETCH_REVERSE : Integer; cdecl;                                //  A: $19
    function _GetFETCH_UNKNOWN : Integer; cdecl;                                //  A: $19
    function _GetHOLD_CURSORS_OVER_COMMIT : Integer; cdecl;                     //  A: $19
    function _GetTYPE_FORWARD_ONLY : Integer; cdecl;                            //  A: $19
    function _GetTYPE_SCROLL_INSENSITIVE : Integer; cdecl;                      //  A: $19
    function _GetTYPE_SCROLL_SENSITIVE : Integer; cdecl;                        //  A: $19
    function findColumn(JStringparam0 : JString) : Integer; cdecl;              // (Ljava/lang/String;)I A: $401
    function first : boolean; cdecl;                                            // ()Z A: $401
    function getArray(Integerparam0 : Integer) : JArray; cdecl; overload;       // (I)Ljava/sql/Array; A: $401
    function getArray(JStringparam0 : JString) : JArray; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/Array; A: $401
    function getAsciiStream(Integerparam0 : Integer) : JInputStream; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getAsciiStream(JStringparam0 : JString) : JInputStream; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getBigDecimal(Integerparam0 : Integer) : JBigDecimal; cdecl; overload;// (I)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(Integerparam0 : Integer; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (II)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString) : JBigDecimal; cdecl; overload;// (Ljava/lang/String;)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (Ljava/lang/String;I)Ljava/math/BigDecimal; A: $401
    function getBinaryStream(Integerparam0 : Integer) : JInputStream; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getBinaryStream(JStringparam0 : JString) : JInputStream; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getBlob(Integerparam0 : Integer) : JBlob; cdecl; overload;         // (I)Ljava/sql/Blob; A: $401
    function getBlob(JStringparam0 : JString) : JBlob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Blob; A: $401
    function getBoolean(Integerparam0 : Integer) : boolean; cdecl; overload;    // (I)Z A: $401
    function getBoolean(JStringparam0 : JString) : boolean; cdecl; overload;    // (Ljava/lang/String;)Z A: $401
    function getByte(Integerparam0 : Integer) : Byte; cdecl; overload;          // (I)B A: $401
    function getByte(JStringparam0 : JString) : Byte; cdecl; overload;          // (Ljava/lang/String;)B A: $401
    function getBytes(Integerparam0 : Integer) : TJavaArray<Byte>; cdecl; overload;// (I)[B A: $401
    function getBytes(JStringparam0 : JString) : TJavaArray<Byte>; cdecl; overload;// (Ljava/lang/String;)[B A: $401
    function getCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getClob(Integerparam0 : Integer) : JClob; cdecl; overload;         // (I)Ljava/sql/Clob; A: $401
    function getClob(JStringparam0 : JString) : JClob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Clob; A: $401
    function getConcurrency : Integer; cdecl;                                   // ()I A: $401
    function getCursorName : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getDate(Integerparam0 : Integer) : JDate; cdecl; overload;         // (I)Ljava/sql/Date; A: $401
    function getDate(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString) : JDate; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDouble(Integerparam0 : Integer) : Double; cdecl; overload;      // (I)D A: $401
    function getDouble(JStringparam0 : JString) : Double; cdecl; overload;      // (Ljava/lang/String;)D A: $401
    function getFetchDirection : Integer; cdecl;                                // ()I A: $401
    function getFetchSize : Integer; cdecl;                                     // ()I A: $401
    function getFloat(Integerparam0 : Integer) : Single; cdecl; overload;       // (I)F A: $401
    function getFloat(JStringparam0 : JString) : Single; cdecl; overload;       // (Ljava/lang/String;)F A: $401
    function getHoldability : Integer; cdecl;                                   // ()I A: $401
    function getInt(Integerparam0 : Integer) : Integer; cdecl; overload;        // (I)I A: $401
    function getInt(JStringparam0 : JString) : Integer; cdecl; overload;        // (Ljava/lang/String;)I A: $401
    function getLong(Integerparam0 : Integer) : Int64; cdecl; overload;         // (I)J A: $401
    function getLong(JStringparam0 : JString) : Int64; cdecl; overload;         // (Ljava/lang/String;)J A: $401
    function getMetaData : JResultSetMetaData; cdecl;                           // ()Ljava/sql/ResultSetMetaData; A: $401
    function getNCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getNCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getNClob(Integerparam0 : Integer) : JNClob; cdecl; overload;       // (I)Ljava/sql/NClob; A: $401
    function getNClob(JStringparam0 : JString) : JNClob; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/NClob; A: $401
    function getNString(Integerparam0 : Integer) : JString; cdecl; overload;    // (I)Ljava/lang/String; A: $401
    function getNString(JStringparam0 : JString) : JString; cdecl; overload;    // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getObject(Integerparam0 : Integer) : JObject; cdecl; overload;     // (I)Ljava/lang/Object; A: $401
    function getObject(Integerparam0 : Integer; JMapparam1 : JMap) : JObject; cdecl; overload;// (ILjava/util/Map;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString) : JObject; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString; JMapparam1 : JMap) : JObject; cdecl; overload;// (Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getRef(Integerparam0 : Integer) : JRef; cdecl; overload;           // (I)Ljava/sql/Ref; A: $401
    function getRef(JStringparam0 : JString) : JRef; cdecl; overload;           // (Ljava/lang/String;)Ljava/sql/Ref; A: $401
    function getRow : Integer; cdecl;                                           // ()I A: $401
    function getRowId(Integerparam0 : Integer) : JRowId; cdecl; overload;       // (I)Ljava/sql/RowId; A: $401
    function getRowId(JStringparam0 : JString) : JRowId; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/RowId; A: $401
    function getSQLXML(Integerparam0 : Integer) : JSQLXML; cdecl; overload;     // (I)Ljava/sql/SQLXML; A: $401
    function getSQLXML(JStringparam0 : JString) : JSQLXML; cdecl; overload;     // (Ljava/lang/String;)Ljava/sql/SQLXML; A: $401
    function getShort(Integerparam0 : Integer) : SmallInt; cdecl; overload;     // (I)S A: $401
    function getShort(JStringparam0 : JString) : SmallInt; cdecl; overload;     // (Ljava/lang/String;)S A: $401
    function getStatement : JStatement; cdecl;                                  // ()Ljava/sql/Statement; A: $401
    function getString(Integerparam0 : Integer) : JString; cdecl; overload;     // (I)Ljava/lang/String; A: $401
    function getString(JStringparam0 : JString) : JString; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getTime(Integerparam0 : Integer) : JTime; cdecl; overload;         // (I)Ljava/sql/Time; A: $401
    function getTime(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString) : JTime; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTimestamp(Integerparam0 : Integer) : JTimestamp; cdecl; overload;// (I)Ljava/sql/Timestamp; A: $401
    function getTimestamp(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString) : JTimestamp; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getType : Integer; cdecl;                                          // ()I A: $401
    function getURL(Integerparam0 : Integer) : JURL; cdecl; overload;           // (I)Ljava/net/URL; A: $401
    function getURL(JStringparam0 : JString) : JURL; cdecl; overload;           // (Ljava/lang/String;)Ljava/net/URL; A: $401
    function getUnicodeStream(Integerparam0 : Integer) : JInputStream; deprecated; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getUnicodeStream(JStringparam0 : JString) : JInputStream; deprecated; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isAfterLast : boolean; cdecl;                                      // ()Z A: $401
    function isBeforeFirst : boolean; cdecl;                                    // ()Z A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isFirst : boolean; cdecl;                                          // ()Z A: $401
    function isLast : boolean; cdecl;                                           // ()Z A: $401
    function last : boolean; cdecl;                                             // ()Z A: $401
    function next : boolean; cdecl;                                             // ()Z A: $401
    function previous : boolean; cdecl;                                         // ()Z A: $401
    function relative(Integerparam0 : Integer) : boolean; cdecl;                // (I)Z A: $401
    function rowDeleted : boolean; cdecl;                                       // ()Z A: $401
    function rowInserted : boolean; cdecl;                                      // ()Z A: $401
    function rowUpdated : boolean; cdecl;                                       // ()Z A: $401
    function wasNull : boolean; cdecl;                                          // ()Z A: $401
    procedure afterLast ; cdecl;                                                // ()V A: $401
    procedure beforeFirst ; cdecl;                                              // ()V A: $401
    procedure cancelRowUpdates ; cdecl;                                         // ()V A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure deleteRow ; cdecl;                                                // ()V A: $401
    procedure insertRow ; cdecl;                                                // ()V A: $401
    procedure moveToCurrentRow ; cdecl;                                         // ()V A: $401
    procedure moveToInsertRow ; cdecl;                                          // ()V A: $401
    procedure refreshRow ; cdecl;                                               // ()V A: $401
    procedure setFetchDirection(Integerparam0 : Integer) ; cdecl;               // (I)V A: $401
    procedure setFetchSize(Integerparam0 : Integer) ; cdecl;                    // (I)V A: $401
    procedure updateArray(Integerparam0 : Integer; JArrayparam1 : JArray) ; cdecl; overload;// (ILjava/sql/Array;)V A: $401
    procedure updateArray(JStringparam0 : JString; JArrayparam1 : JArray) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Array;)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure updateBigDecimal(Integerparam0 : Integer; JBigDecimalparam1 : JBigDecimal) ; cdecl; overload;// (ILjava/math/BigDecimal;)V A: $401
    procedure updateBigDecimal(JStringparam0 : JString; JBigDecimalparam1 : JBigDecimal) ; cdecl; overload;// (Ljava/lang/String;Ljava/math/BigDecimal;)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JBlobparam1 : JBlob) ; cdecl; overload;// (ILjava/sql/Blob;)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateBlob(JStringparam0 : JString; JBlobparam1 : JBlob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Blob;)V A: $401
    procedure updateBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateBoolean(Integerparam0 : Integer; booleanparam1 : boolean) ; cdecl; overload;// (IZ)V A: $401
    procedure updateBoolean(JStringparam0 : JString; booleanparam1 : boolean) ; cdecl; overload;// (Ljava/lang/String;Z)V A: $401
    procedure updateByte(Integerparam0 : Integer; Byteparam1 : Byte) ; cdecl; overload;// (IB)V A: $401
    procedure updateByte(JStringparam0 : JString; Byteparam1 : Byte) ; cdecl; overload;// (Ljava/lang/String;B)V A: $401
    procedure updateBytes(Integerparam0 : Integer; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl; overload;// (I[B)V A: $401
    procedure updateBytes(JStringparam0 : JString; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl; overload;// (Ljava/lang/String;[B)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/Reader;I)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;I)V A: $401
    procedure updateClob(Integerparam0 : Integer; JClobparam1 : JClob) ; cdecl; overload;// (ILjava/sql/Clob;)V A: $401
    procedure updateClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateClob(JStringparam0 : JString; JClobparam1 : JClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Clob;)V A: $401
    procedure updateClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateDate(Integerparam0 : Integer; JDateparam1 : JDate) ; cdecl; overload;// (ILjava/sql/Date;)V A: $401
    procedure updateDate(JStringparam0 : JString; JDateparam1 : JDate) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;)V A: $401
    procedure updateDouble(Integerparam0 : Integer; Doubleparam1 : Double) ; cdecl; overload;// (ID)V A: $401
    procedure updateDouble(JStringparam0 : JString; Doubleparam1 : Double) ; cdecl; overload;// (Ljava/lang/String;D)V A: $401
    procedure updateFloat(Integerparam0 : Integer; Singleparam1 : Single) ; cdecl; overload;// (IF)V A: $401
    procedure updateFloat(JStringparam0 : JString; Singleparam1 : Single) ; cdecl; overload;// (Ljava/lang/String;F)V A: $401
    procedure updateInt(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure updateInt(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure updateLong(Integerparam0 : Integer; Int64param1 : Int64) ; cdecl; overload;// (IJ)V A: $401
    procedure updateLong(JStringparam0 : JString; Int64param1 : Int64) ; cdecl; overload;// (Ljava/lang/String;J)V A: $401
    procedure updateNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JNClobparam1 : JNClob) ; cdecl; overload;// (ILjava/sql/NClob;)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateNClob(JStringparam0 : JString; JNClobparam1 : JNClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/NClob;)V A: $401
    procedure updateNClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateNClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateNString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl; overload;// (ILjava/lang/String;)V A: $401
    procedure updateNString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure updateNull(Integerparam0 : Integer) ; cdecl; overload;            // (I)V A: $401
    procedure updateNull(JStringparam0 : JString) ; cdecl; overload;            // (Ljava/lang/String;)V A: $401
    procedure updateObject(Integerparam0 : Integer; JObjectparam1 : JObject) ; cdecl; overload;// (ILjava/lang/Object;)V A: $401
    procedure updateObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/lang/Object;I)V A: $401
    procedure updateObject(JStringparam0 : JString; JObjectparam1 : JObject) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;)V A: $401
    procedure updateObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;I)V A: $401
    procedure updateRef(Integerparam0 : Integer; JRefparam1 : JRef) ; cdecl; overload;// (ILjava/sql/Ref;)V A: $401
    procedure updateRef(JStringparam0 : JString; JRefparam1 : JRef) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Ref;)V A: $401
    procedure updateRow ; cdecl;                                                // ()V A: $401
    procedure updateRowId(Integerparam0 : Integer; JRowIdparam1 : JRowId) ; cdecl; overload;// (ILjava/sql/RowId;)V A: $401
    procedure updateRowId(JStringparam0 : JString; JRowIdparam1 : JRowId) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/RowId;)V A: $401
    procedure updateSQLXML(Integerparam0 : Integer; JSQLXMLparam1 : JSQLXML) ; cdecl; overload;// (ILjava/sql/SQLXML;)V A: $401
    procedure updateSQLXML(JStringparam0 : JString; JSQLXMLparam1 : JSQLXML) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/SQLXML;)V A: $401
    procedure updateShort(Integerparam0 : Integer; SmallIntparam1 : SmallInt) ; cdecl; overload;// (IS)V A: $401
    procedure updateShort(JStringparam0 : JString; SmallIntparam1 : SmallInt) ; cdecl; overload;// (Ljava/lang/String;S)V A: $401
    procedure updateString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl; overload;// (ILjava/lang/String;)V A: $401
    procedure updateString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure updateTime(Integerparam0 : Integer; JTimeparam1 : JTime) ; cdecl; overload;// (ILjava/sql/Time;)V A: $401
    procedure updateTime(JStringparam0 : JString; JTimeparam1 : JTime) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;)V A: $401
    procedure updateTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (ILjava/sql/Timestamp;)V A: $401
    procedure updateTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;)V A: $401
    property CLOSE_CURSORS_AT_COMMIT : Integer read _GetCLOSE_CURSORS_AT_COMMIT;// I A: $19
    property CONCUR_READ_ONLY : Integer read _GetCONCUR_READ_ONLY;              // I A: $19
    property CONCUR_UPDATABLE : Integer read _GetCONCUR_UPDATABLE;              // I A: $19
    property FETCH_FORWARD : Integer read _GetFETCH_FORWARD;                    // I A: $19
    property FETCH_REVERSE : Integer read _GetFETCH_REVERSE;                    // I A: $19
    property FETCH_UNKNOWN : Integer read _GetFETCH_UNKNOWN;                    // I A: $19
    property HOLD_CURSORS_OVER_COMMIT : Integer read _GetHOLD_CURSORS_OVER_COMMIT;// I A: $19
    property TYPE_FORWARD_ONLY : Integer read _GetTYPE_FORWARD_ONLY;            // I A: $19
    property TYPE_SCROLL_INSENSITIVE : Integer read _GetTYPE_SCROLL_INSENSITIVE;// I A: $19
    property TYPE_SCROLL_SENSITIVE : Integer read _GetTYPE_SCROLL_SENSITIVE;    // I A: $19
  end;

  [JavaSignature('java/sql/ResultSet')]
  JResultSet = interface(JObject)
    ['{184D80D7-49F9-4318-9F21-1A4214714169}']
    function &absolute(Integerparam0 : Integer) : boolean; cdecl;               // (I)Z A: $401
    function findColumn(JStringparam0 : JString) : Integer; cdecl;              // (Ljava/lang/String;)I A: $401
    function first : boolean; cdecl;                                            // ()Z A: $401
    function getArray(Integerparam0 : Integer) : JArray; cdecl; overload;       // (I)Ljava/sql/Array; A: $401
    function getArray(JStringparam0 : JString) : JArray; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/Array; A: $401
    function getAsciiStream(Integerparam0 : Integer) : JInputStream; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getAsciiStream(JStringparam0 : JString) : JInputStream; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getBigDecimal(Integerparam0 : Integer) : JBigDecimal; cdecl; overload;// (I)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(Integerparam0 : Integer; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (II)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString) : JBigDecimal; cdecl; overload;// (Ljava/lang/String;)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (Ljava/lang/String;I)Ljava/math/BigDecimal; A: $401
    function getBinaryStream(Integerparam0 : Integer) : JInputStream; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getBinaryStream(JStringparam0 : JString) : JInputStream; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getBlob(Integerparam0 : Integer) : JBlob; cdecl; overload;         // (I)Ljava/sql/Blob; A: $401
    function getBlob(JStringparam0 : JString) : JBlob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Blob; A: $401
    function getBoolean(Integerparam0 : Integer) : boolean; cdecl; overload;    // (I)Z A: $401
    function getBoolean(JStringparam0 : JString) : boolean; cdecl; overload;    // (Ljava/lang/String;)Z A: $401
    function getByte(Integerparam0 : Integer) : Byte; cdecl; overload;          // (I)B A: $401
    function getByte(JStringparam0 : JString) : Byte; cdecl; overload;          // (Ljava/lang/String;)B A: $401
    function getBytes(Integerparam0 : Integer) : TJavaArray<Byte>; cdecl; overload;// (I)[B A: $401
    function getBytes(JStringparam0 : JString) : TJavaArray<Byte>; cdecl; overload;// (Ljava/lang/String;)[B A: $401
    function getCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getClob(Integerparam0 : Integer) : JClob; cdecl; overload;         // (I)Ljava/sql/Clob; A: $401
    function getClob(JStringparam0 : JString) : JClob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Clob; A: $401
    function getConcurrency : Integer; cdecl;                                   // ()I A: $401
    function getCursorName : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getDate(Integerparam0 : Integer) : JDate; cdecl; overload;         // (I)Ljava/sql/Date; A: $401
    function getDate(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString) : JDate; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDouble(Integerparam0 : Integer) : Double; cdecl; overload;      // (I)D A: $401
    function getDouble(JStringparam0 : JString) : Double; cdecl; overload;      // (Ljava/lang/String;)D A: $401
    function getFetchDirection : Integer; cdecl;                                // ()I A: $401
    function getFetchSize : Integer; cdecl;                                     // ()I A: $401
    function getFloat(Integerparam0 : Integer) : Single; cdecl; overload;       // (I)F A: $401
    function getFloat(JStringparam0 : JString) : Single; cdecl; overload;       // (Ljava/lang/String;)F A: $401
    function getHoldability : Integer; cdecl;                                   // ()I A: $401
    function getInt(Integerparam0 : Integer) : Integer; cdecl; overload;        // (I)I A: $401
    function getInt(JStringparam0 : JString) : Integer; cdecl; overload;        // (Ljava/lang/String;)I A: $401
    function getLong(Integerparam0 : Integer) : Int64; cdecl; overload;         // (I)J A: $401
    function getLong(JStringparam0 : JString) : Int64; cdecl; overload;         // (Ljava/lang/String;)J A: $401
    function getMetaData : JResultSetMetaData; cdecl;                           // ()Ljava/sql/ResultSetMetaData; A: $401
    function getNCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getNCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getNClob(Integerparam0 : Integer) : JNClob; cdecl; overload;       // (I)Ljava/sql/NClob; A: $401
    function getNClob(JStringparam0 : JString) : JNClob; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/NClob; A: $401
    function getNString(Integerparam0 : Integer) : JString; cdecl; overload;    // (I)Ljava/lang/String; A: $401
    function getNString(JStringparam0 : JString) : JString; cdecl; overload;    // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getObject(Integerparam0 : Integer) : JObject; cdecl; overload;     // (I)Ljava/lang/Object; A: $401
    function getObject(Integerparam0 : Integer; JMapparam1 : JMap) : JObject; cdecl; overload;// (ILjava/util/Map;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString) : JObject; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString; JMapparam1 : JMap) : JObject; cdecl; overload;// (Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getRef(Integerparam0 : Integer) : JRef; cdecl; overload;           // (I)Ljava/sql/Ref; A: $401
    function getRef(JStringparam0 : JString) : JRef; cdecl; overload;           // (Ljava/lang/String;)Ljava/sql/Ref; A: $401
    function getRow : Integer; cdecl;                                           // ()I A: $401
    function getRowId(Integerparam0 : Integer) : JRowId; cdecl; overload;       // (I)Ljava/sql/RowId; A: $401
    function getRowId(JStringparam0 : JString) : JRowId; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/RowId; A: $401
    function getSQLXML(Integerparam0 : Integer) : JSQLXML; cdecl; overload;     // (I)Ljava/sql/SQLXML; A: $401
    function getSQLXML(JStringparam0 : JString) : JSQLXML; cdecl; overload;     // (Ljava/lang/String;)Ljava/sql/SQLXML; A: $401
    function getShort(Integerparam0 : Integer) : SmallInt; cdecl; overload;     // (I)S A: $401
    function getShort(JStringparam0 : JString) : SmallInt; cdecl; overload;     // (Ljava/lang/String;)S A: $401
    function getStatement : JStatement; cdecl;                                  // ()Ljava/sql/Statement; A: $401
    function getString(Integerparam0 : Integer) : JString; cdecl; overload;     // (I)Ljava/lang/String; A: $401
    function getString(JStringparam0 : JString) : JString; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getTime(Integerparam0 : Integer) : JTime; cdecl; overload;         // (I)Ljava/sql/Time; A: $401
    function getTime(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString) : JTime; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTimestamp(Integerparam0 : Integer) : JTimestamp; cdecl; overload;// (I)Ljava/sql/Timestamp; A: $401
    function getTimestamp(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString) : JTimestamp; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getType : Integer; cdecl;                                          // ()I A: $401
    function getURL(Integerparam0 : Integer) : JURL; cdecl; overload;           // (I)Ljava/net/URL; A: $401
    function getURL(JStringparam0 : JString) : JURL; cdecl; overload;           // (Ljava/lang/String;)Ljava/net/URL; A: $401
    function getUnicodeStream(Integerparam0 : Integer) : JInputStream; deprecated; cdecl; overload;// (I)Ljava/io/InputStream; A: $401
    function getUnicodeStream(JStringparam0 : JString) : JInputStream; deprecated; cdecl; overload;// (Ljava/lang/String;)Ljava/io/InputStream; A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isAfterLast : boolean; cdecl;                                      // ()Z A: $401
    function isBeforeFirst : boolean; cdecl;                                    // ()Z A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isFirst : boolean; cdecl;                                          // ()Z A: $401
    function isLast : boolean; cdecl;                                           // ()Z A: $401
    function last : boolean; cdecl;                                             // ()Z A: $401
    function next : boolean; cdecl;                                             // ()Z A: $401
    function previous : boolean; cdecl;                                         // ()Z A: $401
    function relative(Integerparam0 : Integer) : boolean; cdecl;                // (I)Z A: $401
    function rowDeleted : boolean; cdecl;                                       // ()Z A: $401
    function rowInserted : boolean; cdecl;                                      // ()Z A: $401
    function rowUpdated : boolean; cdecl;                                       // ()Z A: $401
    function wasNull : boolean; cdecl;                                          // ()Z A: $401
    procedure afterLast ; cdecl;                                                // ()V A: $401
    procedure beforeFirst ; cdecl;                                              // ()V A: $401
    procedure cancelRowUpdates ; cdecl;                                         // ()V A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure deleteRow ; cdecl;                                                // ()V A: $401
    procedure insertRow ; cdecl;                                                // ()V A: $401
    procedure moveToCurrentRow ; cdecl;                                         // ()V A: $401
    procedure moveToInsertRow ; cdecl;                                          // ()V A: $401
    procedure refreshRow ; cdecl;                                               // ()V A: $401
    procedure setFetchDirection(Integerparam0 : Integer) ; cdecl;               // (I)V A: $401
    procedure setFetchSize(Integerparam0 : Integer) ; cdecl;                    // (I)V A: $401
    procedure updateArray(Integerparam0 : Integer; JArrayparam1 : JArray) ; cdecl; overload;// (ILjava/sql/Array;)V A: $401
    procedure updateArray(JStringparam0 : JString; JArrayparam1 : JArray) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Array;)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure updateBigDecimal(Integerparam0 : Integer; JBigDecimalparam1 : JBigDecimal) ; cdecl; overload;// (ILjava/math/BigDecimal;)V A: $401
    procedure updateBigDecimal(JStringparam0 : JString; JBigDecimalparam1 : JBigDecimal) ; cdecl; overload;// (Ljava/lang/String;Ljava/math/BigDecimal;)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JBlobparam1 : JBlob) ; cdecl; overload;// (ILjava/sql/Blob;)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure updateBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure updateBlob(JStringparam0 : JString; JBlobparam1 : JBlob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Blob;)V A: $401
    procedure updateBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure updateBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure updateBoolean(Integerparam0 : Integer; booleanparam1 : boolean) ; cdecl; overload;// (IZ)V A: $401
    procedure updateBoolean(JStringparam0 : JString; booleanparam1 : boolean) ; cdecl; overload;// (Ljava/lang/String;Z)V A: $401
    procedure updateByte(Integerparam0 : Integer; Byteparam1 : Byte) ; cdecl; overload;// (IB)V A: $401
    procedure updateByte(JStringparam0 : JString; Byteparam1 : Byte) ; cdecl; overload;// (Ljava/lang/String;B)V A: $401
    procedure updateBytes(Integerparam0 : Integer; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl; overload;// (I[B)V A: $401
    procedure updateBytes(JStringparam0 : JString; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl; overload;// (Ljava/lang/String;[B)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/Reader;I)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;I)V A: $401
    procedure updateClob(Integerparam0 : Integer; JClobparam1 : JClob) ; cdecl; overload;// (ILjava/sql/Clob;)V A: $401
    procedure updateClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateClob(JStringparam0 : JString; JClobparam1 : JClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Clob;)V A: $401
    procedure updateClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateDate(Integerparam0 : Integer; JDateparam1 : JDate) ; cdecl; overload;// (ILjava/sql/Date;)V A: $401
    procedure updateDate(JStringparam0 : JString; JDateparam1 : JDate) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;)V A: $401
    procedure updateDouble(Integerparam0 : Integer; Doubleparam1 : Double) ; cdecl; overload;// (ID)V A: $401
    procedure updateDouble(JStringparam0 : JString; Doubleparam1 : Double) ; cdecl; overload;// (Ljava/lang/String;D)V A: $401
    procedure updateFloat(Integerparam0 : Integer; Singleparam1 : Single) ; cdecl; overload;// (IF)V A: $401
    procedure updateFloat(JStringparam0 : JString; Singleparam1 : Single) ; cdecl; overload;// (Ljava/lang/String;F)V A: $401
    procedure updateInt(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure updateInt(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure updateLong(Integerparam0 : Integer; Int64param1 : Int64) ; cdecl; overload;// (IJ)V A: $401
    procedure updateLong(JStringparam0 : JString; Int64param1 : Int64) ; cdecl; overload;// (Ljava/lang/String;J)V A: $401
    procedure updateNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JNClobparam1 : JNClob) ; cdecl; overload;// (ILjava/sql/NClob;)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure updateNClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure updateNClob(JStringparam0 : JString; JNClobparam1 : JNClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/NClob;)V A: $401
    procedure updateNClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure updateNClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure updateNString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl; overload;// (ILjava/lang/String;)V A: $401
    procedure updateNString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure updateNull(Integerparam0 : Integer) ; cdecl; overload;            // (I)V A: $401
    procedure updateNull(JStringparam0 : JString) ; cdecl; overload;            // (Ljava/lang/String;)V A: $401
    procedure updateObject(Integerparam0 : Integer; JObjectparam1 : JObject) ; cdecl; overload;// (ILjava/lang/Object;)V A: $401
    procedure updateObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/lang/Object;I)V A: $401
    procedure updateObject(JStringparam0 : JString; JObjectparam1 : JObject) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;)V A: $401
    procedure updateObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;I)V A: $401
    procedure updateRef(Integerparam0 : Integer; JRefparam1 : JRef) ; cdecl; overload;// (ILjava/sql/Ref;)V A: $401
    procedure updateRef(JStringparam0 : JString; JRefparam1 : JRef) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Ref;)V A: $401
    procedure updateRow ; cdecl;                                                // ()V A: $401
    procedure updateRowId(Integerparam0 : Integer; JRowIdparam1 : JRowId) ; cdecl; overload;// (ILjava/sql/RowId;)V A: $401
    procedure updateRowId(JStringparam0 : JString; JRowIdparam1 : JRowId) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/RowId;)V A: $401
    procedure updateSQLXML(Integerparam0 : Integer; JSQLXMLparam1 : JSQLXML) ; cdecl; overload;// (ILjava/sql/SQLXML;)V A: $401
    procedure updateSQLXML(JStringparam0 : JString; JSQLXMLparam1 : JSQLXML) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/SQLXML;)V A: $401
    procedure updateShort(Integerparam0 : Integer; SmallIntparam1 : SmallInt) ; cdecl; overload;// (IS)V A: $401
    procedure updateShort(JStringparam0 : JString; SmallIntparam1 : SmallInt) ; cdecl; overload;// (Ljava/lang/String;S)V A: $401
    procedure updateString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl; overload;// (ILjava/lang/String;)V A: $401
    procedure updateString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure updateTime(Integerparam0 : Integer; JTimeparam1 : JTime) ; cdecl; overload;// (ILjava/sql/Time;)V A: $401
    procedure updateTime(JStringparam0 : JString; JTimeparam1 : JTime) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;)V A: $401
    procedure updateTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (ILjava/sql/Timestamp;)V A: $401
    procedure updateTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;)V A: $401
  end;

  TJResultSet = class(TJavaGenericImport<JResultSetClass, JResultSet>)

  // Merged from: .\android-19\java.sql.Connection.pas
  JConnectionClass = interface(JObjectClass)
    ['{058E2484-7854-445D-8B59-12906C7D264B}']
    function _GetTRANSACTION_NONE : Integer; cdecl;                             //  A: $19
    function _GetTRANSACTION_READ_COMMITTED : Integer; cdecl;                   //  A: $19
    function _GetTRANSACTION_READ_UNCOMMITTED : Integer; cdecl;                 //  A: $19
    function _GetTRANSACTION_REPEATABLE_READ : Integer; cdecl;                  //  A: $19
    function _GetTRANSACTION_SERIALIZABLE : Integer; cdecl;                     //  A: $19
    function createArrayOf(JStringparam0 : JString; TJavaArrayJObjectparam1 : TJavaArray<JObject>) : JArray; cdecl;// (Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array; A: $401
    function createBlob : JBlob; cdecl;                                         // ()Ljava/sql/Blob; A: $401
    function createClob : JClob; cdecl;                                         // ()Ljava/sql/Clob; A: $401
    function createNClob : JNClob; cdecl;                                       // ()Ljava/sql/NClob; A: $401
    function createSQLXML : JSQLXML; cdecl;                                     // ()Ljava/sql/SQLXML; A: $401
    function createStatement : JStatement; cdecl; overload;                     // ()Ljava/sql/Statement; A: $401
    function createStatement(Integerparam0 : Integer; Integerparam1 : Integer) : JStatement; cdecl; overload;// (II)Ljava/sql/Statement; A: $401
    function createStatement(Integerparam0 : Integer; Integerparam1 : Integer; Integerparam2 : Integer) : JStatement; cdecl; overload;// (III)Ljava/sql/Statement; A: $401
    function createStruct(JStringparam0 : JString; TJavaArrayJObjectparam1 : TJavaArray<JObject>) : JStruct; cdecl;// (Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct; A: $401
    function getAutoCommit : boolean; cdecl;                                    // ()Z A: $401
    function getCatalog : JString; cdecl;                                       // ()Ljava/lang/String; A: $401
    function getClientInfo : JProperties; cdecl; overload;                      // ()Ljava/util/Properties; A: $401
    function getClientInfo(JStringparam0 : JString) : JString; cdecl; overload; // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getHoldability : Integer; cdecl;                                   // ()I A: $401
    function getMetaData : JDatabaseMetaData; cdecl;                            // ()Ljava/sql/DatabaseMetaData; A: $401
    function getTransactionIsolation : Integer; cdecl;                          // ()I A: $401
    function getTypeMap : JMap; cdecl;                                          // ()Ljava/util/Map; A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $401
    function isValid(Integerparam0 : Integer) : boolean; cdecl;                 // (I)Z A: $401
    function nativeSQL(JStringparam0 : JString) : JString; cdecl;               // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function prepareCall(JStringparam0 : JString) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/CallableStatement; A: $401
    function prepareCall(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;II)Ljava/sql/CallableStatement; A: $401
    function prepareCall(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer; Integerparam3 : Integer) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;III)Ljava/sql/CallableStatement; A: $401
    function prepareStatement(JStringparam0 : JString) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;I)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;II)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer; Integerparam3 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;III)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;[I)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; A: $401
    function setSavepoint : JSavepoint; cdecl; overload;                        // ()Ljava/sql/Savepoint; A: $401
    function setSavepoint(JStringparam0 : JString) : JSavepoint; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Savepoint; A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure commit ; cdecl;                                                   // ()V A: $401
    procedure releaseSavepoint(JSavepointparam0 : JSavepoint) ; cdecl;          // (Ljava/sql/Savepoint;)V A: $401
    procedure rollback ; cdecl; overload;                                       // ()V A: $401
    procedure rollback(JSavepointparam0 : JSavepoint) ; cdecl; overload;        // (Ljava/sql/Savepoint;)V A: $401
    procedure setAutoCommit(booleanparam0 : boolean) ; cdecl;                   // (Z)V A: $401
    procedure setCatalog(JStringparam0 : JString) ; cdecl;                      // (Ljava/lang/String;)V A: $401
    procedure setClientInfo(JPropertiesparam0 : JProperties) ; cdecl; overload; // (Ljava/util/Properties;)V A: $401
    procedure setClientInfo(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setHoldability(Integerparam0 : Integer) ; cdecl;                  // (I)V A: $401
    procedure setReadOnly(booleanparam0 : boolean) ; cdecl;                     // (Z)V A: $401
    procedure setTransactionIsolation(Integerparam0 : Integer) ; cdecl;         // (I)V A: $401
    procedure setTypeMap(JMapparam0 : JMap) ; cdecl;                            // (Ljava/util/Map;)V A: $401
    property TRANSACTION_NONE : Integer read _GetTRANSACTION_NONE;              // I A: $19
    property TRANSACTION_READ_COMMITTED : Integer read _GetTRANSACTION_READ_COMMITTED;// I A: $19
    property TRANSACTION_READ_UNCOMMITTED : Integer read _GetTRANSACTION_READ_UNCOMMITTED;// I A: $19
    property TRANSACTION_REPEATABLE_READ : Integer read _GetTRANSACTION_REPEATABLE_READ;// I A: $19
    property TRANSACTION_SERIALIZABLE : Integer read _GetTRANSACTION_SERIALIZABLE;// I A: $19
  end;

  [JavaSignature('java/sql/Connection')]
  JConnection = interface(JObject)
    ['{83B01911-A36B-4923-9C83-8BBA75A7B5A3}']
    function createArrayOf(JStringparam0 : JString; TJavaArrayJObjectparam1 : TJavaArray<JObject>) : JArray; cdecl;// (Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array; A: $401
    function createBlob : JBlob; cdecl;                                         // ()Ljava/sql/Blob; A: $401
    function createClob : JClob; cdecl;                                         // ()Ljava/sql/Clob; A: $401
    function createNClob : JNClob; cdecl;                                       // ()Ljava/sql/NClob; A: $401
    function createSQLXML : JSQLXML; cdecl;                                     // ()Ljava/sql/SQLXML; A: $401
    function createStatement : JStatement; cdecl; overload;                     // ()Ljava/sql/Statement; A: $401
    function createStatement(Integerparam0 : Integer; Integerparam1 : Integer) : JStatement; cdecl; overload;// (II)Ljava/sql/Statement; A: $401
    function createStatement(Integerparam0 : Integer; Integerparam1 : Integer; Integerparam2 : Integer) : JStatement; cdecl; overload;// (III)Ljava/sql/Statement; A: $401
    function createStruct(JStringparam0 : JString; TJavaArrayJObjectparam1 : TJavaArray<JObject>) : JStruct; cdecl;// (Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct; A: $401
    function getAutoCommit : boolean; cdecl;                                    // ()Z A: $401
    function getCatalog : JString; cdecl;                                       // ()Ljava/lang/String; A: $401
    function getClientInfo : JProperties; cdecl; overload;                      // ()Ljava/util/Properties; A: $401
    function getClientInfo(JStringparam0 : JString) : JString; cdecl; overload; // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getHoldability : Integer; cdecl;                                   // ()I A: $401
    function getMetaData : JDatabaseMetaData; cdecl;                            // ()Ljava/sql/DatabaseMetaData; A: $401
    function getTransactionIsolation : Integer; cdecl;                          // ()I A: $401
    function getTypeMap : JMap; cdecl;                                          // ()Ljava/util/Map; A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $401
    function isValid(Integerparam0 : Integer) : boolean; cdecl;                 // (I)Z A: $401
    function nativeSQL(JStringparam0 : JString) : JString; cdecl;               // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function prepareCall(JStringparam0 : JString) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/CallableStatement; A: $401
    function prepareCall(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;II)Ljava/sql/CallableStatement; A: $401
    function prepareCall(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer; Integerparam3 : Integer) : JCallableStatement; cdecl; overload;// (Ljava/lang/String;III)Ljava/sql/CallableStatement; A: $401
    function prepareStatement(JStringparam0 : JString) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;I)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;II)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer; Integerparam3 : Integer) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;III)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;[I)Ljava/sql/PreparedStatement; A: $401
    function prepareStatement(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : JPreparedStatement; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; A: $401
    function setSavepoint : JSavepoint; cdecl; overload;                        // ()Ljava/sql/Savepoint; A: $401
    function setSavepoint(JStringparam0 : JString) : JSavepoint; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Savepoint; A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure commit ; cdecl;                                                   // ()V A: $401
    procedure releaseSavepoint(JSavepointparam0 : JSavepoint) ; cdecl;          // (Ljava/sql/Savepoint;)V A: $401
    procedure rollback ; cdecl; overload;                                       // ()V A: $401
    procedure rollback(JSavepointparam0 : JSavepoint) ; cdecl; overload;        // (Ljava/sql/Savepoint;)V A: $401
    procedure setAutoCommit(booleanparam0 : boolean) ; cdecl;                   // (Z)V A: $401
    procedure setCatalog(JStringparam0 : JString) ; cdecl;                      // (Ljava/lang/String;)V A: $401
    procedure setClientInfo(JPropertiesparam0 : JProperties) ; cdecl; overload; // (Ljava/util/Properties;)V A: $401
    procedure setClientInfo(JStringparam0 : JString; JStringparam1 : JString) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setHoldability(Integerparam0 : Integer) ; cdecl;                  // (I)V A: $401
    procedure setReadOnly(booleanparam0 : boolean) ; cdecl;                     // (Z)V A: $401
    procedure setTransactionIsolation(Integerparam0 : Integer) ; cdecl;         // (I)V A: $401
    procedure setTypeMap(JMapparam0 : JMap) ; cdecl;                            // (Ljava/util/Map;)V A: $401
  end;

  TJConnection = class(TJavaGenericImport<JConnectionClass, JConnection>)

  // Merged from: .\android-19\java.sql.Statement.pas
  JStatementClass = interface(JObjectClass)
    ['{0FF956B4-AE66-4BDC-ACDE-D83FFCAEC877}']
    function _GetCLOSE_ALL_RESULTS : Integer; cdecl;                            //  A: $19
    function _GetCLOSE_CURRENT_RESULT : Integer; cdecl;                         //  A: $19
    function _GetEXECUTE_FAILED : Integer; cdecl;                               //  A: $19
    function _GetKEEP_CURRENT_RESULT : Integer; cdecl;                          //  A: $19
    function _GetNO_GENERATED_KEYS : Integer; cdecl;                            //  A: $19
    function _GetRETURN_GENERATED_KEYS : Integer; cdecl;                        //  A: $19
    function _GetSUCCESS_NO_INFO : Integer; cdecl;                              //  A: $19
    function execute(JStringparam0 : JString) : boolean; cdecl; overload;       // (Ljava/lang/String;)Z A: $401
    function execute(JStringparam0 : JString; Integerparam1 : Integer) : boolean; cdecl; overload;// (Ljava/lang/String;I)Z A: $401
    function execute(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : boolean; cdecl; overload;// (Ljava/lang/String;[I)Z A: $401
    function execute(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : boolean; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Z A: $401
    function executeBatch : TJavaArray<Integer>; cdecl;                         // ()[I A: $401
    function executeQuery(JStringparam0 : JString) : JResultSet; cdecl;         // (Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function executeUpdate(JStringparam0 : JString) : Integer; cdecl; overload; // (Ljava/lang/String;)I A: $401
    function executeUpdate(JStringparam0 : JString; Integerparam1 : Integer) : Integer; cdecl; overload;// (Ljava/lang/String;I)I A: $401
    function executeUpdate(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : Integer; cdecl; overload;// (Ljava/lang/String;[I)I A: $401
    function executeUpdate(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : Integer; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)I A: $401
    function getConnection : JConnection; cdecl;                                // ()Ljava/sql/Connection; A: $401
    function getFetchDirection : Integer; cdecl;                                // ()I A: $401
    function getFetchSize : Integer; cdecl;                                     // ()I A: $401
    function getGeneratedKeys : JResultSet; cdecl;                              // ()Ljava/sql/ResultSet; A: $401
    function getMaxFieldSize : Integer; cdecl;                                  // ()I A: $401
    function getMaxRows : Integer; cdecl;                                       // ()I A: $401
    function getMoreResults : boolean; cdecl; overload;                         // ()Z A: $401
    function getMoreResults(Integerparam0 : Integer) : boolean; cdecl; overload;// (I)Z A: $401
    function getQueryTimeout : Integer; cdecl;                                  // ()I A: $401
    function getResultSet : JResultSet; cdecl;                                  // ()Ljava/sql/ResultSet; A: $401
    function getResultSetConcurrency : Integer; cdecl;                          // ()I A: $401
    function getResultSetHoldability : Integer; cdecl;                          // ()I A: $401
    function getResultSetType : Integer; cdecl;                                 // ()I A: $401
    function getUpdateCount : Integer; cdecl;                                   // ()I A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isPoolable : boolean; cdecl;                                       // ()Z A: $401
    procedure addBatch(JStringparam0 : JString) ; cdecl;                        // (Ljava/lang/String;)V A: $401
    procedure cancel ; cdecl;                                                   // ()V A: $401
    procedure clearBatch ; cdecl;                                               // ()V A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure setCursorName(JStringparam0 : JString) ; cdecl;                   // (Ljava/lang/String;)V A: $401
    procedure setEscapeProcessing(booleanparam0 : boolean) ; cdecl;             // (Z)V A: $401
    procedure setFetchDirection(Integerparam0 : Integer) ; cdecl;               // (I)V A: $401
    procedure setFetchSize(Integerparam0 : Integer) ; cdecl;                    // (I)V A: $401
    procedure setMaxFieldSize(Integerparam0 : Integer) ; cdecl;                 // (I)V A: $401
    procedure setMaxRows(Integerparam0 : Integer) ; cdecl;                      // (I)V A: $401
    procedure setPoolable(booleanparam0 : boolean) ; cdecl;                     // (Z)V A: $401
    procedure setQueryTimeout(Integerparam0 : Integer) ; cdecl;                 // (I)V A: $401
    property CLOSE_ALL_RESULTS : Integer read _GetCLOSE_ALL_RESULTS;            // I A: $19
    property CLOSE_CURRENT_RESULT : Integer read _GetCLOSE_CURRENT_RESULT;      // I A: $19
    property EXECUTE_FAILED : Integer read _GetEXECUTE_FAILED;                  // I A: $19
    property KEEP_CURRENT_RESULT : Integer read _GetKEEP_CURRENT_RESULT;        // I A: $19
    property NO_GENERATED_KEYS : Integer read _GetNO_GENERATED_KEYS;            // I A: $19
    property RETURN_GENERATED_KEYS : Integer read _GetRETURN_GENERATED_KEYS;    // I A: $19
    property SUCCESS_NO_INFO : Integer read _GetSUCCESS_NO_INFO;                // I A: $19
  end;

  [JavaSignature('java/sql/Statement')]
  JStatement = interface(JObject)
    ['{BFABAEB9-736C-4A6F-8A37-7BC9EA9AFA72}']
    function execute(JStringparam0 : JString) : boolean; cdecl; overload;       // (Ljava/lang/String;)Z A: $401
    function execute(JStringparam0 : JString; Integerparam1 : Integer) : boolean; cdecl; overload;// (Ljava/lang/String;I)Z A: $401
    function execute(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : boolean; cdecl; overload;// (Ljava/lang/String;[I)Z A: $401
    function execute(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : boolean; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Z A: $401
    function executeBatch : TJavaArray<Integer>; cdecl;                         // ()[I A: $401
    function executeQuery(JStringparam0 : JString) : JResultSet; cdecl;         // (Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function executeUpdate(JStringparam0 : JString) : Integer; cdecl; overload; // (Ljava/lang/String;)I A: $401
    function executeUpdate(JStringparam0 : JString; Integerparam1 : Integer) : Integer; cdecl; overload;// (Ljava/lang/String;I)I A: $401
    function executeUpdate(JStringparam0 : JString; TJavaArrayIntegerparam1 : TJavaArray<Integer>) : Integer; cdecl; overload;// (Ljava/lang/String;[I)I A: $401
    function executeUpdate(JStringparam0 : JString; TJavaArrayJStringparam1 : TJavaArray<JString>) : Integer; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)I A: $401
    function getConnection : JConnection; cdecl;                                // ()Ljava/sql/Connection; A: $401
    function getFetchDirection : Integer; cdecl;                                // ()I A: $401
    function getFetchSize : Integer; cdecl;                                     // ()I A: $401
    function getGeneratedKeys : JResultSet; cdecl;                              // ()Ljava/sql/ResultSet; A: $401
    function getMaxFieldSize : Integer; cdecl;                                  // ()I A: $401
    function getMaxRows : Integer; cdecl;                                       // ()I A: $401
    function getMoreResults : boolean; cdecl; overload;                         // ()Z A: $401
    function getMoreResults(Integerparam0 : Integer) : boolean; cdecl; overload;// (I)Z A: $401
    function getQueryTimeout : Integer; cdecl;                                  // ()I A: $401
    function getResultSet : JResultSet; cdecl;                                  // ()Ljava/sql/ResultSet; A: $401
    function getResultSetConcurrency : Integer; cdecl;                          // ()I A: $401
    function getResultSetHoldability : Integer; cdecl;                          // ()I A: $401
    function getResultSetType : Integer; cdecl;                                 // ()I A: $401
    function getUpdateCount : Integer; cdecl;                                   // ()I A: $401
    function getWarnings : JSQLWarning; cdecl;                                  // ()Ljava/sql/SQLWarning; A: $401
    function isClosed : boolean; cdecl;                                         // ()Z A: $401
    function isPoolable : boolean; cdecl;                                       // ()Z A: $401
    procedure addBatch(JStringparam0 : JString) ; cdecl;                        // (Ljava/lang/String;)V A: $401
    procedure cancel ; cdecl;                                                   // ()V A: $401
    procedure clearBatch ; cdecl;                                               // ()V A: $401
    procedure clearWarnings ; cdecl;                                            // ()V A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
    procedure setCursorName(JStringparam0 : JString) ; cdecl;                   // (Ljava/lang/String;)V A: $401
    procedure setEscapeProcessing(booleanparam0 : boolean) ; cdecl;             // (Z)V A: $401
    procedure setFetchDirection(Integerparam0 : Integer) ; cdecl;               // (I)V A: $401
    procedure setFetchSize(Integerparam0 : Integer) ; cdecl;                    // (I)V A: $401
    procedure setMaxFieldSize(Integerparam0 : Integer) ; cdecl;                 // (I)V A: $401
    procedure setMaxRows(Integerparam0 : Integer) ; cdecl;                      // (I)V A: $401
    procedure setPoolable(booleanparam0 : boolean) ; cdecl;                     // (Z)V A: $401
    procedure setQueryTimeout(Integerparam0 : Integer) ; cdecl;                 // (I)V A: $401
  end;

  TJStatement = class(TJavaGenericImport<JStatementClass, JStatement>)
  end;


  // Merged from: .\android-19\java.sql.DatabaseMetaData.pas
  JDatabaseMetaDataClass = interface(JObjectClass)
    ['{9A7BCAB2-A93B-4A47-AB9F-B71E7B0B0856}']
    function _GetattributeNoNulls : SmallInt; cdecl;                            //  A: $19
    function _GetattributeNullable : SmallInt; cdecl;                           //  A: $19
    function _GetattributeNullableUnknown : SmallInt; cdecl;                    //  A: $19
    function _GetbestRowNotPseudo : Integer; cdecl;                             //  A: $19
    function _GetbestRowPseudo : Integer; cdecl;                                //  A: $19
    function _GetbestRowSession : Integer; cdecl;                               //  A: $19
    function _GetbestRowTemporary : Integer; cdecl;                             //  A: $19
    function _GetbestRowTransaction : Integer; cdecl;                           //  A: $19
    function _GetbestRowUnknown : Integer; cdecl;                               //  A: $19
    function _GetcolumnNoNulls : Integer; cdecl;                                //  A: $19
    function _GetcolumnNullable : Integer; cdecl;                               //  A: $19
    function _GetcolumnNullableUnknown : Integer; cdecl;                        //  A: $19
    function _GetfunctionColumnIn : Integer; cdecl;                             //  A: $19
    function _GetfunctionColumnInOut : Integer; cdecl;                          //  A: $19
    function _GetfunctionColumnOut : Integer; cdecl;                            //  A: $19
    function _GetfunctionColumnResult : Integer; cdecl;                         //  A: $19
    function _GetfunctionColumnUnknown : Integer; cdecl;                        //  A: $19
    function _GetfunctionNoNulls : Integer; cdecl;                              //  A: $19
    function _GetfunctionNoTable : Integer; cdecl;                              //  A: $19
    function _GetfunctionNullable : Integer; cdecl;                             //  A: $19
    function _GetfunctionNullableUnknown : Integer; cdecl;                      //  A: $19
    function _GetfunctionResultUnknown : Integer; cdecl;                        //  A: $19
    function _GetfunctionReturn : Integer; cdecl;                               //  A: $19
    function _GetfunctionReturnsTable : Integer; cdecl;                         //  A: $19
    function _GetimportedKeyCascade : Integer; cdecl;                           //  A: $19
    function _GetimportedKeyInitiallyDeferred : Integer; cdecl;                 //  A: $19
    function _GetimportedKeyInitiallyImmediate : Integer; cdecl;                //  A: $19
    function _GetimportedKeyNoAction : Integer; cdecl;                          //  A: $19
    function _GetimportedKeyNotDeferrable : Integer; cdecl;                     //  A: $19
    function _GetimportedKeyRestrict : Integer; cdecl;                          //  A: $19
    function _GetimportedKeySetDefault : Integer; cdecl;                        //  A: $19
    function _GetimportedKeySetNull : Integer; cdecl;                           //  A: $19
    function _GetprocedureColumnIn : Integer; cdecl;                            //  A: $19
    function _GetprocedureColumnInOut : Integer; cdecl;                         //  A: $19
    function _GetprocedureColumnOut : Integer; cdecl;                           //  A: $19
    function _GetprocedureColumnResult : Integer; cdecl;                        //  A: $19
    function _GetprocedureColumnReturn : Integer; cdecl;                        //  A: $19
    function _GetprocedureColumnUnknown : Integer; cdecl;                       //  A: $19
    function _GetprocedureNoNulls : Integer; cdecl;                             //  A: $19
    function _GetprocedureNoResult : Integer; cdecl;                            //  A: $19
    function _GetprocedureNullable : Integer; cdecl;                            //  A: $19
    function _GetprocedureNullableUnknown : Integer; cdecl;                     //  A: $19
    function _GetprocedureResultUnknown : Integer; cdecl;                       //  A: $19
    function _GetprocedureReturnsResult : Integer; cdecl;                       //  A: $19
    function _GetsqlStateSQL : Integer; cdecl;                                  //  A: $19
    function _GetsqlStateSQL99 : Integer; cdecl;                                //  A: $19
    function _GetsqlStateXOpen : Integer; cdecl;                                //  A: $19
    function _GettableIndexClustered : SmallInt; cdecl;                         //  A: $19
    function _GettableIndexHashed : SmallInt; cdecl;                            //  A: $19
    function _GettableIndexOther : SmallInt; cdecl;                             //  A: $19
    function _GettableIndexStatistic : SmallInt; cdecl;                         //  A: $19
    function _GettypeNoNulls : Integer; cdecl;                                  //  A: $19
    function _GettypeNullable : Integer; cdecl;                                 //  A: $19
    function _GettypeNullableUnknown : Integer; cdecl;                          //  A: $19
    function _GettypePredBasic : Integer; cdecl;                                //  A: $19
    function _GettypePredChar : Integer; cdecl;                                 //  A: $19
    function _GettypePredNone : Integer; cdecl;                                 //  A: $19
    function _GettypeSearchable : Integer; cdecl;                               //  A: $19
    function _GetversionColumnNotPseudo : Integer; cdecl;                       //  A: $19
    function _GetversionColumnPseudo : Integer; cdecl;                          //  A: $19
    function _GetversionColumnUnknown : Integer; cdecl;                         //  A: $19
    function allProceduresAreCallable : boolean; cdecl;                         // ()Z A: $401
    function allTablesAreSelectable : boolean; cdecl;                           // ()Z A: $401
    function autoCommitFailureClosesAllResultSets : boolean; cdecl;             // ()Z A: $401
    function dataDefinitionCausesTransactionCommit : boolean; cdecl;            // ()Z A: $401
    function dataDefinitionIgnoredInTransactions : boolean; cdecl;              // ()Z A: $401
    function deletesAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function doesMaxRowSizeIncludeBlobs : boolean; cdecl;                       // ()Z A: $401
    function getAttributes(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getBestRowIdentifier(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; Integerparam3 : Integer; booleanparam4 : boolean) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet; A: $401
    function getCatalogSeparator : JString; cdecl;                              // ()Ljava/lang/String; A: $401
    function getCatalogTerm : JString; cdecl;                                   // ()Ljava/lang/String; A: $401
    function getCatalogs : JResultSet; cdecl;                                   // ()Ljava/sql/ResultSet; A: $401
    function getClientInfoProperties : JResultSet; cdecl;                       // ()Ljava/sql/ResultSet; A: $401
    function getColumnPrivileges(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getConnection : JConnection; cdecl;                                // ()Ljava/sql/Connection; A: $401
    function getCrossReference(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString; JStringparam4 : JString; JStringparam5 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getDatabaseMajorVersion : Integer; cdecl;                          // ()I A: $401
    function getDatabaseMinorVersion : Integer; cdecl;                          // ()I A: $401
    function getDatabaseProductName : JString; cdecl;                           // ()Ljava/lang/String; A: $401
    function getDatabaseProductVersion : JString; cdecl;                        // ()Ljava/lang/String; A: $401
    function getDefaultTransactionIsolation : Integer; cdecl;                   // ()I A: $401
    function getDriverMajorVersion : Integer; cdecl;                            // ()I A: $401
    function getDriverMinorVersion : Integer; cdecl;                            // ()I A: $401
    function getDriverName : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getDriverVersion : JString; cdecl;                                 // ()Ljava/lang/String; A: $401
    function getExportedKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getExtraNameCharacters : JString; cdecl;                           // ()Ljava/lang/String; A: $401
    function getFunctionColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getFunctions(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getIdentifierQuoteString : JString; cdecl;                         // ()Ljava/lang/String; A: $401
    function getImportedKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getIndexInfo(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; booleanparam3 : boolean; booleanparam4 : boolean) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet; A: $401
    function getJDBCMajorVersion : Integer; cdecl;                              // ()I A: $401
    function getJDBCMinorVersion : Integer; cdecl;                              // ()I A: $401
    function getMaxBinaryLiteralLength : Integer; cdecl;                        // ()I A: $401
    function getMaxCatalogNameLength : Integer; cdecl;                          // ()I A: $401
    function getMaxCharLiteralLength : Integer; cdecl;                          // ()I A: $401
    function getMaxColumnNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInGroupBy : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInIndex : Integer; cdecl;                             // ()I A: $401
    function getMaxColumnsInOrderBy : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInSelect : Integer; cdecl;                            // ()I A: $401
    function getMaxColumnsInTable : Integer; cdecl;                             // ()I A: $401
    function getMaxConnections : Integer; cdecl;                                // ()I A: $401
    function getMaxCursorNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxIndexLength : Integer; cdecl;                                // ()I A: $401
    function getMaxProcedureNameLength : Integer; cdecl;                        // ()I A: $401
    function getMaxRowSize : Integer; cdecl;                                    // ()I A: $401
    function getMaxSchemaNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxStatementLength : Integer; cdecl;                            // ()I A: $401
    function getMaxStatements : Integer; cdecl;                                 // ()I A: $401
    function getMaxTableNameLength : Integer; cdecl;                            // ()I A: $401
    function getMaxTablesInSelect : Integer; cdecl;                             // ()I A: $401
    function getMaxUserNameLength : Integer; cdecl;                             // ()I A: $401
    function getNumericFunctions : JString; cdecl;                              // ()Ljava/lang/String; A: $401
    function getPrimaryKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getProcedureColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getProcedureTerm : JString; cdecl;                                 // ()Ljava/lang/String; A: $401
    function getProcedures(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getResultSetHoldability : Integer; cdecl;                          // ()I A: $401
    function getRowIdLifetime : JRowIdLifetime; cdecl;                          // ()Ljava/sql/RowIdLifetime; A: $401
    function getSQLKeywords : JString; cdecl;                                   // ()Ljava/lang/String; A: $401
    function getSQLStateType : Integer; cdecl;                                  // ()I A: $401
    function getSchemaTerm : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getSchemas : JResultSet; cdecl; overload;                          // ()Ljava/sql/ResultSet; A: $401
    function getSchemas(JStringparam0 : JString; JStringparam1 : JString) : JResultSet; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSearchStringEscape : JString; cdecl;                            // ()Ljava/lang/String; A: $401
    function getStringFunctions : JString; cdecl;                               // ()Ljava/lang/String; A: $401
    function getSuperTables(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSuperTypes(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSystemFunctions : JString; cdecl;                               // ()Ljava/lang/String; A: $401
    function getTablePrivileges(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getTableTypes : JResultSet; cdecl;                                 // ()Ljava/sql/ResultSet; A: $401
    function getTables(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; TJavaArrayJStringparam3 : TJavaArray<JString>) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getTimeDateFunctions : JString; cdecl;                             // ()Ljava/lang/String; A: $401
    function getTypeInfo : JResultSet; cdecl;                                   // ()Ljava/sql/ResultSet; A: $401
    function getUDTs(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; TJavaArrayIntegerparam3 : TJavaArray<Integer>) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet; A: $401
    function getURL : JString; cdecl;                                           // ()Ljava/lang/String; A: $401
    function getUserName : JString; cdecl;                                      // ()Ljava/lang/String; A: $401
    function getVersionColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function insertsAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function isCatalogAtStart : boolean; cdecl;                                 // ()Z A: $401
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $401
    function locatorsUpdateCopy : boolean; cdecl;                               // ()Z A: $401
    function nullPlusNonNullIsNull : boolean; cdecl;                            // ()Z A: $401
    function nullsAreSortedAtEnd : boolean; cdecl;                              // ()Z A: $401
    function nullsAreSortedAtStart : boolean; cdecl;                            // ()Z A: $401
    function nullsAreSortedHigh : boolean; cdecl;                               // ()Z A: $401
    function nullsAreSortedLow : boolean; cdecl;                                // ()Z A: $401
    function othersDeletesAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function othersInsertsAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function othersUpdatesAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function ownDeletesAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function ownInsertsAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function ownUpdatesAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function storesLowerCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesLowerCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function storesMixedCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesMixedCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function storesUpperCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesUpperCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function supportsANSI92EntryLevelSQL : boolean; cdecl;                      // ()Z A: $401
    function supportsANSI92FullSQL : boolean; cdecl;                            // ()Z A: $401
    function supportsANSI92IntermediateSQL : boolean; cdecl;                    // ()Z A: $401
    function supportsAlterTableWithAddColumn : boolean; cdecl;                  // ()Z A: $401
    function supportsAlterTableWithDropColumn : boolean; cdecl;                 // ()Z A: $401
    function supportsBatchUpdates : boolean; cdecl;                             // ()Z A: $401
    function supportsCatalogsInDataManipulation : boolean; cdecl;               // ()Z A: $401
    function supportsCatalogsInIndexDefinitions : boolean; cdecl;               // ()Z A: $401
    function supportsCatalogsInPrivilegeDefinitions : boolean; cdecl;           // ()Z A: $401
    function supportsCatalogsInProcedureCalls : boolean; cdecl;                 // ()Z A: $401
    function supportsCatalogsInTableDefinitions : boolean; cdecl;               // ()Z A: $401
    function supportsColumnAliasing : boolean; cdecl;                           // ()Z A: $401
    function supportsConvert : boolean; cdecl; overload;                        // ()Z A: $401
    function supportsConvert(Integerparam0 : Integer; Integerparam1 : Integer) : boolean; cdecl; overload;// (II)Z A: $401
    function supportsCoreSQLGrammar : boolean; cdecl;                           // ()Z A: $401
    function supportsCorrelatedSubqueries : boolean; cdecl;                     // ()Z A: $401
    function supportsDataDefinitionAndDataManipulationTransactions : boolean; cdecl;// ()Z A: $401
    function supportsDataManipulationTransactionsOnly : boolean; cdecl;         // ()Z A: $401
    function supportsDifferentTableCorrelationNames : boolean; cdecl;           // ()Z A: $401
    function supportsExpressionsInOrderBy : boolean; cdecl;                     // ()Z A: $401
    function supportsExtendedSQLGrammar : boolean; cdecl;                       // ()Z A: $401
    function supportsFullOuterJoins : boolean; cdecl;                           // ()Z A: $401
    function supportsGetGeneratedKeys : boolean; cdecl;                         // ()Z A: $401
    function supportsGroupBy : boolean; cdecl;                                  // ()Z A: $401
    function supportsGroupByBeyondSelect : boolean; cdecl;                      // ()Z A: $401
    function supportsGroupByUnrelated : boolean; cdecl;                         // ()Z A: $401
    function supportsIntegrityEnhancementFacility : boolean; cdecl;             // ()Z A: $401
    function supportsLikeEscapeClause : boolean; cdecl;                         // ()Z A: $401
    function supportsLimitedOuterJoins : boolean; cdecl;                        // ()Z A: $401
    function supportsMinimumSQLGrammar : boolean; cdecl;                        // ()Z A: $401
    function supportsMixedCaseIdentifiers : boolean; cdecl;                     // ()Z A: $401
    function supportsMixedCaseQuotedIdentifiers : boolean; cdecl;               // ()Z A: $401
    function supportsMultipleOpenResults : boolean; cdecl;                      // ()Z A: $401
    function supportsMultipleResultSets : boolean; cdecl;                       // ()Z A: $401
    function supportsMultipleTransactions : boolean; cdecl;                     // ()Z A: $401
    function supportsNamedParameters : boolean; cdecl;                          // ()Z A: $401
    function supportsNonNullableColumns : boolean; cdecl;                       // ()Z A: $401
    function supportsOpenCursorsAcrossCommit : boolean; cdecl;                  // ()Z A: $401
    function supportsOpenCursorsAcrossRollback : boolean; cdecl;                // ()Z A: $401
    function supportsOpenStatementsAcrossCommit : boolean; cdecl;               // ()Z A: $401
    function supportsOpenStatementsAcrossRollback : boolean; cdecl;             // ()Z A: $401
    function supportsOrderByUnrelated : boolean; cdecl;                         // ()Z A: $401
    function supportsOuterJoins : boolean; cdecl;                               // ()Z A: $401
    function supportsPositionedDelete : boolean; cdecl;                         // ()Z A: $401
    function supportsPositionedUpdate : boolean; cdecl;                         // ()Z A: $401
    function supportsResultSetConcurrency(Integerparam0 : Integer; Integerparam1 : Integer) : boolean; cdecl;// (II)Z A: $401
    function supportsResultSetHoldability(Integerparam0 : Integer) : boolean; cdecl;// (I)Z A: $401
    function supportsResultSetType(Integerparam0 : Integer) : boolean; cdecl;   // (I)Z A: $401
    function supportsSavepoints : boolean; cdecl;                               // ()Z A: $401
    function supportsSchemasInDataManipulation : boolean; cdecl;                // ()Z A: $401
    function supportsSchemasInIndexDefinitions : boolean; cdecl;                // ()Z A: $401
    function supportsSchemasInPrivilegeDefinitions : boolean; cdecl;            // ()Z A: $401
    function supportsSchemasInProcedureCalls : boolean; cdecl;                  // ()Z A: $401
    function supportsSchemasInTableDefinitions : boolean; cdecl;                // ()Z A: $401
    function supportsSelectForUpdate : boolean; cdecl;                          // ()Z A: $401
    function supportsStatementPooling : boolean; cdecl;                         // ()Z A: $401
    function supportsStoredFunctionsUsingCallSyntax : boolean; cdecl;           // ()Z A: $401
    function supportsStoredProcedures : boolean; cdecl;                         // ()Z A: $401
    function supportsSubqueriesInComparisons : boolean; cdecl;                  // ()Z A: $401
    function supportsSubqueriesInExists : boolean; cdecl;                       // ()Z A: $401
    function supportsSubqueriesInIns : boolean; cdecl;                          // ()Z A: $401
    function supportsSubqueriesInQuantifieds : boolean; cdecl;                  // ()Z A: $401
    function supportsTableCorrelationNames : boolean; cdecl;                    // ()Z A: $401
    function supportsTransactionIsolationLevel(Integerparam0 : Integer) : boolean; cdecl;// (I)Z A: $401
    function supportsTransactions : boolean; cdecl;                             // ()Z A: $401
    function supportsUnion : boolean; cdecl;                                    // ()Z A: $401
    function supportsUnionAll : boolean; cdecl;                                 // ()Z A: $401
    function updatesAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function usesLocalFilePerTable : boolean; cdecl;                            // ()Z A: $401
    function usesLocalFiles : boolean; cdecl;                                   // ()Z A: $401
    property attributeNoNulls : SmallInt read _GetattributeNoNulls;             // S A: $19
    property attributeNullable : SmallInt read _GetattributeNullable;           // S A: $19
    property attributeNullableUnknown : SmallInt read _GetattributeNullableUnknown;// S A: $19
    property bestRowNotPseudo : Integer read _GetbestRowNotPseudo;              // I A: $19
    property bestRowPseudo : Integer read _GetbestRowPseudo;                    // I A: $19
    property bestRowSession : Integer read _GetbestRowSession;                  // I A: $19
    property bestRowTemporary : Integer read _GetbestRowTemporary;              // I A: $19
    property bestRowTransaction : Integer read _GetbestRowTransaction;          // I A: $19
    property bestRowUnknown : Integer read _GetbestRowUnknown;                  // I A: $19
    property columnNoNulls : Integer read _GetcolumnNoNulls;                    // I A: $19
    property columnNullable : Integer read _GetcolumnNullable;                  // I A: $19
    property columnNullableUnknown : Integer read _GetcolumnNullableUnknown;    // I A: $19
    property functionColumnIn : Integer read _GetfunctionColumnIn;              // I A: $19
    property functionColumnInOut : Integer read _GetfunctionColumnInOut;        // I A: $19
    property functionColumnOut : Integer read _GetfunctionColumnOut;            // I A: $19
    property functionColumnResult : Integer read _GetfunctionColumnResult;      // I A: $19
    property functionColumnUnknown : Integer read _GetfunctionColumnUnknown;    // I A: $19
    property functionNoNulls : Integer read _GetfunctionNoNulls;                // I A: $19
    property functionNoTable : Integer read _GetfunctionNoTable;                // I A: $19
    property functionNullable : Integer read _GetfunctionNullable;              // I A: $19
    property functionNullableUnknown : Integer read _GetfunctionNullableUnknown;// I A: $19
    property functionResultUnknown : Integer read _GetfunctionResultUnknown;    // I A: $19
    property functionReturn : Integer read _GetfunctionReturn;                  // I A: $19
    property functionReturnsTable : Integer read _GetfunctionReturnsTable;      // I A: $19
    property importedKeyCascade : Integer read _GetimportedKeyCascade;          // I A: $19
    property importedKeyInitiallyDeferred : Integer read _GetimportedKeyInitiallyDeferred;// I A: $19
    property importedKeyInitiallyImmediate : Integer read _GetimportedKeyInitiallyImmediate;// I A: $19
    property importedKeyNoAction : Integer read _GetimportedKeyNoAction;        // I A: $19
    property importedKeyNotDeferrable : Integer read _GetimportedKeyNotDeferrable;// I A: $19
    property importedKeyRestrict : Integer read _GetimportedKeyRestrict;        // I A: $19
    property importedKeySetDefault : Integer read _GetimportedKeySetDefault;    // I A: $19
    property importedKeySetNull : Integer read _GetimportedKeySetNull;          // I A: $19
    property procedureColumnIn : Integer read _GetprocedureColumnIn;            // I A: $19
    property procedureColumnInOut : Integer read _GetprocedureColumnInOut;      // I A: $19
    property procedureColumnOut : Integer read _GetprocedureColumnOut;          // I A: $19
    property procedureColumnResult : Integer read _GetprocedureColumnResult;    // I A: $19
    property procedureColumnReturn : Integer read _GetprocedureColumnReturn;    // I A: $19
    property procedureColumnUnknown : Integer read _GetprocedureColumnUnknown;  // I A: $19
    property procedureNoNulls : Integer read _GetprocedureNoNulls;              // I A: $19
    property procedureNoResult : Integer read _GetprocedureNoResult;            // I A: $19
    property procedureNullable : Integer read _GetprocedureNullable;            // I A: $19
    property procedureNullableUnknown : Integer read _GetprocedureNullableUnknown;// I A: $19
    property procedureResultUnknown : Integer read _GetprocedureResultUnknown;  // I A: $19
    property procedureReturnsResult : Integer read _GetprocedureReturnsResult;  // I A: $19
    property sqlStateSQL : Integer read _GetsqlStateSQL;                        // I A: $19
    property sqlStateSQL99 : Integer read _GetsqlStateSQL99;                    // I A: $19
    property sqlStateXOpen : Integer read _GetsqlStateXOpen;                    // I A: $19
    property tableIndexClustered : SmallInt read _GettableIndexClustered;       // S A: $19
    property tableIndexHashed : SmallInt read _GettableIndexHashed;             // S A: $19
    property tableIndexOther : SmallInt read _GettableIndexOther;               // S A: $19
    property tableIndexStatistic : SmallInt read _GettableIndexStatistic;       // S A: $19
    property typeNoNulls : Integer read _GettypeNoNulls;                        // I A: $19
    property typeNullable : Integer read _GettypeNullable;                      // I A: $19
    property typeNullableUnknown : Integer read _GettypeNullableUnknown;        // I A: $19
    property typePredBasic : Integer read _GettypePredBasic;                    // I A: $19
    property typePredChar : Integer read _GettypePredChar;                      // I A: $19
    property typePredNone : Integer read _GettypePredNone;                      // I A: $19
    property typeSearchable : Integer read _GettypeSearchable;                  // I A: $19
    property versionColumnNotPseudo : Integer read _GetversionColumnNotPseudo;  // I A: $19
    property versionColumnPseudo : Integer read _GetversionColumnPseudo;        // I A: $19
    property versionColumnUnknown : Integer read _GetversionColumnUnknown;      // I A: $19
  end;

  [JavaSignature('java/sql/DatabaseMetaData')]
  JDatabaseMetaData = interface(JObject)
    ['{D2C3802D-9C40-4C66-A6E8-274C19FC05AD}']
    function allProceduresAreCallable : boolean; cdecl;                         // ()Z A: $401
    function allTablesAreSelectable : boolean; cdecl;                           // ()Z A: $401
    function autoCommitFailureClosesAllResultSets : boolean; cdecl;             // ()Z A: $401
    function dataDefinitionCausesTransactionCommit : boolean; cdecl;            // ()Z A: $401
    function dataDefinitionIgnoredInTransactions : boolean; cdecl;              // ()Z A: $401
    function deletesAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function doesMaxRowSizeIncludeBlobs : boolean; cdecl;                       // ()Z A: $401
    function getAttributes(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getBestRowIdentifier(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; Integerparam3 : Integer; booleanparam4 : boolean) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet; A: $401
    function getCatalogSeparator : JString; cdecl;                              // ()Ljava/lang/String; A: $401
    function getCatalogTerm : JString; cdecl;                                   // ()Ljava/lang/String; A: $401
    function getCatalogs : JResultSet; cdecl;                                   // ()Ljava/sql/ResultSet; A: $401
    function getClientInfoProperties : JResultSet; cdecl;                       // ()Ljava/sql/ResultSet; A: $401
    function getColumnPrivileges(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getConnection : JConnection; cdecl;                                // ()Ljava/sql/Connection; A: $401
    function getCrossReference(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString; JStringparam4 : JString; JStringparam5 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getDatabaseMajorVersion : Integer; cdecl;                          // ()I A: $401
    function getDatabaseMinorVersion : Integer; cdecl;                          // ()I A: $401
    function getDatabaseProductName : JString; cdecl;                           // ()Ljava/lang/String; A: $401
    function getDatabaseProductVersion : JString; cdecl;                        // ()Ljava/lang/String; A: $401
    function getDefaultTransactionIsolation : Integer; cdecl;                   // ()I A: $401
    function getDriverMajorVersion : Integer; cdecl;                            // ()I A: $401
    function getDriverMinorVersion : Integer; cdecl;                            // ()I A: $401
    function getDriverName : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getDriverVersion : JString; cdecl;                                 // ()Ljava/lang/String; A: $401
    function getExportedKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getExtraNameCharacters : JString; cdecl;                           // ()Ljava/lang/String; A: $401
    function getFunctionColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getFunctions(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getIdentifierQuoteString : JString; cdecl;                         // ()Ljava/lang/String; A: $401
    function getImportedKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getIndexInfo(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; booleanparam3 : boolean; booleanparam4 : boolean) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet; A: $401
    function getJDBCMajorVersion : Integer; cdecl;                              // ()I A: $401
    function getJDBCMinorVersion : Integer; cdecl;                              // ()I A: $401
    function getMaxBinaryLiteralLength : Integer; cdecl;                        // ()I A: $401
    function getMaxCatalogNameLength : Integer; cdecl;                          // ()I A: $401
    function getMaxCharLiteralLength : Integer; cdecl;                          // ()I A: $401
    function getMaxColumnNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInGroupBy : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInIndex : Integer; cdecl;                             // ()I A: $401
    function getMaxColumnsInOrderBy : Integer; cdecl;                           // ()I A: $401
    function getMaxColumnsInSelect : Integer; cdecl;                            // ()I A: $401
    function getMaxColumnsInTable : Integer; cdecl;                             // ()I A: $401
    function getMaxConnections : Integer; cdecl;                                // ()I A: $401
    function getMaxCursorNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxIndexLength : Integer; cdecl;                                // ()I A: $401
    function getMaxProcedureNameLength : Integer; cdecl;                        // ()I A: $401
    function getMaxRowSize : Integer; cdecl;                                    // ()I A: $401
    function getMaxSchemaNameLength : Integer; cdecl;                           // ()I A: $401
    function getMaxStatementLength : Integer; cdecl;                            // ()I A: $401
    function getMaxStatements : Integer; cdecl;                                 // ()I A: $401
    function getMaxTableNameLength : Integer; cdecl;                            // ()I A: $401
    function getMaxTablesInSelect : Integer; cdecl;                             // ()I A: $401
    function getMaxUserNameLength : Integer; cdecl;                             // ()I A: $401
    function getNumericFunctions : JString; cdecl;                              // ()Ljava/lang/String; A: $401
    function getPrimaryKeys(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getProcedureColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; JStringparam3 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getProcedureTerm : JString; cdecl;                                 // ()Ljava/lang/String; A: $401
    function getProcedures(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getResultSetHoldability : Integer; cdecl;                          // ()I A: $401
    function getRowIdLifetime : JRowIdLifetime; cdecl;                          // ()Ljava/sql/RowIdLifetime; A: $401
    function getSQLKeywords : JString; cdecl;                                   // ()Ljava/lang/String; A: $401
    function getSQLStateType : Integer; cdecl;                                  // ()I A: $401
    function getSchemaTerm : JString; cdecl;                                    // ()Ljava/lang/String; A: $401
    function getSchemas : JResultSet; cdecl; overload;                          // ()Ljava/sql/ResultSet; A: $401
    function getSchemas(JStringparam0 : JString; JStringparam1 : JString) : JResultSet; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSearchStringEscape : JString; cdecl;                            // ()Ljava/lang/String; A: $401
    function getStringFunctions : JString; cdecl;                               // ()Ljava/lang/String; A: $401
    function getSuperTables(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSuperTypes(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getSystemFunctions : JString; cdecl;                               // ()Ljava/lang/String; A: $401
    function getTablePrivileges(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getTableTypes : JResultSet; cdecl;                                 // ()Ljava/sql/ResultSet; A: $401
    function getTables(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; TJavaArrayJStringparam3 : TJavaArray<JString>) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function getTimeDateFunctions : JString; cdecl;                             // ()Ljava/lang/String; A: $401
    function getTypeInfo : JResultSet; cdecl;                                   // ()Ljava/sql/ResultSet; A: $401
    function getUDTs(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString; TJavaArrayIntegerparam3 : TJavaArray<Integer>) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet; A: $401
    function getURL : JString; cdecl;                                           // ()Ljava/lang/String; A: $401
    function getUserName : JString; cdecl;                                      // ()Ljava/lang/String; A: $401
    function getVersionColumns(JStringparam0 : JString; JStringparam1 : JString; JStringparam2 : JString) : JResultSet; cdecl;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; A: $401
    function insertsAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function isCatalogAtStart : boolean; cdecl;                                 // ()Z A: $401
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $401
    function locatorsUpdateCopy : boolean; cdecl;                               // ()Z A: $401
    function nullPlusNonNullIsNull : boolean; cdecl;                            // ()Z A: $401
    function nullsAreSortedAtEnd : boolean; cdecl;                              // ()Z A: $401
    function nullsAreSortedAtStart : boolean; cdecl;                            // ()Z A: $401
    function nullsAreSortedHigh : boolean; cdecl;                               // ()Z A: $401
    function nullsAreSortedLow : boolean; cdecl;                                // ()Z A: $401
    function othersDeletesAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function othersInsertsAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function othersUpdatesAreVisible(Integerparam0 : Integer) : boolean; cdecl; // (I)Z A: $401
    function ownDeletesAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function ownInsertsAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function ownUpdatesAreVisible(Integerparam0 : Integer) : boolean; cdecl;    // (I)Z A: $401
    function storesLowerCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesLowerCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function storesMixedCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesMixedCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function storesUpperCaseIdentifiers : boolean; cdecl;                       // ()Z A: $401
    function storesUpperCaseQuotedIdentifiers : boolean; cdecl;                 // ()Z A: $401
    function supportsANSI92EntryLevelSQL : boolean; cdecl;                      // ()Z A: $401
    function supportsANSI92FullSQL : boolean; cdecl;                            // ()Z A: $401
    function supportsANSI92IntermediateSQL : boolean; cdecl;                    // ()Z A: $401
    function supportsAlterTableWithAddColumn : boolean; cdecl;                  // ()Z A: $401
    function supportsAlterTableWithDropColumn : boolean; cdecl;                 // ()Z A: $401
    function supportsBatchUpdates : boolean; cdecl;                             // ()Z A: $401
    function supportsCatalogsInDataManipulation : boolean; cdecl;               // ()Z A: $401
    function supportsCatalogsInIndexDefinitions : boolean; cdecl;               // ()Z A: $401
    function supportsCatalogsInPrivilegeDefinitions : boolean; cdecl;           // ()Z A: $401
    function supportsCatalogsInProcedureCalls : boolean; cdecl;                 // ()Z A: $401
    function supportsCatalogsInTableDefinitions : boolean; cdecl;               // ()Z A: $401
    function supportsColumnAliasing : boolean; cdecl;                           // ()Z A: $401
    function supportsConvert : boolean; cdecl; overload;                        // ()Z A: $401
    function supportsConvert(Integerparam0 : Integer; Integerparam1 : Integer) : boolean; cdecl; overload;// (II)Z A: $401
    function supportsCoreSQLGrammar : boolean; cdecl;                           // ()Z A: $401
    function supportsCorrelatedSubqueries : boolean; cdecl;                     // ()Z A: $401
    function supportsDataDefinitionAndDataManipulationTransactions : boolean; cdecl;// ()Z A: $401
    function supportsDataManipulationTransactionsOnly : boolean; cdecl;         // ()Z A: $401
    function supportsDifferentTableCorrelationNames : boolean; cdecl;           // ()Z A: $401
    function supportsExpressionsInOrderBy : boolean; cdecl;                     // ()Z A: $401
    function supportsExtendedSQLGrammar : boolean; cdecl;                       // ()Z A: $401
    function supportsFullOuterJoins : boolean; cdecl;                           // ()Z A: $401
    function supportsGetGeneratedKeys : boolean; cdecl;                         // ()Z A: $401
    function supportsGroupBy : boolean; cdecl;                                  // ()Z A: $401
    function supportsGroupByBeyondSelect : boolean; cdecl;                      // ()Z A: $401
    function supportsGroupByUnrelated : boolean; cdecl;                         // ()Z A: $401
    function supportsIntegrityEnhancementFacility : boolean; cdecl;             // ()Z A: $401
    function supportsLikeEscapeClause : boolean; cdecl;                         // ()Z A: $401
    function supportsLimitedOuterJoins : boolean; cdecl;                        // ()Z A: $401
    function supportsMinimumSQLGrammar : boolean; cdecl;                        // ()Z A: $401
    function supportsMixedCaseIdentifiers : boolean; cdecl;                     // ()Z A: $401
    function supportsMixedCaseQuotedIdentifiers : boolean; cdecl;               // ()Z A: $401
    function supportsMultipleOpenResults : boolean; cdecl;                      // ()Z A: $401
    function supportsMultipleResultSets : boolean; cdecl;                       // ()Z A: $401
    function supportsMultipleTransactions : boolean; cdecl;                     // ()Z A: $401
    function supportsNamedParameters : boolean; cdecl;                          // ()Z A: $401
    function supportsNonNullableColumns : boolean; cdecl;                       // ()Z A: $401
    function supportsOpenCursorsAcrossCommit : boolean; cdecl;                  // ()Z A: $401
    function supportsOpenCursorsAcrossRollback : boolean; cdecl;                // ()Z A: $401
    function supportsOpenStatementsAcrossCommit : boolean; cdecl;               // ()Z A: $401
    function supportsOpenStatementsAcrossRollback : boolean; cdecl;             // ()Z A: $401
    function supportsOrderByUnrelated : boolean; cdecl;                         // ()Z A: $401
    function supportsOuterJoins : boolean; cdecl;                               // ()Z A: $401
    function supportsPositionedDelete : boolean; cdecl;                         // ()Z A: $401
    function supportsPositionedUpdate : boolean; cdecl;                         // ()Z A: $401
    function supportsResultSetConcurrency(Integerparam0 : Integer; Integerparam1 : Integer) : boolean; cdecl;// (II)Z A: $401
    function supportsResultSetHoldability(Integerparam0 : Integer) : boolean; cdecl;// (I)Z A: $401
    function supportsResultSetType(Integerparam0 : Integer) : boolean; cdecl;   // (I)Z A: $401
    function supportsSavepoints : boolean; cdecl;                               // ()Z A: $401
    function supportsSchemasInDataManipulation : boolean; cdecl;                // ()Z A: $401
    function supportsSchemasInIndexDefinitions : boolean; cdecl;                // ()Z A: $401
    function supportsSchemasInPrivilegeDefinitions : boolean; cdecl;            // ()Z A: $401
    function supportsSchemasInProcedureCalls : boolean; cdecl;                  // ()Z A: $401
    function supportsSchemasInTableDefinitions : boolean; cdecl;                // ()Z A: $401
    function supportsSelectForUpdate : boolean; cdecl;                          // ()Z A: $401
    function supportsStatementPooling : boolean; cdecl;                         // ()Z A: $401
    function supportsStoredFunctionsUsingCallSyntax : boolean; cdecl;           // ()Z A: $401
    function supportsStoredProcedures : boolean; cdecl;                         // ()Z A: $401
    function supportsSubqueriesInComparisons : boolean; cdecl;                  // ()Z A: $401
    function supportsSubqueriesInExists : boolean; cdecl;                       // ()Z A: $401
    function supportsSubqueriesInIns : boolean; cdecl;                          // ()Z A: $401
    function supportsSubqueriesInQuantifieds : boolean; cdecl;                  // ()Z A: $401
    function supportsTableCorrelationNames : boolean; cdecl;                    // ()Z A: $401
    function supportsTransactionIsolationLevel(Integerparam0 : Integer) : boolean; cdecl;// (I)Z A: $401
    function supportsTransactions : boolean; cdecl;                             // ()Z A: $401
    function supportsUnion : boolean; cdecl;                                    // ()Z A: $401
    function supportsUnionAll : boolean; cdecl;                                 // ()Z A: $401
    function updatesAreDetected(Integerparam0 : Integer) : boolean; cdecl;      // (I)Z A: $401
    function usesLocalFilePerTable : boolean; cdecl;                            // ()Z A: $401
    function usesLocalFiles : boolean; cdecl;                                   // ()Z A: $401
  end;

  TJDatabaseMetaData = class(TJavaGenericImport<JDatabaseMetaDataClass, JDatabaseMetaData>)
  end;

  end;

  end;

  // Merged from: .\android-19\java.sql.CallableStatement.pas
  JCallableStatementClass = interface(JObjectClass)
    ['{3589BFF7-A8C3-4ADF-886D-034F27118756}']
    function getArray(Integerparam0 : Integer) : JArray; cdecl; overload;       // (I)Ljava/sql/Array; A: $401
    function getArray(JStringparam0 : JString) : JArray; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/Array; A: $401
    function getBigDecimal(Integerparam0 : Integer) : JBigDecimal; cdecl; overload;// (I)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(Integerparam0 : Integer; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (II)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString) : JBigDecimal; cdecl; overload;// (Ljava/lang/String;)Ljava/math/BigDecimal; A: $401
    function getBlob(Integerparam0 : Integer) : JBlob; cdecl; overload;         // (I)Ljava/sql/Blob; A: $401
    function getBlob(JStringparam0 : JString) : JBlob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Blob; A: $401
    function getBoolean(Integerparam0 : Integer) : boolean; cdecl; overload;    // (I)Z A: $401
    function getBoolean(JStringparam0 : JString) : boolean; cdecl; overload;    // (Ljava/lang/String;)Z A: $401
    function getByte(Integerparam0 : Integer) : Byte; cdecl; overload;          // (I)B A: $401
    function getByte(JStringparam0 : JString) : Byte; cdecl; overload;          // (Ljava/lang/String;)B A: $401
    function getBytes(Integerparam0 : Integer) : TJavaArray<Byte>; cdecl; overload;// (I)[B A: $401
    function getBytes(JStringparam0 : JString) : TJavaArray<Byte>; cdecl; overload;// (Ljava/lang/String;)[B A: $401
    function getCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getClob(Integerparam0 : Integer) : JClob; cdecl; overload;         // (I)Ljava/sql/Clob; A: $401
    function getClob(JStringparam0 : JString) : JClob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Clob; A: $401
    function getDate(Integerparam0 : Integer) : JDate; cdecl; overload;         // (I)Ljava/sql/Date; A: $401
    function getDate(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString) : JDate; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDouble(Integerparam0 : Integer) : Double; cdecl; overload;      // (I)D A: $401
    function getDouble(JStringparam0 : JString) : Double; cdecl; overload;      // (Ljava/lang/String;)D A: $401
    function getFloat(Integerparam0 : Integer) : Single; cdecl; overload;       // (I)F A: $401
    function getFloat(JStringparam0 : JString) : Single; cdecl; overload;       // (Ljava/lang/String;)F A: $401
    function getInt(Integerparam0 : Integer) : Integer; cdecl; overload;        // (I)I A: $401
    function getInt(JStringparam0 : JString) : Integer; cdecl; overload;        // (Ljava/lang/String;)I A: $401
    function getLong(Integerparam0 : Integer) : Int64; cdecl; overload;         // (I)J A: $401
    function getLong(JStringparam0 : JString) : Int64; cdecl; overload;         // (Ljava/lang/String;)J A: $401
    function getNCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getNCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getNClob(Integerparam0 : Integer) : JNClob; cdecl; overload;       // (I)Ljava/sql/NClob; A: $401
    function getNClob(JStringparam0 : JString) : JNClob; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/NClob; A: $401
    function getNString(Integerparam0 : Integer) : JString; cdecl; overload;    // (I)Ljava/lang/String; A: $401
    function getNString(JStringparam0 : JString) : JString; cdecl; overload;    // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getObject(Integerparam0 : Integer) : JObject; cdecl; overload;     // (I)Ljava/lang/Object; A: $401
    function getObject(Integerparam0 : Integer; JMapparam1 : JMap) : JObject; cdecl; overload;// (ILjava/util/Map;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString) : JObject; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString; JMapparam1 : JMap) : JObject; cdecl; overload;// (Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getRef(Integerparam0 : Integer) : JRef; cdecl; overload;           // (I)Ljava/sql/Ref; A: $401
    function getRef(JStringparam0 : JString) : JRef; cdecl; overload;           // (Ljava/lang/String;)Ljava/sql/Ref; A: $401
    function getRowId(Integerparam0 : Integer) : JRowId; cdecl; overload;       // (I)Ljava/sql/RowId; A: $401
    function getRowId(JStringparam0 : JString) : JRowId; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/RowId; A: $401
    function getSQLXML(Integerparam0 : Integer) : JSQLXML; cdecl; overload;     // (I)Ljava/sql/SQLXML; A: $401
    function getSQLXML(JStringparam0 : JString) : JSQLXML; cdecl; overload;     // (Ljava/lang/String;)Ljava/sql/SQLXML; A: $401
    function getShort(Integerparam0 : Integer) : SmallInt; cdecl; overload;     // (I)S A: $401
    function getShort(JStringparam0 : JString) : SmallInt; cdecl; overload;     // (Ljava/lang/String;)S A: $401
    function getString(Integerparam0 : Integer) : JString; cdecl; overload;     // (I)Ljava/lang/String; A: $401
    function getString(JStringparam0 : JString) : JString; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getTime(Integerparam0 : Integer) : JTime; cdecl; overload;         // (I)Ljava/sql/Time; A: $401
    function getTime(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString) : JTime; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTimestamp(Integerparam0 : Integer) : JTimestamp; cdecl; overload;// (I)Ljava/sql/Timestamp; A: $401
    function getTimestamp(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString) : JTimestamp; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getURL(Integerparam0 : Integer) : JURL; cdecl; overload;           // (I)Ljava/net/URL; A: $401
    function getURL(JStringparam0 : JString) : JURL; cdecl; overload;           // (Ljava/lang/String;)Ljava/net/URL; A: $401
    function wasNull : boolean; cdecl;                                          // ()Z A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer; Integerparam2 : Integer) ; cdecl; overload;// (III)V A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (IILjava/lang/String;)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;II)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (Ljava/lang/String;ILjava/lang/String;)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure setBigDecimal(JStringparam0 : JString; JBigDecimalparam1 : JBigDecimal) ; cdecl;// (Ljava/lang/String;Ljava/math/BigDecimal;)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure setBlob(JStringparam0 : JString; JBlobparam1 : JBlob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Blob;)V A: $401
    procedure setBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setBoolean(JStringparam0 : JString; booleanparam1 : boolean) ; cdecl;// (Ljava/lang/String;Z)V A: $401
    procedure setByte(JStringparam0 : JString; Byteparam1 : Byte) ; cdecl;      // (Ljava/lang/String;B)V A: $401
    procedure setBytes(JStringparam0 : JString; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl;// (Ljava/lang/String;[B)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;I)V A: $401
    procedure setClob(JStringparam0 : JString; JClobparam1 : JClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Clob;)V A: $401
    procedure setClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setDate(JStringparam0 : JString; JDateparam1 : JDate) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;)V A: $401
    procedure setDate(JStringparam0 : JString; JDateparam1 : JDate; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;Ljava/util/Calendar;)V A: $401
    procedure setDouble(JStringparam0 : JString; Doubleparam1 : Double) ; cdecl;// (Ljava/lang/String;D)V A: $401
    procedure setFloat(JStringparam0 : JString; Singleparam1 : Single) ; cdecl; // (Ljava/lang/String;F)V A: $401
    procedure setInt(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; // (Ljava/lang/String;I)V A: $401
    procedure setLong(JStringparam0 : JString; Int64param1 : Int64) ; cdecl;    // (Ljava/lang/String;J)V A: $401
    procedure setNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setNClob(JStringparam0 : JString; JNClobparam1 : JNClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/NClob;)V A: $401
    procedure setNClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setNClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setNString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setNull(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure setNull(JStringparam0 : JString; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (Ljava/lang/String;ILjava/lang/String;)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;I)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer; Integerparam3 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;II)V A: $401
    procedure setRowId(JStringparam0 : JString; JRowIdparam1 : JRowId) ; cdecl; // (Ljava/lang/String;Ljava/sql/RowId;)V A: $401
    procedure setSQLXML(JStringparam0 : JString; JSQLXMLparam1 : JSQLXML) ; cdecl;// (Ljava/lang/String;Ljava/sql/SQLXML;)V A: $401
    procedure setShort(JStringparam0 : JString; SmallIntparam1 : SmallInt) ; cdecl;// (Ljava/lang/String;S)V A: $401
    procedure setString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setTime(JStringparam0 : JString; JTimeparam1 : JTime) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;)V A: $401
    procedure setTime(JStringparam0 : JString; JTimeparam1 : JTime; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;Ljava/util/Calendar;)V A: $401
    procedure setTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;)V A: $401
    procedure setTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;Ljava/util/Calendar;)V A: $401
    procedure setURL(JStringparam0 : JString; JURLparam1 : JURL) ; cdecl;       // (Ljava/lang/String;Ljava/net/URL;)V A: $401
  end;

  [JavaSignature('java/sql/CallableStatement')]
  JCallableStatement = interface(JObject)
    ['{9CE09D3F-FADE-4E0A-853F-688095981286}']
    function getArray(Integerparam0 : Integer) : JArray; cdecl; overload;       // (I)Ljava/sql/Array; A: $401
    function getArray(JStringparam0 : JString) : JArray; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/Array; A: $401
    function getBigDecimal(Integerparam0 : Integer) : JBigDecimal; cdecl; overload;// (I)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(Integerparam0 : Integer; Integerparam1 : Integer) : JBigDecimal; deprecated; cdecl; overload;// (II)Ljava/math/BigDecimal; A: $401
    function getBigDecimal(JStringparam0 : JString) : JBigDecimal; cdecl; overload;// (Ljava/lang/String;)Ljava/math/BigDecimal; A: $401
    function getBlob(Integerparam0 : Integer) : JBlob; cdecl; overload;         // (I)Ljava/sql/Blob; A: $401
    function getBlob(JStringparam0 : JString) : JBlob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Blob; A: $401
    function getBoolean(Integerparam0 : Integer) : boolean; cdecl; overload;    // (I)Z A: $401
    function getBoolean(JStringparam0 : JString) : boolean; cdecl; overload;    // (Ljava/lang/String;)Z A: $401
    function getByte(Integerparam0 : Integer) : Byte; cdecl; overload;          // (I)B A: $401
    function getByte(JStringparam0 : JString) : Byte; cdecl; overload;          // (Ljava/lang/String;)B A: $401
    function getBytes(Integerparam0 : Integer) : TJavaArray<Byte>; cdecl; overload;// (I)[B A: $401
    function getBytes(JStringparam0 : JString) : TJavaArray<Byte>; cdecl; overload;// (Ljava/lang/String;)[B A: $401
    function getCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getClob(Integerparam0 : Integer) : JClob; cdecl; overload;         // (I)Ljava/sql/Clob; A: $401
    function getClob(JStringparam0 : JString) : JClob; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Clob; A: $401
    function getDate(Integerparam0 : Integer) : JDate; cdecl; overload;         // (I)Ljava/sql/Date; A: $401
    function getDate(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString) : JDate; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Date; A: $401
    function getDate(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JDate; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date; A: $401
    function getDouble(Integerparam0 : Integer) : Double; cdecl; overload;      // (I)D A: $401
    function getDouble(JStringparam0 : JString) : Double; cdecl; overload;      // (Ljava/lang/String;)D A: $401
    function getFloat(Integerparam0 : Integer) : Single; cdecl; overload;       // (I)F A: $401
    function getFloat(JStringparam0 : JString) : Single; cdecl; overload;       // (Ljava/lang/String;)F A: $401
    function getInt(Integerparam0 : Integer) : Integer; cdecl; overload;        // (I)I A: $401
    function getInt(JStringparam0 : JString) : Integer; cdecl; overload;        // (Ljava/lang/String;)I A: $401
    function getLong(Integerparam0 : Integer) : Int64; cdecl; overload;         // (I)J A: $401
    function getLong(JStringparam0 : JString) : Int64; cdecl; overload;         // (Ljava/lang/String;)J A: $401
    function getNCharacterStream(Integerparam0 : Integer) : JReader; cdecl; overload;// (I)Ljava/io/Reader; A: $401
    function getNCharacterStream(JStringparam0 : JString) : JReader; cdecl; overload;// (Ljava/lang/String;)Ljava/io/Reader; A: $401
    function getNClob(Integerparam0 : Integer) : JNClob; cdecl; overload;       // (I)Ljava/sql/NClob; A: $401
    function getNClob(JStringparam0 : JString) : JNClob; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/NClob; A: $401
    function getNString(Integerparam0 : Integer) : JString; cdecl; overload;    // (I)Ljava/lang/String; A: $401
    function getNString(JStringparam0 : JString) : JString; cdecl; overload;    // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getObject(Integerparam0 : Integer) : JObject; cdecl; overload;     // (I)Ljava/lang/Object; A: $401
    function getObject(Integerparam0 : Integer; JMapparam1 : JMap) : JObject; cdecl; overload;// (ILjava/util/Map;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString) : JObject; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/Object; A: $401
    function getObject(JStringparam0 : JString; JMapparam1 : JMap) : JObject; cdecl; overload;// (Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object; A: $401
    function getRef(Integerparam0 : Integer) : JRef; cdecl; overload;           // (I)Ljava/sql/Ref; A: $401
    function getRef(JStringparam0 : JString) : JRef; cdecl; overload;           // (Ljava/lang/String;)Ljava/sql/Ref; A: $401
    function getRowId(Integerparam0 : Integer) : JRowId; cdecl; overload;       // (I)Ljava/sql/RowId; A: $401
    function getRowId(JStringparam0 : JString) : JRowId; cdecl; overload;       // (Ljava/lang/String;)Ljava/sql/RowId; A: $401
    function getSQLXML(Integerparam0 : Integer) : JSQLXML; cdecl; overload;     // (I)Ljava/sql/SQLXML; A: $401
    function getSQLXML(JStringparam0 : JString) : JSQLXML; cdecl; overload;     // (Ljava/lang/String;)Ljava/sql/SQLXML; A: $401
    function getShort(Integerparam0 : Integer) : SmallInt; cdecl; overload;     // (I)S A: $401
    function getShort(JStringparam0 : JString) : SmallInt; cdecl; overload;     // (Ljava/lang/String;)S A: $401
    function getString(Integerparam0 : Integer) : JString; cdecl; overload;     // (I)Ljava/lang/String; A: $401
    function getString(JStringparam0 : JString) : JString; cdecl; overload;     // (Ljava/lang/String;)Ljava/lang/String; A: $401
    function getTime(Integerparam0 : Integer) : JTime; cdecl; overload;         // (I)Ljava/sql/Time; A: $401
    function getTime(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString) : JTime; cdecl; overload;         // (Ljava/lang/String;)Ljava/sql/Time; A: $401
    function getTime(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTime; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time; A: $401
    function getTimestamp(Integerparam0 : Integer) : JTimestamp; cdecl; overload;// (I)Ljava/sql/Timestamp; A: $401
    function getTimestamp(Integerparam0 : Integer; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (ILjava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString) : JTimestamp; cdecl; overload;// (Ljava/lang/String;)Ljava/sql/Timestamp; A: $401
    function getTimestamp(JStringparam0 : JString; JCalendarparam1 : JCalendar) : JTimestamp; cdecl; overload;// (Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp; A: $401
    function getURL(Integerparam0 : Integer) : JURL; cdecl; overload;           // (I)Ljava/net/URL; A: $401
    function getURL(JStringparam0 : JString) : JURL; cdecl; overload;           // (Ljava/lang/String;)Ljava/net/URL; A: $401
    function wasNull : boolean; cdecl;                                          // ()Z A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer; Integerparam2 : Integer) ; cdecl; overload;// (III)V A: $401
    procedure registerOutParameter(Integerparam0 : Integer; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (IILjava/lang/String;)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;II)V A: $401
    procedure registerOutParameter(JStringparam0 : JString; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (Ljava/lang/String;ILjava/lang/String;)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setAsciiStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure setBigDecimal(JStringparam0 : JString; JBigDecimalparam1 : JBigDecimal) ; cdecl;// (Ljava/lang/String;Ljava/math/BigDecimal;)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setBinaryStream(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;I)V A: $401
    procedure setBlob(JStringparam0 : JString; JBlobparam1 : JBlob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Blob;)V A: $401
    procedure setBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;)V A: $401
    procedure setBlob(JStringparam0 : JString; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/InputStream;J)V A: $401
    procedure setBoolean(JStringparam0 : JString; booleanparam1 : boolean) ; cdecl;// (Ljava/lang/String;Z)V A: $401
    procedure setByte(JStringparam0 : JString; Byteparam1 : Byte) ; cdecl;      // (Ljava/lang/String;B)V A: $401
    procedure setBytes(JStringparam0 : JString; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl;// (Ljava/lang/String;[B)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;I)V A: $401
    procedure setClob(JStringparam0 : JString; JClobparam1 : JClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Clob;)V A: $401
    procedure setClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setDate(JStringparam0 : JString; JDateparam1 : JDate) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;)V A: $401
    procedure setDate(JStringparam0 : JString; JDateparam1 : JDate; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Date;Ljava/util/Calendar;)V A: $401
    procedure setDouble(JStringparam0 : JString; Doubleparam1 : Double) ; cdecl;// (Ljava/lang/String;D)V A: $401
    procedure setFloat(JStringparam0 : JString; Singleparam1 : Single) ; cdecl; // (Ljava/lang/String;F)V A: $401
    procedure setInt(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; // (Ljava/lang/String;I)V A: $401
    procedure setLong(JStringparam0 : JString; Int64param1 : Int64) ; cdecl;    // (Ljava/lang/String;J)V A: $401
    procedure setNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setNCharacterStream(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setNClob(JStringparam0 : JString; JNClobparam1 : JNClob) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/NClob;)V A: $401
    procedure setNClob(JStringparam0 : JString; JReaderparam1 : JReader) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;)V A: $401
    procedure setNClob(JStringparam0 : JString; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (Ljava/lang/String;Ljava/io/Reader;J)V A: $401
    procedure setNString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setNull(JStringparam0 : JString; Integerparam1 : Integer) ; cdecl; overload;// (Ljava/lang/String;I)V A: $401
    procedure setNull(JStringparam0 : JString; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (Ljava/lang/String;ILjava/lang/String;)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;I)V A: $401
    procedure setObject(JStringparam0 : JString; JObjectparam1 : JObject; Integerparam2 : Integer; Integerparam3 : Integer) ; cdecl; overload;// (Ljava/lang/String;Ljava/lang/Object;II)V A: $401
    procedure setRowId(JStringparam0 : JString; JRowIdparam1 : JRowId) ; cdecl; // (Ljava/lang/String;Ljava/sql/RowId;)V A: $401
    procedure setSQLXML(JStringparam0 : JString; JSQLXMLparam1 : JSQLXML) ; cdecl;// (Ljava/lang/String;Ljava/sql/SQLXML;)V A: $401
    procedure setShort(JStringparam0 : JString; SmallIntparam1 : SmallInt) ; cdecl;// (Ljava/lang/String;S)V A: $401
    procedure setString(JStringparam0 : JString; JStringparam1 : JString) ; cdecl;// (Ljava/lang/String;Ljava/lang/String;)V A: $401
    procedure setTime(JStringparam0 : JString; JTimeparam1 : JTime) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;)V A: $401
    procedure setTime(JStringparam0 : JString; JTimeparam1 : JTime; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Time;Ljava/util/Calendar;)V A: $401
    procedure setTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;)V A: $401
    procedure setTimestamp(JStringparam0 : JString; JTimestampparam1 : JTimestamp; JCalendarparam2 : JCalendar) ; cdecl; overload;// (Ljava/lang/String;Ljava/sql/Timestamp;Ljava/util/Calendar;)V A: $401
    procedure setURL(JStringparam0 : JString; JURLparam1 : JURL) ; cdecl;       // (Ljava/lang/String;Ljava/net/URL;)V A: $401
  end;

  TJCallableStatement = class(TJavaGenericImport<JCallableStatementClass, JCallableStatement>)
  end;


  // Merged from: .\android-19\java.sql.PreparedStatement.pas
  JPreparedStatementClass = interface(JObjectClass)
    ['{C9D1E3D8-D16B-44E7-89BE-4A98CCDA1BD0}']
    function execute : boolean; cdecl;                                          // ()Z A: $401
    function executeQuery : JResultSet; cdecl;                                  // ()Ljava/sql/ResultSet; A: $401
    function executeUpdate : Integer; cdecl;                                    // ()I A: $401
    function getMetaData : JResultSetMetaData; cdecl;                           // ()Ljava/sql/ResultSetMetaData; A: $401
    function getParameterMetaData : JParameterMetaData; cdecl;                  // ()Ljava/sql/ParameterMetaData; A: $401
    procedure addBatch ; cdecl;                                                 // ()V A: $401
    procedure clearParameters ; cdecl;                                          // ()V A: $401
    procedure setArray(Integerparam0 : Integer; JArrayparam1 : JArray) ; cdecl; // (ILjava/sql/Array;)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure setBigDecimal(Integerparam0 : Integer; JBigDecimalparam1 : JBigDecimal) ; cdecl;// (ILjava/math/BigDecimal;)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure setBlob(Integerparam0 : Integer; JBlobparam1 : JBlob) ; cdecl; overload;// (ILjava/sql/Blob;)V A: $401
    procedure setBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setBoolean(Integerparam0 : Integer; booleanparam1 : boolean) ; cdecl;// (IZ)V A: $401
    procedure setByte(Integerparam0 : Integer; Byteparam1 : Byte) ; cdecl;      // (IB)V A: $401
    procedure setBytes(Integerparam0 : Integer; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl;// (I[B)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/Reader;I)V A: $401
    procedure setClob(Integerparam0 : Integer; JClobparam1 : JClob) ; cdecl; overload;// (ILjava/sql/Clob;)V A: $401
    procedure setClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setDate(Integerparam0 : Integer; JDateparam1 : JDate) ; cdecl; overload;// (ILjava/sql/Date;)V A: $401
    procedure setDate(Integerparam0 : Integer; JDateparam1 : JDate; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Date;Ljava/util/Calendar;)V A: $401
    procedure setDouble(Integerparam0 : Integer; Doubleparam1 : Double) ; cdecl;// (ID)V A: $401
    procedure setFloat(Integerparam0 : Integer; Singleparam1 : Single) ; cdecl; // (IF)V A: $401
    procedure setInt(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; // (II)V A: $401
    procedure setLong(Integerparam0 : Integer; Int64param1 : Int64) ; cdecl;    // (IJ)V A: $401
    procedure setNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setNClob(Integerparam0 : Integer; JNClobparam1 : JNClob) ; cdecl; overload;// (ILjava/sql/NClob;)V A: $401
    procedure setNClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setNClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setNString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl;// (ILjava/lang/String;)V A: $401
    procedure setNull(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure setNull(Integerparam0 : Integer; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (IILjava/lang/String;)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject) ; cdecl; overload;// (ILjava/lang/Object;)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/lang/Object;I)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer; Integerparam3 : Integer) ; cdecl; overload;// (ILjava/lang/Object;II)V A: $401
    procedure setRef(Integerparam0 : Integer; JRefparam1 : JRef) ; cdecl;       // (ILjava/sql/Ref;)V A: $401
    procedure setRowId(Integerparam0 : Integer; JRowIdparam1 : JRowId) ; cdecl; // (ILjava/sql/RowId;)V A: $401
    procedure setSQLXML(Integerparam0 : Integer; JSQLXMLparam1 : JSQLXML) ; cdecl;// (ILjava/sql/SQLXML;)V A: $401
    procedure setShort(Integerparam0 : Integer; SmallIntparam1 : SmallInt) ; cdecl;// (IS)V A: $401
    procedure setString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl;// (ILjava/lang/String;)V A: $401
    procedure setTime(Integerparam0 : Integer; JTimeparam1 : JTime) ; cdecl; overload;// (ILjava/sql/Time;)V A: $401
    procedure setTime(Integerparam0 : Integer; JTimeparam1 : JTime; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Time;Ljava/util/Calendar;)V A: $401
    procedure setTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (ILjava/sql/Timestamp;)V A: $401
    procedure setTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Timestamp;Ljava/util/Calendar;)V A: $401
    procedure setURL(Integerparam0 : Integer; JURLparam1 : JURL) ; cdecl;       // (ILjava/net/URL;)V A: $401
    procedure setUnicodeStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; deprecated; cdecl;// (ILjava/io/InputStream;I)V A: $401
  end;

  [JavaSignature('java/sql/PreparedStatement')]
  JPreparedStatement = interface(JObject)
    ['{243237D5-0615-4B27-A040-DB379377789B}']
    function execute : boolean; cdecl;                                          // ()Z A: $401
    function executeQuery : JResultSet; cdecl;                                  // ()Ljava/sql/ResultSet; A: $401
    function executeUpdate : Integer; cdecl;                                    // ()I A: $401
    function getMetaData : JResultSetMetaData; cdecl;                           // ()Ljava/sql/ResultSetMetaData; A: $401
    function getParameterMetaData : JParameterMetaData; cdecl;                  // ()Ljava/sql/ParameterMetaData; A: $401
    procedure addBatch ; cdecl;                                                 // ()V A: $401
    procedure clearParameters ; cdecl;                                          // ()V A: $401
    procedure setArray(Integerparam0 : Integer; JArrayparam1 : JArray) ; cdecl; // (ILjava/sql/Array;)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setAsciiStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure setBigDecimal(Integerparam0 : Integer; JBigDecimalparam1 : JBigDecimal) ; cdecl;// (ILjava/math/BigDecimal;)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setBinaryStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/InputStream;I)V A: $401
    procedure setBlob(Integerparam0 : Integer; JBlobparam1 : JBlob) ; cdecl; overload;// (ILjava/sql/Blob;)V A: $401
    procedure setBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream) ; cdecl; overload;// (ILjava/io/InputStream;)V A: $401
    procedure setBlob(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/InputStream;J)V A: $401
    procedure setBoolean(Integerparam0 : Integer; booleanparam1 : boolean) ; cdecl;// (IZ)V A: $401
    procedure setByte(Integerparam0 : Integer; Byteparam1 : Byte) ; cdecl;      // (IB)V A: $401
    procedure setBytes(Integerparam0 : Integer; TJavaArrayByteparam1 : TJavaArray<Byte>) ; cdecl;// (I[B)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/io/Reader;I)V A: $401
    procedure setClob(Integerparam0 : Integer; JClobparam1 : JClob) ; cdecl; overload;// (ILjava/sql/Clob;)V A: $401
    procedure setClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setDate(Integerparam0 : Integer; JDateparam1 : JDate) ; cdecl; overload;// (ILjava/sql/Date;)V A: $401
    procedure setDate(Integerparam0 : Integer; JDateparam1 : JDate; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Date;Ljava/util/Calendar;)V A: $401
    procedure setDouble(Integerparam0 : Integer; Doubleparam1 : Double) ; cdecl;// (ID)V A: $401
    procedure setFloat(Integerparam0 : Integer; Singleparam1 : Single) ; cdecl; // (IF)V A: $401
    procedure setInt(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; // (II)V A: $401
    procedure setLong(Integerparam0 : Integer; Int64param1 : Int64) ; cdecl;    // (IJ)V A: $401
    procedure setNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setNCharacterStream(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setNClob(Integerparam0 : Integer; JNClobparam1 : JNClob) ; cdecl; overload;// (ILjava/sql/NClob;)V A: $401
    procedure setNClob(Integerparam0 : Integer; JReaderparam1 : JReader) ; cdecl; overload;// (ILjava/io/Reader;)V A: $401
    procedure setNClob(Integerparam0 : Integer; JReaderparam1 : JReader; Int64param2 : Int64) ; cdecl; overload;// (ILjava/io/Reader;J)V A: $401
    procedure setNString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl;// (ILjava/lang/String;)V A: $401
    procedure setNull(Integerparam0 : Integer; Integerparam1 : Integer) ; cdecl; overload;// (II)V A: $401
    procedure setNull(Integerparam0 : Integer; Integerparam1 : Integer; JStringparam2 : JString) ; cdecl; overload;// (IILjava/lang/String;)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject) ; cdecl; overload;// (ILjava/lang/Object;)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer) ; cdecl; overload;// (ILjava/lang/Object;I)V A: $401
    procedure setObject(Integerparam0 : Integer; JObjectparam1 : JObject; Integerparam2 : Integer; Integerparam3 : Integer) ; cdecl; overload;// (ILjava/lang/Object;II)V A: $401
    procedure setRef(Integerparam0 : Integer; JRefparam1 : JRef) ; cdecl;       // (ILjava/sql/Ref;)V A: $401
    procedure setRowId(Integerparam0 : Integer; JRowIdparam1 : JRowId) ; cdecl; // (ILjava/sql/RowId;)V A: $401
    procedure setSQLXML(Integerparam0 : Integer; JSQLXMLparam1 : JSQLXML) ; cdecl;// (ILjava/sql/SQLXML;)V A: $401
    procedure setShort(Integerparam0 : Integer; SmallIntparam1 : SmallInt) ; cdecl;// (IS)V A: $401
    procedure setString(Integerparam0 : Integer; JStringparam1 : JString) ; cdecl;// (ILjava/lang/String;)V A: $401
    procedure setTime(Integerparam0 : Integer; JTimeparam1 : JTime) ; cdecl; overload;// (ILjava/sql/Time;)V A: $401
    procedure setTime(Integerparam0 : Integer; JTimeparam1 : JTime; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Time;Ljava/util/Calendar;)V A: $401
    procedure setTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp) ; cdecl; overload;// (ILjava/sql/Timestamp;)V A: $401
    procedure setTimestamp(Integerparam0 : Integer; JTimestampparam1 : JTimestamp; JCalendarparam2 : JCalendar) ; cdecl; overload;// (ILjava/sql/Timestamp;Ljava/util/Calendar;)V A: $401
    procedure setURL(Integerparam0 : Integer; JURLparam1 : JURL) ; cdecl;       // (ILjava/net/URL;)V A: $401
    procedure setUnicodeStream(Integerparam0 : Integer; JInputStreamparam1 : JInputStream; Integerparam2 : Integer) ; deprecated; cdecl;// (ILjava/io/InputStream;I)V A: $401
  end;

  TJPreparedStatement = class(TJavaGenericImport<JPreparedStatementClass, JPreparedStatement>)
  end;


const
  TJDatabaseMetaDataattributeNoNulls = 0;
  TJDatabaseMetaDataattributeNullable = 1;
  TJDatabaseMetaDataattributeNullableUnknown = 2;
  TJDatabaseMetaDatabestRowNotPseudo = 1;
  TJDatabaseMetaDatabestRowPseudo = 2;
  TJDatabaseMetaDatabestRowSession = 2;
  TJDatabaseMetaDatabestRowTemporary = 0;
  TJDatabaseMetaDatabestRowTransaction = 1;
  TJDatabaseMetaDatabestRowUnknown = 0;
  TJDatabaseMetaDatacolumnNoNulls = 0;
  TJDatabaseMetaDatacolumnNullable = 1;
  TJDatabaseMetaDatacolumnNullableUnknown = 2;
  TJDatabaseMetaDataimportedKeyCascade = 0;
  TJDatabaseMetaDataimportedKeyInitiallyDeferred = 5;
  TJDatabaseMetaDataimportedKeyInitiallyImmediate = 6;
  TJDatabaseMetaDataimportedKeyNoAction = 3;
  TJDatabaseMetaDataimportedKeyNotDeferrable = 7;
  TJDatabaseMetaDataimportedKeyRestrict = 1;
  TJDatabaseMetaDataimportedKeySetDefault = 4;
  TJDatabaseMetaDataimportedKeySetNull = 2;
  TJDatabaseMetaDataprocedureColumnIn = 1;
  TJDatabaseMetaDataprocedureColumnInOut = 2;
  TJDatabaseMetaDataprocedureColumnOut = 4;
  TJDatabaseMetaDataprocedureColumnResult = 3;
  TJDatabaseMetaDataprocedureColumnReturn = 5;
  TJDatabaseMetaDataprocedureColumnUnknown = 0;
  TJDatabaseMetaDataprocedureNoNulls = 0;
  TJDatabaseMetaDataprocedureNoResult = 1;
  TJDatabaseMetaDataprocedureNullable = 1;
  TJDatabaseMetaDataprocedureNullableUnknown = 2;
  TJDatabaseMetaDataprocedureResultUnknown = 0;
  TJDatabaseMetaDataprocedureReturnsResult = 2;
  TJDatabaseMetaDatasqlStateSQL99 = 2;
  TJDatabaseMetaDatasqlStateXOpen = 1;
  TJDatabaseMetaDatatableIndexClustered = 1;
  TJDatabaseMetaDatatableIndexHashed = 2;
  TJDatabaseMetaDatatableIndexOther = 3;
  TJDatabaseMetaDatatableIndexStatistic = 0;
  TJDatabaseMetaDatatypeNoNulls = 0;
  TJDatabaseMetaDatatypeNullable = 1;
  TJDatabaseMetaDatatypeNullableUnknown = 2;
  TJDatabaseMetaDatatypePredBasic = 2;
  TJDatabaseMetaDatatypePredChar = 1;
  TJDatabaseMetaDatatypePredNone = 0;
  TJDatabaseMetaDatatypeSearchable = 3;
  TJDatabaseMetaDataversionColumnNotPseudo = 1;
  TJDatabaseMetaDataversionColumnPseudo = 2;
  TJDatabaseMetaDataversionColumnUnknown = 0;
  TJDatabaseMetaDatasqlStateSQL = 2;
  TJDatabaseMetaDatafunctionColumnIn = 1;
  TJDatabaseMetaDatafunctionColumnInOut = 2;
  TJDatabaseMetaDatafunctionColumnOut = 3;
  TJDatabaseMetaDatafunctionReturn = 4;
  TJDatabaseMetaDatafunctionColumnUnknown = 0;
  TJDatabaseMetaDatafunctionColumnResult = 5;
  TJDatabaseMetaDatafunctionNoNulls = 0;
  TJDatabaseMetaDatafunctionNullable = 1;
  TJDatabaseMetaDatafunctionNullableUnknown = 2;
  TJDatabaseMetaDatafunctionResultUnknown = 0;
  TJDatabaseMetaDatafunctionNoTable = 1;
  TJDatabaseMetaDatafunctionReturnsTable = 2;

  TJStatementCLOSE_ALL_RESULTS = 3;
  TJStatementCLOSE_CURRENT_RESULT = 1;
  TJStatementEXECUTE_FAILED = -3;
  TJStatementKEEP_CURRENT_RESULT = 2;
  TJStatementNO_GENERATED_KEYS = 2;
  TJStatementRETURN_GENERATED_KEYS = 1;
  TJStatementSUCCESS_NO_INFO = -2;

  TJConnectionTRANSACTION_NONE = 0;
  TJConnectionTRANSACTION_READ_COMMITTED = 2;
  TJConnectionTRANSACTION_READ_UNCOMMITTED = 1;
  TJConnectionTRANSACTION_REPEATABLE_READ = 4;
  TJConnectionTRANSACTION_SERIALIZABLE = 8;

  TJResultSetCLOSE_CURSORS_AT_COMMIT = 2;
  TJResultSetHOLD_CURSORS_OVER_COMMIT = 1;
  TJResultSetCONCUR_READ_ONLY = 1007;
  TJResultSetCONCUR_UPDATABLE = 1008;
  TJResultSetFETCH_FORWARD = 1000;
  TJResultSetFETCH_REVERSE = 1001;
  TJResultSetFETCH_UNKNOWN = 1002;
  TJResultSetTYPE_FORWARD_ONLY = 1003;
  TJResultSetTYPE_SCROLL_INSENSITIVE = 1004;
  TJResultSetTYPE_SCROLL_SENSITIVE = 1005;


implementation

end.
