//
// Generated by JavaToPas v1.5 20171018 - 170622
////////////////////////////////////////////////////////////////////////////////
unit android.icu.lang.UCharacter;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  android.icu.util.VersionInfo,
  android.icu.text.BreakIterator,
  android.icu.util.ULocale,
  android.icu.util.RangeValueIterator,
  android.icu.util.ValueIterator;

type
  JUCharacter = interface;

  JUCharacterClass = interface(JObjectClass)
    ['{524096E9-46FE-4874-A194-62180369130E}']
    function _GetFOLD_CASE_DEFAULT : Integer; cdecl;                            //  A: $19
    function _GetFOLD_CASE_EXCLUDE_SPECIAL_I : Integer; cdecl;                  //  A: $19
    function _GetMAX_CODE_POINT : Integer; cdecl;                               //  A: $19
    function _GetMAX_HIGH_SURROGATE : Char; cdecl;                              //  A: $19
    function _GetMAX_LOW_SURROGATE : Char; cdecl;                               //  A: $19
    function _GetMAX_RADIX : Integer; cdecl;                                    //  A: $19
    function _GetMAX_SURROGATE : Char; cdecl;                                   //  A: $19
    function _GetMAX_VALUE : Integer; cdecl;                                    //  A: $19
    function _GetMIN_CODE_POINT : Integer; cdecl;                               //  A: $19
    function _GetMIN_HIGH_SURROGATE : Char; cdecl;                              //  A: $19
    function _GetMIN_LOW_SURROGATE : Char; cdecl;                               //  A: $19
    function _GetMIN_RADIX : Integer; cdecl;                                    //  A: $19
    function _GetMIN_SUPPLEMENTARY_CODE_POINT : Integer; cdecl;                 //  A: $19
    function _GetMIN_SURROGATE : Char; cdecl;                                   //  A: $19
    function _GetMIN_VALUE : Integer; cdecl;                                    //  A: $19
    function _GetNO_NUMERIC_VALUE : Double; cdecl;                              //  A: $19
    function _GetREPLACEMENT_CHAR : Integer; cdecl;                             //  A: $19
    function _GetSUPPLEMENTARY_MIN_VALUE : Integer; cdecl;                      //  A: $19
    function _GetTITLECASE_NO_BREAK_ADJUSTMENT : Integer; cdecl;                //  A: $19
    function _GetTITLECASE_NO_LOWERCASE : Integer; cdecl;                       //  A: $19
    function charCount(cp : Integer) : Integer; cdecl;                          // (I)I A: $9
    function codePointAt(seq : JCharSequence; &index : Integer) : Integer; cdecl; overload;// (Ljava/lang/CharSequence;I)I A: $19
    function codePointAt(text : TJavaArray<Char>; &index : Integer) : Integer; cdecl; overload;// ([CI)I A: $19
    function codePointAt(text : TJavaArray<Char>; &index : Integer; limit : Integer) : Integer; cdecl; overload;// ([CII)I A: $19
    function codePointBefore(seq : JCharSequence; &index : Integer) : Integer; cdecl; overload;// (Ljava/lang/CharSequence;I)I A: $19
    function codePointBefore(text : TJavaArray<Char>; &index : Integer) : Integer; cdecl; overload;// ([CI)I A: $19
    function codePointBefore(text : TJavaArray<Char>; &index : Integer; limit : Integer) : Integer; cdecl; overload;// ([CII)I A: $19
    function codePointCount(text : JCharSequence; start : Integer; limit : Integer) : Integer; cdecl; overload;// (Ljava/lang/CharSequence;II)I A: $9
    function codePointCount(text : TJavaArray<Char>; start : Integer; limit : Integer) : Integer; cdecl; overload;// ([CII)I A: $9
    function digit(ch : Integer) : Integer; cdecl; overload;                    // (I)I A: $9
    function digit(ch : Integer; radix : Integer) : Integer; cdecl; overload;   // (II)I A: $9
    function foldCase(ch : Integer; defaultmapping : boolean) : Integer; cdecl; overload;// (IZ)I A: $9
    function foldCase(ch : Integer; options : Integer) : Integer; cdecl; overload;// (II)I A: $9
    function foldCase(str : JString; defaultmapping : boolean) : JString; cdecl; overload;// (Ljava/lang/String;Z)Ljava/lang/String; A: $9
    function foldCase(str : JString; options : Integer) : JString; cdecl; overload;// (Ljava/lang/String;I)Ljava/lang/String; A: $19
    function forDigit(digit : Integer; radix : Integer) : Char; cdecl;          // (II)C A: $9
    function getAge(ch : Integer) : JVersionInfo; cdecl;                        // (I)Landroid/icu/util/VersionInfo; A: $9
    function getBidiPairedBracket(c : Integer) : Integer; cdecl;                // (I)I A: $9
    function getCharFromExtendedName(&name : JString) : Integer; cdecl;         // (Ljava/lang/String;)I A: $9
    function getCharFromName(&name : JString) : Integer; cdecl;                 // (Ljava/lang/String;)I A: $9
    function getCharFromNameAlias(&name : JString) : Integer; cdecl;            // (Ljava/lang/String;)I A: $9
    function getCodePoint(char16 : Char) : Integer; cdecl; overload;            // (C)I A: $9
    function getCodePoint(lead : Char; trail : Char) : Integer; cdecl; overload;// (CC)I A: $9
    function getCombiningClass(ch : Integer) : Integer; cdecl;                  // (I)I A: $9
    function getDirection(ch : Integer) : Integer; cdecl;                       // (I)I A: $9
    function getDirectionality(cp : Integer) : Byte; cdecl;                     // (I)B A: $9
    function getExtendedName(ch : Integer) : JString; cdecl;                    // (I)Ljava/lang/String; A: $9
    function getExtendedNameIterator : JValueIterator; cdecl;                   // ()Landroid/icu/util/ValueIterator; A: $9
    function getHanNumericValue(ch : Integer) : Integer; cdecl;                 // (I)I A: $9
    function getIntPropertyMaxValue(&type : Integer) : Integer; cdecl;          // (I)I A: $9
    function getIntPropertyMinValue(&type : Integer) : Integer; cdecl;          // (I)I A: $9
    function getIntPropertyValue(ch : Integer; &type : Integer) : Integer; cdecl;// (II)I A: $9
    function getMirror(ch : Integer) : Integer; cdecl;                          // (I)I A: $9
    function getName(ch : Integer) : JString; cdecl; overload;                  // (I)Ljava/lang/String; A: $9
    function getName(s : JString; separator : JString) : JString; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; A: $9
    function getNameAlias(ch : Integer) : JString; cdecl;                       // (I)Ljava/lang/String; A: $9
    function getNameIterator : JValueIterator; cdecl;                           // ()Landroid/icu/util/ValueIterator; A: $9
    function getNumericValue(ch : Integer) : Integer; cdecl;                    // (I)I A: $9
    function getPropertyEnum(propertyAlias : JCharSequence) : Integer; cdecl;   // (Ljava/lang/CharSequence;)I A: $9
    function getPropertyName(&property : Integer; nameChoice : Integer) : JString; cdecl;// (II)Ljava/lang/String; A: $9
    function getPropertyValueEnum(&property : Integer; valueAlias : JCharSequence) : Integer; cdecl;// (ILjava/lang/CharSequence;)I A: $9
    function getPropertyValueName(&property : Integer; value : Integer; nameChoice : Integer) : JString; cdecl;// (III)Ljava/lang/String; A: $9
    function getType(ch : Integer) : Integer; cdecl;                            // (I)I A: $9
    function getTypeIterator : JRangeValueIterator; cdecl;                      // ()Landroid/icu/util/RangeValueIterator; A: $9
    function getUnicodeNumericValue(ch : Integer) : Double; cdecl;              // (I)D A: $9
    function getUnicodeVersion : JVersionInfo; cdecl;                           // ()Landroid/icu/util/VersionInfo; A: $9
    function hasBinaryProperty(ch : Integer; &property : Integer) : boolean; cdecl;// (II)Z A: $9
    function isBMP(ch : Integer) : boolean; cdecl;                              // (I)Z A: $9
    function isBaseForm(ch : Integer) : boolean; cdecl;                         // (I)Z A: $9
    function isDefined(ch : Integer) : boolean; cdecl;                          // (I)Z A: $9
    function isDigit(ch : Integer) : boolean; cdecl;                            // (I)Z A: $9
    function isHighSurrogate(ch : Char) : boolean; cdecl;                       // (C)Z A: $9
    function isISOControl(ch : Integer) : boolean; cdecl;                       // (I)Z A: $9
    function isIdentifierIgnorable(ch : Integer) : boolean; cdecl;              // (I)Z A: $9
    function isJavaIdentifierPart(cp : Integer) : boolean; cdecl;               // (I)Z A: $9
    function isJavaIdentifierStart(cp : Integer) : boolean; cdecl;              // (I)Z A: $9
    function isLegal(ch : Integer) : boolean; cdecl; overload;                  // (I)Z A: $9
    function isLegal(str : JString) : boolean; cdecl; overload;                 // (Ljava/lang/String;)Z A: $9
    function isLetter(ch : Integer) : boolean; cdecl;                           // (I)Z A: $9
    function isLetterOrDigit(ch : Integer) : boolean; cdecl;                    // (I)Z A: $9
    function isLowSurrogate(ch : Char) : boolean; cdecl;                        // (C)Z A: $9
    function isLowerCase(ch : Integer) : boolean; cdecl;                        // (I)Z A: $9
    function isMirrored(ch : Integer) : boolean; cdecl;                         // (I)Z A: $9
    function isPrintable(ch : Integer) : boolean; cdecl;                        // (I)Z A: $9
    function isSpaceChar(ch : Integer) : boolean; cdecl;                        // (I)Z A: $9
    function isSupplementary(ch : Integer) : boolean; cdecl;                    // (I)Z A: $9
    function isSupplementaryCodePoint(cp : Integer) : boolean; cdecl;           // (I)Z A: $19
    function isSurrogatePair(high : Char; low : Char) : boolean; cdecl;         // (CC)Z A: $19
    function isTitleCase(ch : Integer) : boolean; cdecl;                        // (I)Z A: $9
    function isUAlphabetic(ch : Integer) : boolean; cdecl;                      // (I)Z A: $9
    function isULowercase(ch : Integer) : boolean; cdecl;                       // (I)Z A: $9
    function isUUppercase(ch : Integer) : boolean; cdecl;                       // (I)Z A: $9
    function isUWhiteSpace(ch : Integer) : boolean; cdecl;                      // (I)Z A: $9
    function isUnicodeIdentifierPart(ch : Integer) : boolean; cdecl;            // (I)Z A: $9
    function isUnicodeIdentifierStart(ch : Integer) : boolean; cdecl;           // (I)Z A: $9
    function isUpperCase(ch : Integer) : boolean; cdecl;                        // (I)Z A: $9
    function isValidCodePoint(cp : Integer) : boolean; cdecl;                   // (I)Z A: $19
    function isWhitespace(ch : Integer) : boolean; cdecl;                       // (I)Z A: $9
    function offsetByCodePoints(text : JCharSequence; &index : Integer; codePointOffset : Integer) : Integer; cdecl; overload;// (Ljava/lang/CharSequence;II)I A: $9
    function offsetByCodePoints(text : TJavaArray<Char>; start : Integer; count : Integer; &index : Integer; codePointOffset : Integer) : Integer; cdecl; overload;// ([CIIII)I A: $9
    function toChars(cp : Integer) : TJavaArray<Char>; cdecl; overload;         // (I)[C A: $19
    function toChars(cp : Integer; dst : TJavaArray<Char>; dstIndex : Integer) : Integer; cdecl; overload;// (I[CI)I A: $19
    function toCodePoint(high : Char; low : Char) : Integer; cdecl;             // (CC)I A: $19
    function toLowerCase(ch : Integer) : Integer; cdecl; overload;              // (I)I A: $9
    function toLowerCase(locale : JLocale; str : JString) : JString; cdecl; overload;// (Ljava/util/Locale;Ljava/lang/String;)Ljava/lang/String; A: $9
    function toLowerCase(locale : JULocale; str : JString) : JString; cdecl; overload;// (Landroid/icu/util/ULocale;Ljava/lang/String;)Ljava/lang/String; A: $9
    function toLowerCase(str : JString) : JString; cdecl; overload;             // (Ljava/lang/String;)Ljava/lang/String; A: $9
    function toString(ch : Integer) : JString; cdecl;                           // (I)Ljava/lang/String; A: $9
    function toTitleCase(ch : Integer) : Integer; cdecl; overload;              // (I)I A: $9
    function toTitleCase(locale : JLocale; str : JString; breakiter : JBreakIterator) : JString; cdecl; overload;// (Ljava/util/Locale;Ljava/lang/String;Landroid/icu/text/BreakIterator;)Ljava/lang/String; A: $9
    function toTitleCase(locale : JLocale; str : JString; titleIter : JBreakIterator; options : Integer) : JString; cdecl; overload;// (Ljava/util/Locale;Ljava/lang/String;Landroid/icu/text/BreakIterator;I)Ljava/lang/String; A: $9
    function toTitleCase(locale : JULocale; str : JString; titleIter : JBreakIterator) : JString; cdecl; overload;// (Landroid/icu/util/ULocale;Ljava/lang/String;Landroid/icu/text/BreakIterator;)Ljava/lang/String; A: $9
    function toTitleCase(locale : JULocale; str : JString; titleIter : JBreakIterator; options : Integer) : JString; cdecl; overload;// (Landroid/icu/util/ULocale;Ljava/lang/String;Landroid/icu/text/BreakIterator;I)Ljava/lang/String; A: $9
    function toTitleCase(str : JString; breakiter : JBreakIterator) : JString; cdecl; overload;// (Ljava/lang/String;Landroid/icu/text/BreakIterator;)Ljava/lang/String; A: $9
    function toUpperCase(ch : Integer) : Integer; cdecl; overload;              // (I)I A: $9
    function toUpperCase(locale : JLocale; str : JString) : JString; cdecl; overload;// (Ljava/util/Locale;Ljava/lang/String;)Ljava/lang/String; A: $9
    function toUpperCase(locale : JULocale; str : JString) : JString; cdecl; overload;// (Landroid/icu/util/ULocale;Ljava/lang/String;)Ljava/lang/String; A: $9
    function toUpperCase(str : JString) : JString; cdecl; overload;             // (Ljava/lang/String;)Ljava/lang/String; A: $9
    property FOLD_CASE_DEFAULT : Integer read _GetFOLD_CASE_DEFAULT;            // I A: $19
    property FOLD_CASE_EXCLUDE_SPECIAL_I : Integer read _GetFOLD_CASE_EXCLUDE_SPECIAL_I;// I A: $19
    property MAX_CODE_POINT : Integer read _GetMAX_CODE_POINT;                  // I A: $19
    property MAX_HIGH_SURROGATE : Char read _GetMAX_HIGH_SURROGATE;             // C A: $19
    property MAX_LOW_SURROGATE : Char read _GetMAX_LOW_SURROGATE;               // C A: $19
    property MAX_RADIX : Integer read _GetMAX_RADIX;                            // I A: $19
    property MAX_SURROGATE : Char read _GetMAX_SURROGATE;                       // C A: $19
    property MAX_VALUE : Integer read _GetMAX_VALUE;                            // I A: $19
    property MIN_CODE_POINT : Integer read _GetMIN_CODE_POINT;                  // I A: $19
    property MIN_HIGH_SURROGATE : Char read _GetMIN_HIGH_SURROGATE;             // C A: $19
    property MIN_LOW_SURROGATE : Char read _GetMIN_LOW_SURROGATE;               // C A: $19
    property MIN_RADIX : Integer read _GetMIN_RADIX;                            // I A: $19
    property MIN_SUPPLEMENTARY_CODE_POINT : Integer read _GetMIN_SUPPLEMENTARY_CODE_POINT;// I A: $19
    property MIN_SURROGATE : Char read _GetMIN_SURROGATE;                       // C A: $19
    property MIN_VALUE : Integer read _GetMIN_VALUE;                            // I A: $19
    property NO_NUMERIC_VALUE : Double read _GetNO_NUMERIC_VALUE;               // D A: $19
    property REPLACEMENT_CHAR : Integer read _GetREPLACEMENT_CHAR;              // I A: $19
    property SUPPLEMENTARY_MIN_VALUE : Integer read _GetSUPPLEMENTARY_MIN_VALUE;// I A: $19
    property TITLECASE_NO_BREAK_ADJUSTMENT : Integer read _GetTITLECASE_NO_BREAK_ADJUSTMENT;// I A: $19
    property TITLECASE_NO_LOWERCASE : Integer read _GetTITLECASE_NO_LOWERCASE;  // I A: $19
  end;

  [JavaSignature('android/icu/lang/UCharacter$BidiPairedBracketType')]
  JUCharacter = interface(JObject)
    ['{4B9F0A8A-7390-49D4-8328-44083A6603DC}']
  end;

  TJUCharacter = class(TJavaGenericImport<JUCharacterClass, JUCharacter>)
  end;

const
  TJUCharacterFOLD_CASE_DEFAULT = 0;
  TJUCharacterFOLD_CASE_EXCLUDE_SPECIAL_I = 1;
  TJUCharacterMAX_CODE_POINT = 1114111;
  TJUCharacterMAX_HIGH_SURROGATE = 56319;
  TJUCharacterMAX_LOW_SURROGATE = 57343;
  TJUCharacterMAX_RADIX = 36;
  TJUCharacterMAX_SURROGATE = 57343;
  TJUCharacterMAX_VALUE = 1114111;
  TJUCharacterMIN_CODE_POINT = 0;
  TJUCharacterMIN_HIGH_SURROGATE = 55296;
  TJUCharacterMIN_LOW_SURROGATE = 56320;
  TJUCharacterMIN_RADIX = 2;
  TJUCharacterMIN_SUPPLEMENTARY_CODE_POINT = 65536;
  TJUCharacterMIN_SURROGATE = 55296;
  TJUCharacterMIN_VALUE = 0;
  TJUCharacterNO_NUMERIC_VALUE = -123456789;
  TJUCharacterREPLACEMENT_CHAR = 65533;
  TJUCharacterSUPPLEMENTARY_MIN_VALUE = 65536;
  TJUCharacterTITLECASE_NO_BREAK_ADJUSTMENT = 512;
  TJUCharacterTITLECASE_NO_LOWERCASE = 256;

implementation

end.
