//
// Generated by JavaToPas v1.5 20150830 - 103225
////////////////////////////////////////////////////////////////////////////////
unit java.lang.Class;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.lang.reflect.Constructor,
  java.lang.reflect.Method,
  java.lang.reflect.Field,
  java.lang.reflect.Type,
  java.security.ProtectionDomain,
  java.net.URI,
  java.lang.reflect.GenericDeclaration,
  java.lang.Package;

type
  JClass = interface;

  JClassClass = interface(JObjectClass)
    ['{E95C860F-84C9-462B-A79F-393B2B78A116}']
    function asSubclass(c : JClass) : JClass; cdecl;                            // (Ljava/lang/Class;)Ljava/lang/Class; A: $1
    function cast(obj : JObject) : JObject; cdecl;                              // (Ljava/lang/Object;)Ljava/lang/Object; A: $1
    function desiredAssertionStatus : boolean; cdecl;                           // ()Z A: $1
    function forName(className : JString) : JClass; cdecl; overload;            // (Ljava/lang/String;)Ljava/lang/Class; A: $9
    function forName(className : JString; shouldInitialize : boolean; classLoader : JClassLoader) : JClass; cdecl; overload;// (Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; A: $9
    function getAnnotation(annotationType : JClass) : JAnnotation; cdecl;       // (Ljava/lang/Class;)Ljava/lang/annotation/Annotation; A: $1
    function getAnnotations : TJavaArray<JAnnotation>; cdecl;                   // ()[Ljava/lang/annotation/Annotation; A: $1
    function getCanonicalName : JString; cdecl;                                 // ()Ljava/lang/String; A: $1
    function getClassLoader : JClassLoader; cdecl;                              // ()Ljava/lang/ClassLoader; A: $1
    function getClasses : TJavaArray<JClass>; cdecl;                            // ()[Ljava/lang/Class; A: $1
    function getComponentType : JClass; cdecl;                                  // ()Ljava/lang/Class; A: $1
    function getConstructor(parameterTypes : TJavaArray<JClass>) : JConstructor; cdecl;// ([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; A: $81
    function getConstructors : TJavaArray<JConstructor>; cdecl;                 // ()[Ljava/lang/reflect/Constructor; A: $1
    function getDeclaredAnnotations : TJavaArray<JAnnotation>; cdecl;           // ()[Ljava/lang/annotation/Annotation; A: $1
    function getDeclaredClasses : TJavaArray<JClass>; cdecl;                    // ()[Ljava/lang/Class; A: $1
    function getDeclaredConstructor(parameterTypes : TJavaArray<JClass>) : JConstructor; cdecl;// ([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; A: $81
    function getDeclaredConstructors : TJavaArray<JConstructor>; cdecl;         // ()[Ljava/lang/reflect/Constructor; A: $1
    function getDeclaredField(&name : JString) : JField; cdecl;                 // (Ljava/lang/String;)Ljava/lang/reflect/Field; A: $1
    function getDeclaredFields : TJavaArray<JField>; cdecl;                     // ()[Ljava/lang/reflect/Field; A: $1
    function getDeclaredMethod(&name : JString; parameterTypes : TJavaArray<JClass>) : JMethod; cdecl;// (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; A: $81
    function getDeclaredMethods : TJavaArray<JMethod>; cdecl;                   // ()[Ljava/lang/reflect/Method; A: $1
    function getDeclaringClass : JClass; cdecl;                                 // ()Ljava/lang/Class; A: $1
    function getEnclosingClass : JClass; cdecl;                                 // ()Ljava/lang/Class; A: $1
    function getEnclosingConstructor : JConstructor; cdecl;                     // ()Ljava/lang/reflect/Constructor; A: $1
    function getEnclosingMethod : JMethod; cdecl;                               // ()Ljava/lang/reflect/Method; A: $1
    function getEnumConstants : TJavaArray<JObject>; cdecl;                     // ()[Ljava/lang/Object; A: $1
    function getField(&name : JString) : JField; cdecl;                         // (Ljava/lang/String;)Ljava/lang/reflect/Field; A: $1
    function getFields : TJavaArray<JField>; cdecl;                             // ()[Ljava/lang/reflect/Field; A: $1
    function getGenericInterfaces : TJavaArray<JType>; cdecl;                   // ()[Ljava/lang/reflect/Type; A: $1
    function getGenericSuperclass : JType; cdecl;                               // ()Ljava/lang/reflect/Type; A: $1
    function getInterfaces : TJavaArray<JClass>; cdecl;                         // ()[Ljava/lang/Class; A: $1
    function getMethod(&name : JString; parameterTypes : TJavaArray<JClass>) : JMethod; cdecl;// (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; A: $81
    function getMethods : TJavaArray<JMethod>; cdecl;                           // ()[Ljava/lang/reflect/Method; A: $1
    function getModifiers : Integer; cdecl;                                     // ()I A: $1
    function getName : JString; cdecl;                                          // ()Ljava/lang/String; A: $1
    function getPackage : JPackage; cdecl;                                      // ()Ljava/lang/Package; A: $1
    function getProtectionDomain : JProtectionDomain; cdecl;                    // ()Ljava/security/ProtectionDomain; A: $1
    function getResource(resourceName : JString) : JURL; cdecl;                 // (Ljava/lang/String;)Ljava/net/URL; A: $1
    function getResourceAsStream(resourceName : JString) : JInputStream; cdecl; // (Ljava/lang/String;)Ljava/io/InputStream; A: $1
    function getSigners : TJavaArray<JObject>; cdecl;                           // ()[Ljava/lang/Object; A: $1
    function getSimpleName : JString; cdecl;                                    // ()Ljava/lang/String; A: $1
    function getSuperclass : JClass; cdecl;                                     // ()Ljava/lang/Class; A: $1
    function getTypeParameters : TJavaArray<JTypeVariable>; cdecl;              // ()[Ljava/lang/reflect/TypeVariable; A: $21
    function isAnnotation : boolean; cdecl;                                     // ()Z A: $1
    function isAnnotationPresent(annotationType : JClass) : boolean; cdecl;     // (Ljava/lang/Class;)Z A: $1
    function isAnonymousClass : boolean; cdecl;                                 // ()Z A: $1
    function isArray : boolean; cdecl;                                          // ()Z A: $1
    function isAssignableFrom(c : JClass) : boolean; cdecl;                     // (Ljava/lang/Class;)Z A: $1
    function isEnum : boolean; cdecl;                                           // ()Z A: $1
    function isInstance(&object : JObject) : boolean; cdecl;                    // (Ljava/lang/Object;)Z A: $1
    function isInterface : boolean; cdecl;                                      // ()Z A: $1
    function isLocalClass : boolean; cdecl;                                     // ()Z A: $1
    function isMemberClass : boolean; cdecl;                                    // ()Z A: $1
    function isPrimitive : boolean; cdecl;                                      // ()Z A: $1
    function isSynthetic : boolean; cdecl;                                      // ()Z A: $1
    function newInstance : JObject; cdecl;                                      // ()Ljava/lang/Object; A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
  end;

  [JavaSignature('java/lang/Class')]
  JClass = interface(JObject)
    ['{84E6B9E9-B8B0-4873-A257-50FA72C7AA7A}']
    function asSubclass(c : JClass) : JClass; cdecl;                            // (Ljava/lang/Class;)Ljava/lang/Class; A: $1
    function cast(obj : JObject) : JObject; cdecl;                              // (Ljava/lang/Object;)Ljava/lang/Object; A: $1
    function desiredAssertionStatus : boolean; cdecl;                           // ()Z A: $1
    function getAnnotation(annotationType : JClass) : JAnnotation; cdecl;       // (Ljava/lang/Class;)Ljava/lang/annotation/Annotation; A: $1
    function getAnnotations : TJavaArray<JAnnotation>; cdecl;                   // ()[Ljava/lang/annotation/Annotation; A: $1
    function getCanonicalName : JString; cdecl;                                 // ()Ljava/lang/String; A: $1
    function getClassLoader : JClassLoader; cdecl;                              // ()Ljava/lang/ClassLoader; A: $1
    function getClasses : TJavaArray<JClass>; cdecl;                            // ()[Ljava/lang/Class; A: $1
    function getComponentType : JClass; cdecl;                                  // ()Ljava/lang/Class; A: $1
    function getConstructors : TJavaArray<JConstructor>; cdecl;                 // ()[Ljava/lang/reflect/Constructor; A: $1
    function getDeclaredAnnotations : TJavaArray<JAnnotation>; cdecl;           // ()[Ljava/lang/annotation/Annotation; A: $1
    function getDeclaredClasses : TJavaArray<JClass>; cdecl;                    // ()[Ljava/lang/Class; A: $1
    function getDeclaredConstructors : TJavaArray<JConstructor>; cdecl;         // ()[Ljava/lang/reflect/Constructor; A: $1
    function getDeclaredField(&name : JString) : JField; cdecl;                 // (Ljava/lang/String;)Ljava/lang/reflect/Field; A: $1
    function getDeclaredFields : TJavaArray<JField>; cdecl;                     // ()[Ljava/lang/reflect/Field; A: $1
    function getDeclaredMethods : TJavaArray<JMethod>; cdecl;                   // ()[Ljava/lang/reflect/Method; A: $1
    function getDeclaringClass : JClass; cdecl;                                 // ()Ljava/lang/Class; A: $1
    function getEnclosingClass : JClass; cdecl;                                 // ()Ljava/lang/Class; A: $1
    function getEnclosingConstructor : JConstructor; cdecl;                     // ()Ljava/lang/reflect/Constructor; A: $1
    function getEnclosingMethod : JMethod; cdecl;                               // ()Ljava/lang/reflect/Method; A: $1
    function getEnumConstants : TJavaArray<JObject>; cdecl;                     // ()[Ljava/lang/Object; A: $1
    function getField(&name : JString) : JField; cdecl;                         // (Ljava/lang/String;)Ljava/lang/reflect/Field; A: $1
    function getFields : TJavaArray<JField>; cdecl;                             // ()[Ljava/lang/reflect/Field; A: $1
    function getGenericInterfaces : TJavaArray<JType>; cdecl;                   // ()[Ljava/lang/reflect/Type; A: $1
    function getGenericSuperclass : JType; cdecl;                               // ()Ljava/lang/reflect/Type; A: $1
    function getInterfaces : TJavaArray<JClass>; cdecl;                         // ()[Ljava/lang/Class; A: $1
    function getMethods : TJavaArray<JMethod>; cdecl;                           // ()[Ljava/lang/reflect/Method; A: $1
    function getModifiers : Integer; cdecl;                                     // ()I A: $1
    function getName : JString; cdecl;                                          // ()Ljava/lang/String; A: $1
    function getPackage : JPackage; cdecl;                                      // ()Ljava/lang/Package; A: $1
    function getProtectionDomain : JProtectionDomain; cdecl;                    // ()Ljava/security/ProtectionDomain; A: $1
    function getResource(resourceName : JString) : JURL; cdecl;                 // (Ljava/lang/String;)Ljava/net/URL; A: $1
    function getResourceAsStream(resourceName : JString) : JInputStream; cdecl; // (Ljava/lang/String;)Ljava/io/InputStream; A: $1
    function getSigners : TJavaArray<JObject>; cdecl;                           // ()[Ljava/lang/Object; A: $1
    function getSimpleName : JString; cdecl;                                    // ()Ljava/lang/String; A: $1
    function getSuperclass : JClass; cdecl;                                     // ()Ljava/lang/Class; A: $1
    function isAnnotation : boolean; cdecl;                                     // ()Z A: $1
    function isAnnotationPresent(annotationType : JClass) : boolean; cdecl;     // (Ljava/lang/Class;)Z A: $1
    function isAnonymousClass : boolean; cdecl;                                 // ()Z A: $1
    function isArray : boolean; cdecl;                                          // ()Z A: $1
    function isAssignableFrom(c : JClass) : boolean; cdecl;                     // (Ljava/lang/Class;)Z A: $1
    function isEnum : boolean; cdecl;                                           // ()Z A: $1
    function isInstance(&object : JObject) : boolean; cdecl;                    // (Ljava/lang/Object;)Z A: $1
    function isInterface : boolean; cdecl;                                      // ()Z A: $1
    function isLocalClass : boolean; cdecl;                                     // ()Z A: $1
    function isMemberClass : boolean; cdecl;                                    // ()Z A: $1
    function isPrimitive : boolean; cdecl;                                      // ()Z A: $1
    function isSynthetic : boolean; cdecl;                                      // ()Z A: $1
    function newInstance : JObject; cdecl;                                      // ()Ljava/lang/Object; A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
  end;

  TJClass = class(TJavaGenericImport<JClassClass, JClass>)
  end;

implementation

end.
