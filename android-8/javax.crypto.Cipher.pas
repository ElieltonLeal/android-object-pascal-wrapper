//
// Generated by JavaToPas v1.4 20140515 - 180822
////////////////////////////////////////////////////////////////////////////////
unit javax.crypto.Cipher;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  javax.crypto.CipherSpi,
  javax.crypto.ExemptionMechanism;

type
  JCipher = interface;

  JCipherClass = interface(JObjectClass)
    ['{BFE87A2E-E33D-4CAA-8DA8-F106AF2E2A1C}']
    function _GetDECRYPT_MODE : Integer; cdecl;                                 //  A: $19
    function _GetENCRYPT_MODE : Integer; cdecl;                                 //  A: $19
    function _GetPRIVATE_KEY : Integer; cdecl;                                  //  A: $19
    function _GetPUBLIC_KEY : Integer; cdecl;                                   //  A: $19
    function _GetSECRET_KEY : Integer; cdecl;                                   //  A: $19
    function _GetUNWRAP_MODE : Integer; cdecl;                                  //  A: $19
    function _GetWRAP_MODE : Integer; cdecl;                                    //  A: $19
    function doFinal : TJavaArray<Byte>; cdecl; overload;                       // ()[B A: $11
    function doFinal(input : JByteBuffer; output : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I A: $11
    function doFinal(input : TJavaArray<Byte>) : TJavaArray<Byte>; cdecl; overload;// ([B)[B A: $11
    function doFinal(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer) : TJavaArray<Byte>; cdecl; overload;// ([BII)[B A: $11
    function doFinal(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer; output : TJavaArray<Byte>) : Integer; cdecl; overload;// ([BII[B)I A: $11
    function doFinal(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer; output : TJavaArray<Byte>; outputOffset : Integer) : Integer; cdecl; overload;// ([BII[BI)I A: $11
    function doFinal(output : TJavaArray<Byte>; outputOffset : Integer) : Integer; cdecl; overload;// ([BI)I A: $11
    function getAlgorithm : JString; cdecl;                                     // ()Ljava/lang/String; A: $11
    function getBlockSize : Integer; cdecl;                                     // ()I A: $11
    function getExemptionMechanism : JExemptionMechanism; cdecl;                // ()Ljavax/crypto/ExemptionMechanism; A: $11
    function getIV : TJavaArray<Byte>; cdecl;                                   // ()[B A: $11
    function getInstance(transformation : JString) : JCipher; cdecl; overload;  // (Ljava/lang/String;)Ljavax/crypto/Cipher; A: $19
    function getInstance(transformation : JString; provider : JProvider) : JCipher; cdecl; overload;// (Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/Cipher; A: $19
    function getInstance(transformation : JString; provider : JString) : JCipher; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/Cipher; A: $19
    function getMaxAllowedKeyLength(transformation : JString) : Integer; cdecl; // (Ljava/lang/String;)I A: $19
    function getMaxAllowedParameterSpec(transformation : JString) : JAlgorithmParameterSpec; cdecl;// (Ljava/lang/String;)Ljava/security/spec/AlgorithmParameterSpec; A: $19
    function getOutputSize(inputLen : Integer) : Integer; cdecl;                // (I)I A: $11
    function getParameters : JAlgorithmParameters; cdecl;                       // ()Ljava/security/AlgorithmParameters; A: $11
    function getProvider : JProvider; cdecl;                                    // ()Ljava/security/Provider; A: $11
    function unwrap(wrappedKey : TJavaArray<Byte>; wrappedKeyAlgorithm : JString; wrappedKeyType : Integer) : JKey; cdecl;// ([BLjava/lang/String;I)Ljava/security/Key; A: $11
    function update(input : JByteBuffer; output : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I A: $11
    function update(input : TJavaArray<Byte>) : TJavaArray<Byte>; cdecl; overload;// ([B)[B A: $11
    function update(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer) : TJavaArray<Byte>; cdecl; overload;// ([BII)[B A: $11
    function update(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer; output : TJavaArray<Byte>) : Integer; cdecl; overload;// ([BII[B)I A: $11
    function update(input : TJavaArray<Byte>; inputOffset : Integer; inputLen : Integer; output : TJavaArray<Byte>; outputOffset : Integer) : Integer; cdecl; overload;// ([BII[BI)I A: $11
    function wrap(key : JKey) : TJavaArray<Byte>; cdecl;                        // (Ljava/security/Key;)[B A: $11
    procedure init(opmode : Integer; certificate : JCertificate) ; cdecl; overload;// (ILjava/security/cert/Certificate;)V A: $11
    procedure init(opmode : Integer; certificate : JCertificate; random : JSecureRandom) ; cdecl; overload;// (ILjava/security/cert/Certificate;Ljava/security/SecureRandom;)V A: $11
    procedure init(opmode : Integer; key : JKey) ; cdecl; overload;             // (ILjava/security/Key;)V A: $11
    procedure init(opmode : Integer; key : JKey; params : JAlgorithmParameterSpec) ; cdecl; overload;// (ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V A: $11
    procedure init(opmode : Integer; key : JKey; params : JAlgorithmParameterSpec; random : JSecureRandom) ; cdecl; overload;// (ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V A: $11
    procedure init(opmode : Integer; key : JKey; params : JAlgorithmParameters) ; cdecl; overload;// (ILjava/security/Key;Ljava/security/AlgorithmParameters;)V A: $11
    procedure init(opmode : Integer; key : JKey; params : JAlgorithmParameters; random : JSecureRandom) ; cdecl; overload;// (ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V A: $11
    procedure init(opmode : Integer; key : JKey; random : JSecureRandom) ; cdecl; overload;// (ILjava/security/Key;Ljava/security/SecureRandom;)V A: $11
    property DECRYPT_MODE : Integer read _GetDECRYPT_MODE;                      // I A: $19
    property ENCRYPT_MODE : Integer read _GetENCRYPT_MODE;                      // I A: $19
    property PRIVATE_KEY : Integer read _GetPRIVATE_KEY;                        // I A: $19
    property PUBLIC_KEY : Integer read _GetPUBLIC_KEY;                          // I A: $19
    property SECRET_KEY : Integer read _GetSECRET_KEY;                          // I A: $19
    property UNWRAP_MODE : Integer read _GetUNWRAP_MODE;                        // I A: $19
    property WRAP_MODE : Integer read _GetWRAP_MODE;                            // I A: $19
  end;

  [JavaSignature('javax/crypto/Cipher')]
  JCipher = interface(JObject)
    ['{8CBBA3C4-9B17-432B-8243-32CC2E0E0CD4}']
  end;

  TJCipher = class(TJavaGenericImport<JCipherClass, JCipher>)
  end;

const
  TJCipherDECRYPT_MODE = 2;
  TJCipherENCRYPT_MODE = 1;
  TJCipherPRIVATE_KEY = 2;
  TJCipherPUBLIC_KEY = 1;
  TJCipherSECRET_KEY = 3;
  TJCipherUNWRAP_MODE = 4;
  TJCipherWRAP_MODE = 3;

implementation

end.
