//
// Generated by JavaToPas v1.5 20180804 - 083241
////////////////////////////////////////////////////////////////////////////////
unit java.net.DatagramSocket;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.net.DatagramSocketImpl,
  java.net.SocketAddress,
  java.net.InetAddress,
  java.net.DatagramPacket,
  java.net.DatagramSocketImplFactory,
  java.net.ProtocolFamily,
  java.net.SocketOption,
  java.nio.ByteBuffer,
  java.nio.channels.spi.AbstractSelectionKey,
  java.nio.channels.Pipe,
  java.nio.channels.Channel,
  java.net.SocketImplFactory,
  java.net.Proxy,
  java.net.SocketImpl;

type
  JSelector = interface; // merged
  JSocketChannel = interface; // merged
  JSocket = interface; // merged
  JServerSocketChannel = interface; // merged
  JServerSocket = interface; // merged
  JAbstractSelectableChannel = interface; // merged
  JSelectionKey = interface; // merged
  JSelectableChannel = interface; // merged
  JSelectorProvider = interface; // merged
  JAbstractSelector = interface; // merged
  JDatagramChannel = interface; // merged
  JDatagramSocket = interface;

  JDatagramSocketClass = interface(JObjectClass)
    ['{02A2194C-7CDA-403D-97C4-DC0345B46D00}']
    function getBroadcast : boolean; cdecl;                                     // ()Z A: $21
    function getChannel : JDatagramChannel; cdecl;                              // ()Ljava/nio/channels/DatagramChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getLocalAddress : JInetAddress; cdecl;                             // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getPort : Integer; cdecl;                                          // ()I A: $1
    function getReceiveBufferSize : Integer; cdecl;                             // ()I A: $21
    function getRemoteSocketAddress : JSocketAddress; cdecl;                    // ()Ljava/net/SocketAddress; A: $1
    function getReuseAddress : boolean; cdecl;                                  // ()Z A: $21
    function getSendBufferSize : Integer; cdecl;                                // ()I A: $21
    function getSoTimeout : Integer; cdecl;                                     // ()I A: $21
    function getTrafficClass : Integer; cdecl;                                  // ()I A: $21
    function init : JDatagramSocket; cdecl; overload;                           // ()V A: $1
    function init(bindaddr : JSocketAddress) : JDatagramSocket; cdecl; overload;// (Ljava/net/SocketAddress;)V A: $1
    function init(port : Integer) : JDatagramSocket; cdecl; overload;           // (I)V A: $1
    function init(port : Integer; laddr : JInetAddress) : JDatagramSocket; cdecl; overload;// (ILjava/net/InetAddress;)V A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function isConnected : boolean; cdecl;                                      // ()Z A: $1
    procedure bind(addr : JSocketAddress) ; cdecl;                              // (Ljava/net/SocketAddress;)V A: $21
    procedure close ; cdecl;                                                    // ()V A: $1
    procedure connect(addr : JSocketAddress) ; cdecl; overload;                 // (Ljava/net/SocketAddress;)V A: $1
    procedure connect(address : JInetAddress; port : Integer) ; cdecl; overload;// (Ljava/net/InetAddress;I)V A: $1
    procedure disconnect ; cdecl;                                               // ()V A: $1
    procedure receive(p : JDatagramPacket) ; cdecl;                             // (Ljava/net/DatagramPacket;)V A: $21
    procedure send(p : JDatagramPacket) ; cdecl;                                // (Ljava/net/DatagramPacket;)V A: $1
    procedure setBroadcast(on : boolean) ; cdecl;                               // (Z)V A: $21
    procedure setDatagramSocketImplFactory(fac : JDatagramSocketImplFactory) ; cdecl;// (Ljava/net/DatagramSocketImplFactory;)V A: $29
    procedure setReceiveBufferSize(size : Integer) ; cdecl;                     // (I)V A: $21
    procedure setReuseAddress(on : boolean) ; cdecl;                            // (Z)V A: $21
    procedure setSendBufferSize(size : Integer) ; cdecl;                        // (I)V A: $21
    procedure setSoTimeout(timeout : Integer) ; cdecl;                          // (I)V A: $21
    procedure setTrafficClass(tc : Integer) ; cdecl;                            // (I)V A: $21
  end;

  [JavaSignature('java/net/DatagramSocket')]
  JDatagramSocket = interface(JObject)
    ['{09AC3C65-E0A0-4327-A481-AA0BD3F0DC8F}']
    function getChannel : JDatagramChannel; cdecl;                              // ()Ljava/nio/channels/DatagramChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getLocalAddress : JInetAddress; cdecl;                             // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getPort : Integer; cdecl;                                          // ()I A: $1
    function getRemoteSocketAddress : JSocketAddress; cdecl;                    // ()Ljava/net/SocketAddress; A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function isConnected : boolean; cdecl;                                      // ()Z A: $1
    procedure close ; cdecl;                                                    // ()V A: $1
    procedure connect(addr : JSocketAddress) ; cdecl; overload;                 // (Ljava/net/SocketAddress;)V A: $1
    procedure connect(address : JInetAddress; port : Integer) ; cdecl; overload;// (Ljava/net/InetAddress;I)V A: $1
    procedure disconnect ; cdecl;                                               // ()V A: $1
    procedure send(p : JDatagramPacket) ; cdecl;                                // (Ljava/net/DatagramPacket;)V A: $1
  end;

  TJDatagramSocket = class(TJavaGenericImport<JDatagramSocketClass, JDatagramSocket>)
  end;

  // Merged from: .\java.nio.channels.DatagramChannel.pas
  JDatagramChannelClass = interface(JObjectClass)
    ['{5839655A-44BF-42E2-8601-2B0CAC447938}']
    function &read(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload; // (Ljava/nio/ByteBuffer;)I A: $401
    function &read(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &read(dsts : TJavaArray<JByteBuffer>) : Int64; cdecl; overload;    // ([Ljava/nio/ByteBuffer;)J A: $11
    function &write(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;)I A: $401
    function &write(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &write(srcs : TJavaArray<JByteBuffer>) : Int64; cdecl; overload;   // ([Ljava/nio/ByteBuffer;)J A: $11
    function bind(JSocketAddressparam0 : JSocketAddress) : JDatagramChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel; A: $401
    function connect(JSocketAddressparam0 : JSocketAddress) : JDatagramChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel; A: $401
    function disconnect : JDatagramChannel; cdecl;                              // ()Ljava/nio/channels/DatagramChannel; A: $401
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function getRemoteAddress : JSocketAddress; cdecl;                          // ()Ljava/net/SocketAddress; A: $401
    function isConnected : boolean; cdecl;                                      // ()Z A: $401
    function open : JDatagramChannel; cdecl; overload;                          // ()Ljava/nio/channels/DatagramChannel; A: $9
    function open(family : JProtocolFamily) : JDatagramChannel; cdecl; overload;// (Ljava/net/ProtocolFamily;)Ljava/nio/channels/DatagramChannel; A: $9
    function receive(JByteBufferparam0 : JByteBuffer) : JSocketAddress; cdecl;  // (Ljava/nio/ByteBuffer;)Ljava/net/SocketAddress; A: $401
    function send(JByteBufferparam0 : JByteBuffer; JSocketAddressparam1 : JSocketAddress) : Integer; cdecl;// (Ljava/nio/ByteBuffer;Ljava/net/SocketAddress;)I A: $401
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JDatagramChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/DatagramChannel; A: $401
    function socket : JDatagramSocket; cdecl;                                   // ()Ljava/net/DatagramSocket; A: $401
    function validOps : Integer; cdecl;                                         // ()I A: $11
  end;

  [JavaSignature('java/nio/channels/DatagramChannel')]
  JDatagramChannel = interface(JObject)
    ['{8B156EE4-178C-41C6-AAF6-0755B2CD3589}']
    function &read(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload; // (Ljava/nio/ByteBuffer;)I A: $401
    function &read(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &write(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;)I A: $401
    function &write(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function bind(JSocketAddressparam0 : JSocketAddress) : JDatagramChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel; A: $401
    function connect(JSocketAddressparam0 : JSocketAddress) : JDatagramChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel; A: $401
    function disconnect : JDatagramChannel; cdecl;                              // ()Ljava/nio/channels/DatagramChannel; A: $401
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function getRemoteAddress : JSocketAddress; cdecl;                          // ()Ljava/net/SocketAddress; A: $401
    function isConnected : boolean; cdecl;                                      // ()Z A: $401
    function receive(JByteBufferparam0 : JByteBuffer) : JSocketAddress; cdecl;  // (Ljava/nio/ByteBuffer;)Ljava/net/SocketAddress; A: $401
    function send(JByteBufferparam0 : JByteBuffer; JSocketAddressparam1 : JSocketAddress) : Integer; cdecl;// (Ljava/nio/ByteBuffer;Ljava/net/SocketAddress;)I A: $401
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JDatagramChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/DatagramChannel; A: $401
    function socket : JDatagramSocket; cdecl;                                   // ()Ljava/net/DatagramSocket; A: $401
  end;

  TJDatagramChannel = class(TJavaGenericImport<JDatagramChannelClass, JDatagramChannel>)
  end;


  // Merged from: .\java.nio.channels.spi.AbstractSelector.pas
  JAbstractSelectorClass = interface(JObjectClass)
    ['{29B75C12-8723-4244-B5EB-133AC12EBDD5}']
    function isOpen : boolean; cdecl;                                           // ()Z A: $11
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $11
    procedure close ; cdecl;                                                    // ()V A: $11
  end;

  [JavaSignature('java/nio/channels/spi/AbstractSelector')]
  JAbstractSelector = interface(JObject)
    ['{35A12215-F9C1-4376-B8C1-AC24F5C41FF4}']
  end;

  TJAbstractSelector = class(TJavaGenericImport<JAbstractSelectorClass, JAbstractSelector>)
  end;

  // Merged from: .\java.nio.channels.spi.SelectorProvider.pas
  JSelectorProviderClass = interface(JObjectClass)
    ['{D51A3CDF-46EB-4223-8D88-096AE745F7F0}']
    function inheritedChannel : JChannel; cdecl;                                // ()Ljava/nio/channels/Channel; A: $1
    function openDatagramChannel : JDatagramChannel; cdecl; overload;           // ()Ljava/nio/channels/DatagramChannel; A: $401
    function openDatagramChannel(JProtocolFamilyparam0 : JProtocolFamily) : JDatagramChannel; cdecl; overload;// (Ljava/net/ProtocolFamily;)Ljava/nio/channels/DatagramChannel; A: $401
    function openPipe : JPipe; cdecl;                                           // ()Ljava/nio/channels/Pipe; A: $401
    function openSelector : JAbstractSelector; cdecl;                           // ()Ljava/nio/channels/spi/AbstractSelector; A: $401
    function openServerSocketChannel : JServerSocketChannel; cdecl;             // ()Ljava/nio/channels/ServerSocketChannel; A: $401
    function openSocketChannel : JSocketChannel; cdecl;                         // ()Ljava/nio/channels/SocketChannel; A: $401
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $9
  end;

  [JavaSignature('java/nio/channels/spi/SelectorProvider')]
  JSelectorProvider = interface(JObject)
    ['{7BABC00F-7C9C-42D7-9377-518711837FAC}']
    function inheritedChannel : JChannel; cdecl;                                // ()Ljava/nio/channels/Channel; A: $1
    function openDatagramChannel : JDatagramChannel; cdecl; overload;           // ()Ljava/nio/channels/DatagramChannel; A: $401
    function openDatagramChannel(JProtocolFamilyparam0 : JProtocolFamily) : JDatagramChannel; cdecl; overload;// (Ljava/net/ProtocolFamily;)Ljava/nio/channels/DatagramChannel; A: $401
    function openPipe : JPipe; cdecl;                                           // ()Ljava/nio/channels/Pipe; A: $401
    function openSelector : JAbstractSelector; cdecl;                           // ()Ljava/nio/channels/spi/AbstractSelector; A: $401
    function openServerSocketChannel : JServerSocketChannel; cdecl;             // ()Ljava/nio/channels/ServerSocketChannel; A: $401
    function openSocketChannel : JSocketChannel; cdecl;                         // ()Ljava/nio/channels/SocketChannel; A: $401
  end;

  TJSelectorProvider = class(TJavaGenericImport<JSelectorProviderClass, JSelectorProvider>)
  end;



  // Merged from: .\java.nio.channels.SelectableChannel.pas
  JSelectableChannelClass = interface(JObjectClass)
    ['{FE2C92A1-03FA-4688-8FCB-98B15FC4C9A6}']
    function &register(JSelectorparam0 : JSelector; Integerparam1 : Integer; JObjectparam2 : JObject) : JSelectionKey; cdecl; overload;// (Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey; A: $401
    function &register(sel : JSelector; ops : Integer) : JSelectionKey; cdecl; overload;// (Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey; A: $11
    function blockingLock : JObject; cdecl;                                     // ()Ljava/lang/Object; A: $401
    function configureBlocking(booleanparam0 : boolean) : JSelectableChannel; cdecl;// (Z)Ljava/nio/channels/SelectableChannel; A: $401
    function isBlocking : boolean; cdecl;                                       // ()Z A: $401
    function isRegistered : boolean; cdecl;                                     // ()Z A: $401
    function keyFor(JSelectorparam0 : JSelector) : JSelectionKey; cdecl;        // (Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey; A: $401
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $401
    function validOps : Integer; cdecl;                                         // ()I A: $401
  end;

  [JavaSignature('java/nio/channels/SelectableChannel')]
  JSelectableChannel = interface(JObject)
    ['{F434192C-C42C-4D4C-8882-5450546E592F}']
    function &register(JSelectorparam0 : JSelector; Integerparam1 : Integer; JObjectparam2 : JObject) : JSelectionKey; cdecl; overload;// (Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey; A: $401
    function blockingLock : JObject; cdecl;                                     // ()Ljava/lang/Object; A: $401
    function configureBlocking(booleanparam0 : boolean) : JSelectableChannel; cdecl;// (Z)Ljava/nio/channels/SelectableChannel; A: $401
    function isBlocking : boolean; cdecl;                                       // ()Z A: $401
    function isRegistered : boolean; cdecl;                                     // ()Z A: $401
    function keyFor(JSelectorparam0 : JSelector) : JSelectionKey; cdecl;        // (Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey; A: $401
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $401
    function validOps : Integer; cdecl;                                         // ()I A: $401
  end;

  TJSelectableChannel = class(TJavaGenericImport<JSelectableChannelClass, JSelectableChannel>)
  end;

  // Merged from: .\java.nio.channels.SelectionKey.pas
  JSelectionKeyClass = interface(JObjectClass)
    ['{1C7FDDA6-C02E-4AFB-893C-9CE299CA4EE6}']
    function _GetOP_ACCEPT : Integer; cdecl;                                    //  A: $19
    function _GetOP_CONNECT : Integer; cdecl;                                   //  A: $19
    function _GetOP_READ : Integer; cdecl;                                      //  A: $19
    function _GetOP_WRITE : Integer; cdecl;                                     //  A: $19
    function attach(ob : JObject) : JObject; cdecl;                             // (Ljava/lang/Object;)Ljava/lang/Object; A: $11
    function attachment : JObject; cdecl;                                       // ()Ljava/lang/Object; A: $11
    function channel : JSelectableChannel; cdecl;                               // ()Ljava/nio/channels/SelectableChannel; A: $401
    function interestOps : Integer; cdecl; overload;                            // ()I A: $401
    function interestOps(Integerparam0 : Integer) : JSelectionKey; cdecl; overload;// (I)Ljava/nio/channels/SelectionKey; A: $401
    function isAcceptable : boolean; cdecl;                                     // ()Z A: $11
    function isConnectable : boolean; cdecl;                                    // ()Z A: $11
    function isReadable : boolean; cdecl;                                       // ()Z A: $11
    function isValid : boolean; cdecl;                                          // ()Z A: $401
    function isWritable : boolean; cdecl;                                       // ()Z A: $11
    function readyOps : Integer; cdecl;                                         // ()I A: $401
    function selector : JSelector; cdecl;                                       // ()Ljava/nio/channels/Selector; A: $401
    procedure cancel ; cdecl;                                                   // ()V A: $401
    property OP_ACCEPT : Integer read _GetOP_ACCEPT;                            // I A: $19
    property OP_CONNECT : Integer read _GetOP_CONNECT;                          // I A: $19
    property OP_READ : Integer read _GetOP_READ;                                // I A: $19
    property OP_WRITE : Integer read _GetOP_WRITE;                              // I A: $19
  end;

  [JavaSignature('java/nio/channels/SelectionKey')]
  JSelectionKey = interface(JObject)
    ['{31718548-6AAA-44C4-85A6-3A90CDA41C8C}']
    function channel : JSelectableChannel; cdecl;                               // ()Ljava/nio/channels/SelectableChannel; A: $401
    function interestOps : Integer; cdecl; overload;                            // ()I A: $401
    function interestOps(Integerparam0 : Integer) : JSelectionKey; cdecl; overload;// (I)Ljava/nio/channels/SelectionKey; A: $401
    function isValid : boolean; cdecl;                                          // ()Z A: $401
    function readyOps : Integer; cdecl;                                         // ()I A: $401
    function selector : JSelector; cdecl;                                       // ()Ljava/nio/channels/Selector; A: $401
    procedure cancel ; cdecl;                                                   // ()V A: $401
  end;

  TJSelectionKey = class(TJavaGenericImport<JSelectionKeyClass, JSelectionKey>)
  end;

  // Merged from: .\java.nio.channels.spi.AbstractSelectableChannel.pas
  JAbstractSelectableChannelClass = interface(JObjectClass)
    ['{7724407E-7218-4562-94A7-434D0B8ADA3B}']
    function &register(sel : JSelector; ops : Integer; att : JObject) : JSelectionKey; cdecl;// (Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey; A: $11
    function blockingLock : JObject; cdecl;                                     // ()Ljava/lang/Object; A: $11
    function configureBlocking(block : boolean) : JSelectableChannel; cdecl;    // (Z)Ljava/nio/channels/SelectableChannel; A: $11
    function isBlocking : boolean; cdecl;                                       // ()Z A: $11
    function isRegistered : boolean; cdecl;                                     // ()Z A: $11
    function keyFor(sel : JSelector) : JSelectionKey; cdecl;                    // (Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey; A: $11
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $11
  end;

  [JavaSignature('java/nio/channels/spi/AbstractSelectableChannel')]
  JAbstractSelectableChannel = interface(JObject)
    ['{4B2FD69C-F109-4DC2-AB19-D92850FA159D}']
  end;

  TJAbstractSelectableChannel = class(TJavaGenericImport<JAbstractSelectableChannelClass, JAbstractSelectableChannel>)
  end;


  // Merged from: .\java.net.ServerSocket.pas
  JServerSocketClass = interface(JObjectClass)
    ['{B2ED8C15-341D-4C85-811C-6885CE4D62A5}']
    function accept : JSocket; cdecl;                                           // ()Ljava/net/Socket; A: $1
    function getChannel : JServerSocketChannel; cdecl;                          // ()Ljava/nio/channels/ServerSocketChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getReceiveBufferSize : Integer; cdecl;                             // ()I A: $21
    function getReuseAddress : boolean; cdecl;                                  // ()Z A: $1
    function getSoTimeout : Integer; cdecl;                                     // ()I A: $21
    function init : JServerSocket; cdecl; overload;                             // ()V A: $1
    function init(port : Integer) : JServerSocket; cdecl; overload;             // (I)V A: $1
    function init(port : Integer; backlog : Integer) : JServerSocket; cdecl; overload;// (II)V A: $1
    function init(port : Integer; backlog : Integer; bindAddr : JInetAddress) : JServerSocket; cdecl; overload;// (IILjava/net/InetAddress;)V A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure bind(endpoint : JSocketAddress) ; cdecl; overload;                // (Ljava/net/SocketAddress;)V A: $1
    procedure bind(endpoint : JSocketAddress; backlog : Integer) ; cdecl; overload;// (Ljava/net/SocketAddress;I)V A: $1
    procedure close ; cdecl;                                                    // ()V A: $1
    procedure setPerformancePreferences(connectionTime : Integer; latency : Integer; bandwidth : Integer) ; cdecl;// (III)V A: $1
    procedure setReceiveBufferSize(size : Integer) ; cdecl;                     // (I)V A: $21
    procedure setReuseAddress(on : boolean) ; cdecl;                            // (Z)V A: $1
    procedure setSoTimeout(timeout : Integer) ; cdecl;                          // (I)V A: $21
    procedure setSocketFactory(fac : JSocketImplFactory) ; cdecl;               // (Ljava/net/SocketImplFactory;)V A: $29
  end;

  [JavaSignature('java/net/ServerSocket')]
  JServerSocket = interface(JObject)
    ['{39072E90-852B-4AE1-BC92-E942C56F9ABE}']
    function accept : JSocket; cdecl;                                           // ()Ljava/net/Socket; A: $1
    function getChannel : JServerSocketChannel; cdecl;                          // ()Ljava/nio/channels/ServerSocketChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getReuseAddress : boolean; cdecl;                                  // ()Z A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure bind(endpoint : JSocketAddress) ; cdecl; overload;                // (Ljava/net/SocketAddress;)V A: $1
    procedure bind(endpoint : JSocketAddress; backlog : Integer) ; cdecl; overload;// (Ljava/net/SocketAddress;I)V A: $1
    procedure close ; cdecl;                                                    // ()V A: $1
    procedure setPerformancePreferences(connectionTime : Integer; latency : Integer; bandwidth : Integer) ; cdecl;// (III)V A: $1
    procedure setReuseAddress(on : boolean) ; cdecl;                            // (Z)V A: $1
  end;

  TJServerSocket = class(TJavaGenericImport<JServerSocketClass, JServerSocket>)
  end;

  // Merged from: .\java.nio.channels.ServerSocketChannel.pas
  JServerSocketChannelClass = interface(JObjectClass)
    ['{AB78C84F-364D-4B6A-AE21-52951AC281FC}']
    function accept : JSocketChannel; cdecl;                                    // ()Ljava/nio/channels/SocketChannel; A: $401
    function bind(JSocketAddressparam0 : JSocketAddress; Integerparam1 : Integer) : JServerSocketChannel; cdecl; overload;// (Ljava/net/SocketAddress;I)Ljava/nio/channels/ServerSocketChannel; A: $401
    function bind(local : JSocketAddress) : JServerSocketChannel; cdecl; overload;// (Ljava/net/SocketAddress;)Ljava/nio/channels/ServerSocketChannel; A: $11
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function open : JServerSocketChannel; cdecl;                                // ()Ljava/nio/channels/ServerSocketChannel; A: $9
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JServerSocketChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/ServerSocketChannel; A: $401
    function socket : JServerSocket; cdecl;                                     // ()Ljava/net/ServerSocket; A: $401
    function validOps : Integer; cdecl;                                         // ()I A: $11
  end;

  [JavaSignature('java/nio/channels/ServerSocketChannel')]
  JServerSocketChannel = interface(JObject)
    ['{9C156ADE-6F3C-495E-AF9D-77AD2113F75C}']
    function accept : JSocketChannel; cdecl;                                    // ()Ljava/nio/channels/SocketChannel; A: $401
    function bind(JSocketAddressparam0 : JSocketAddress; Integerparam1 : Integer) : JServerSocketChannel; cdecl; overload;// (Ljava/net/SocketAddress;I)Ljava/nio/channels/ServerSocketChannel; A: $401
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JServerSocketChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/ServerSocketChannel; A: $401
    function socket : JServerSocket; cdecl;                                     // ()Ljava/net/ServerSocket; A: $401
  end;

  TJServerSocketChannel = class(TJavaGenericImport<JServerSocketChannelClass, JServerSocketChannel>)
  end;



  // Merged from: .\java.net.Socket.pas
  JSocketClass = interface(JObjectClass)
    ['{F0A0EAEC-C51F-4C6A-A88A-88005736E162}']
    function getChannel : JSocketChannel; cdecl;                                // ()Ljava/nio/channels/SocketChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getInputStream : JInputStream; cdecl;                              // ()Ljava/io/InputStream; A: $1
    function getKeepAlive : boolean; cdecl;                                     // ()Z A: $1
    function getLocalAddress : JInetAddress; cdecl;                             // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getOOBInline : boolean; cdecl;                                     // ()Z A: $1
    function getOutputStream : JOutputStream; cdecl;                            // ()Ljava/io/OutputStream; A: $1
    function getPort : Integer; cdecl;                                          // ()I A: $1
    function getReceiveBufferSize : Integer; cdecl;                             // ()I A: $21
    function getRemoteSocketAddress : JSocketAddress; cdecl;                    // ()Ljava/net/SocketAddress; A: $1
    function getReuseAddress : boolean; cdecl;                                  // ()Z A: $1
    function getSendBufferSize : Integer; cdecl;                                // ()I A: $21
    function getSoLinger : Integer; cdecl;                                      // ()I A: $1
    function getSoTimeout : Integer; cdecl;                                     // ()I A: $21
    function getTcpNoDelay : boolean; cdecl;                                    // ()Z A: $1
    function getTrafficClass : Integer; cdecl;                                  // ()I A: $1
    function init : JSocket; cdecl; overload;                                   // ()V A: $1
    function init(address : JInetAddress; port : Integer) : JSocket; cdecl; overload;// (Ljava/net/InetAddress;I)V A: $1
    function init(address : JInetAddress; port : Integer; localAddr : JInetAddress; localPort : Integer) : JSocket; cdecl; overload;// (Ljava/net/InetAddress;ILjava/net/InetAddress;I)V A: $1
    function init(host : JInetAddress; port : Integer; stream : boolean) : JSocket; deprecated; cdecl; overload;// (Ljava/net/InetAddress;IZ)V A: $1
    function init(host : JString; port : Integer) : JSocket; cdecl; overload;   // (Ljava/lang/String;I)V A: $1
    function init(host : JString; port : Integer; localAddr : JInetAddress; localPort : Integer) : JSocket; cdecl; overload;// (Ljava/lang/String;ILjava/net/InetAddress;I)V A: $1
    function init(host : JString; port : Integer; stream : boolean) : JSocket; deprecated; cdecl; overload;// (Ljava/lang/String;IZ)V A: $1
    function init(proxy : JProxy) : JSocket; cdecl; overload;                   // (Ljava/net/Proxy;)V A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function isConnected : boolean; cdecl;                                      // ()Z A: $1
    function isInputShutdown : boolean; cdecl;                                  // ()Z A: $1
    function isOutputShutdown : boolean; cdecl;                                 // ()Z A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure bind(bindpoint : JSocketAddress) ; cdecl;                         // (Ljava/net/SocketAddress;)V A: $1
    procedure close ; cdecl;                                                    // ()V A: $21
    procedure connect(endpoint : JSocketAddress) ; cdecl; overload;             // (Ljava/net/SocketAddress;)V A: $1
    procedure connect(endpoint : JSocketAddress; timeout : Integer) ; cdecl; overload;// (Ljava/net/SocketAddress;I)V A: $1
    procedure sendUrgentData(data : Integer) ; cdecl;                           // (I)V A: $1
    procedure setKeepAlive(on : boolean) ; cdecl;                               // (Z)V A: $1
    procedure setOOBInline(on : boolean) ; cdecl;                               // (Z)V A: $1
    procedure setPerformancePreferences(connectionTime : Integer; latency : Integer; bandwidth : Integer) ; cdecl;// (III)V A: $1
    procedure setReceiveBufferSize(size : Integer) ; cdecl;                     // (I)V A: $21
    procedure setReuseAddress(on : boolean) ; cdecl;                            // (Z)V A: $1
    procedure setSendBufferSize(size : Integer) ; cdecl;                        // (I)V A: $21
    procedure setSoLinger(on : boolean; linger : Integer) ; cdecl;              // (ZI)V A: $1
    procedure setSoTimeout(timeout : Integer) ; cdecl;                          // (I)V A: $21
    procedure setSocketImplFactory(fac : JSocketImplFactory) ; cdecl;           // (Ljava/net/SocketImplFactory;)V A: $29
    procedure setTcpNoDelay(on : boolean) ; cdecl;                              // (Z)V A: $1
    procedure setTrafficClass(tc : Integer) ; cdecl;                            // (I)V A: $1
    procedure shutdownInput ; cdecl;                                            // ()V A: $1
    procedure shutdownOutput ; cdecl;                                           // ()V A: $1
  end;

  [JavaSignature('java/net/Socket')]
  JSocket = interface(JObject)
    ['{829D412F-E4C5-47CE-BD09-B0334418A97D}']
    function getChannel : JSocketChannel; cdecl;                                // ()Ljava/nio/channels/SocketChannel; A: $1
    function getInetAddress : JInetAddress; cdecl;                              // ()Ljava/net/InetAddress; A: $1
    function getInputStream : JInputStream; cdecl;                              // ()Ljava/io/InputStream; A: $1
    function getKeepAlive : boolean; cdecl;                                     // ()Z A: $1
    function getLocalAddress : JInetAddress; cdecl;                             // ()Ljava/net/InetAddress; A: $1
    function getLocalPort : Integer; cdecl;                                     // ()I A: $1
    function getLocalSocketAddress : JSocketAddress; cdecl;                     // ()Ljava/net/SocketAddress; A: $1
    function getOOBInline : boolean; cdecl;                                     // ()Z A: $1
    function getOutputStream : JOutputStream; cdecl;                            // ()Ljava/io/OutputStream; A: $1
    function getPort : Integer; cdecl;                                          // ()I A: $1
    function getRemoteSocketAddress : JSocketAddress; cdecl;                    // ()Ljava/net/SocketAddress; A: $1
    function getReuseAddress : boolean; cdecl;                                  // ()Z A: $1
    function getSoLinger : Integer; cdecl;                                      // ()I A: $1
    function getTcpNoDelay : boolean; cdecl;                                    // ()Z A: $1
    function getTrafficClass : Integer; cdecl;                                  // ()I A: $1
    function isBound : boolean; cdecl;                                          // ()Z A: $1
    function isClosed : boolean; cdecl;                                         // ()Z A: $1
    function isConnected : boolean; cdecl;                                      // ()Z A: $1
    function isInputShutdown : boolean; cdecl;                                  // ()Z A: $1
    function isOutputShutdown : boolean; cdecl;                                 // ()Z A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure bind(bindpoint : JSocketAddress) ; cdecl;                         // (Ljava/net/SocketAddress;)V A: $1
    procedure connect(endpoint : JSocketAddress) ; cdecl; overload;             // (Ljava/net/SocketAddress;)V A: $1
    procedure connect(endpoint : JSocketAddress; timeout : Integer) ; cdecl; overload;// (Ljava/net/SocketAddress;I)V A: $1
    procedure sendUrgentData(data : Integer) ; cdecl;                           // (I)V A: $1
    procedure setKeepAlive(on : boolean) ; cdecl;                               // (Z)V A: $1
    procedure setOOBInline(on : boolean) ; cdecl;                               // (Z)V A: $1
    procedure setPerformancePreferences(connectionTime : Integer; latency : Integer; bandwidth : Integer) ; cdecl;// (III)V A: $1
    procedure setReuseAddress(on : boolean) ; cdecl;                            // (Z)V A: $1
    procedure setSoLinger(on : boolean; linger : Integer) ; cdecl;              // (ZI)V A: $1
    procedure setTcpNoDelay(on : boolean) ; cdecl;                              // (Z)V A: $1
    procedure setTrafficClass(tc : Integer) ; cdecl;                            // (I)V A: $1
    procedure shutdownInput ; cdecl;                                            // ()V A: $1
    procedure shutdownOutput ; cdecl;                                           // ()V A: $1
  end;

  TJSocket = class(TJavaGenericImport<JSocketClass, JSocket>)
  end;

  // Merged from: .\java.nio.channels.SocketChannel.pas
  JSocketChannelClass = interface(JObjectClass)
    ['{13AA9FCD-2ED7-4914-94DE-D4AB9B1CCF46}']
    function &read(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload; // (Ljava/nio/ByteBuffer;)I A: $401
    function &read(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &read(dsts : TJavaArray<JByteBuffer>) : Int64; cdecl; overload;    // ([Ljava/nio/ByteBuffer;)J A: $11
    function &write(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;)I A: $401
    function &write(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &write(srcs : TJavaArray<JByteBuffer>) : Int64; cdecl; overload;   // ([Ljava/nio/ByteBuffer;)J A: $11
    function bind(JSocketAddressparam0 : JSocketAddress) : JSocketChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel; A: $401
    function connect(JSocketAddressparam0 : JSocketAddress) : boolean; cdecl;   // (Ljava/net/SocketAddress;)Z A: $401
    function finishConnect : boolean; cdecl;                                    // ()Z A: $401
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function getRemoteAddress : JSocketAddress; cdecl;                          // ()Ljava/net/SocketAddress; A: $401
    function isConnected : boolean; cdecl;                                      // ()Z A: $401
    function isConnectionPending : boolean; cdecl;                              // ()Z A: $401
    function open : JSocketChannel; cdecl; overload;                            // ()Ljava/nio/channels/SocketChannel; A: $9
    function open(remote : JSocketAddress) : JSocketChannel; cdecl; overload;   // (Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel; A: $9
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JSocketChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/SocketChannel; A: $401
    function shutdownInput : JSocketChannel; cdecl;                             // ()Ljava/nio/channels/SocketChannel; A: $401
    function shutdownOutput : JSocketChannel; cdecl;                            // ()Ljava/nio/channels/SocketChannel; A: $401
    function socket : JSocket; cdecl;                                           // ()Ljava/net/Socket; A: $401
    function validOps : Integer; cdecl;                                         // ()I A: $11
  end;

  [JavaSignature('java/nio/channels/SocketChannel')]
  JSocketChannel = interface(JObject)
    ['{B4FC772D-0577-4E42-8229-815F31925694}']
    function &read(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload; // (Ljava/nio/ByteBuffer;)I A: $401
    function &read(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function &write(JByteBufferparam0 : JByteBuffer) : Integer; cdecl; overload;// (Ljava/nio/ByteBuffer;)I A: $401
    function &write(TJavaArrayJByteBufferparam0 : TJavaArray<JByteBuffer>; Integerparam1 : Integer; Integerparam2 : Integer) : Int64; cdecl; overload;// ([Ljava/nio/ByteBuffer;II)J A: $401
    function bind(JSocketAddressparam0 : JSocketAddress) : JSocketChannel; cdecl;// (Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel; A: $401
    function connect(JSocketAddressparam0 : JSocketAddress) : boolean; cdecl;   // (Ljava/net/SocketAddress;)Z A: $401
    function finishConnect : boolean; cdecl;                                    // ()Z A: $401
    function getLocalAddress : JSocketAddress; cdecl;                           // ()Ljava/net/SocketAddress; A: $401
    function getRemoteAddress : JSocketAddress; cdecl;                          // ()Ljava/net/SocketAddress; A: $401
    function isConnected : boolean; cdecl;                                      // ()Z A: $401
    function isConnectionPending : boolean; cdecl;                              // ()Z A: $401
    function setOption(JSocketOptionparam0 : JSocketOption; JObjectparam1 : JObject) : JSocketChannel; cdecl;// (Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/SocketChannel; A: $401
    function shutdownInput : JSocketChannel; cdecl;                             // ()Ljava/nio/channels/SocketChannel; A: $401
    function shutdownOutput : JSocketChannel; cdecl;                            // ()Ljava/nio/channels/SocketChannel; A: $401
    function socket : JSocket; cdecl;                                           // ()Ljava/net/Socket; A: $401
  end;

  TJSocketChannel = class(TJavaGenericImport<JSocketChannelClass, JSocketChannel>)
  end;



  // Merged from: .\java.nio.channels.Selector.pas
  JSelectorClass = interface(JObjectClass)
    ['{54C270D4-DBD1-4D86-8708-7A6D9218520A}']
    function isOpen : boolean; cdecl;                                           // ()Z A: $401
    function keys : JSet; cdecl;                                                // ()Ljava/util/Set; A: $401
    function open : JSelector; cdecl;                                           // ()Ljava/nio/channels/Selector; A: $9
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $401
    function select : Integer; cdecl; overload;                                 // ()I A: $401
    function select(Int64param0 : Int64) : Integer; cdecl; overload;            // (J)I A: $401
    function selectNow : Integer; cdecl;                                        // ()I A: $401
    function selectedKeys : JSet; cdecl;                                        // ()Ljava/util/Set; A: $401
    function wakeup : JSelector; cdecl;                                         // ()Ljava/nio/channels/Selector; A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
  end;

  [JavaSignature('java/nio/channels/Selector')]
  JSelector = interface(JObject)
    ['{5FA723EE-DDF1-4CF0-803A-64D820EFA9E9}']
    function isOpen : boolean; cdecl;                                           // ()Z A: $401
    function keys : JSet; cdecl;                                                // ()Ljava/util/Set; A: $401
    function provider : JSelectorProvider; cdecl;                               // ()Ljava/nio/channels/spi/SelectorProvider; A: $401
    function select : Integer; cdecl; overload;                                 // ()I A: $401
    function select(Int64param0 : Int64) : Integer; cdecl; overload;            // (J)I A: $401
    function selectNow : Integer; cdecl;                                        // ()I A: $401
    function selectedKeys : JSet; cdecl;                                        // ()Ljava/util/Set; A: $401
    function wakeup : JSelector; cdecl;                                         // ()Ljava/nio/channels/Selector; A: $401
    procedure close ; cdecl;                                                    // ()V A: $401
  end;

  TJSelector = class(TJavaGenericImport<JSelectorClass, JSelector>)
  end;


const
  TJSelectionKeyOP_ACCEPT = 16;
  TJSelectionKeyOP_CONNECT = 8;
  TJSelectionKeyOP_READ = 1;
  TJSelectionKeyOP_WRITE = 4;



implementation

end.
