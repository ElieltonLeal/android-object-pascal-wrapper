//
// Generated by JavaToPas v1.5 20180804 - 083223
////////////////////////////////////////////////////////////////////////////////
unit android.graphics.drawable.RippleDrawable;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  android.content.res.ColorStateList,
  android.graphics.drawable.Drawable,
  android.graphics.Rect,
  Androidapi.JNI.GraphicsContentViewText,
  org.xmlpull.v1.XmlPullParser,
  Androidapi.JNI.Util,
  android.graphics.Outline,
  android.graphics.Bitmap;

type
  JRippleDrawable = interface;

  JRippleDrawableClass = interface(JObjectClass)
    ['{B954869E-01E7-4981-A3B9-C25D71E08FBF}']
    function _GetRADIUS_AUTO : Integer; cdecl;                                  //  A: $19
    function canApplyTheme : boolean; cdecl;                                    // ()Z A: $1
    function getConstantState : JDrawable_ConstantState; cdecl;                 // ()Landroid/graphics/drawable/Drawable$ConstantState; A: $1
    function getDirtyBounds : JRect; cdecl;                                     // ()Landroid/graphics/Rect; A: $1
    function getOpacity : Integer; cdecl;                                       // ()I A: $1
    function getRadius : Integer; cdecl;                                        // ()I A: $1
    function init(color : JColorStateList; content : JDrawable; mask : JDrawable) : JRippleDrawable; cdecl;// (Landroid/content/res/ColorStateList;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;)V A: $1
    function isStateful : boolean; cdecl;                                       // ()Z A: $1
    function mutate : JDrawable; cdecl;                                         // ()Landroid/graphics/drawable/Drawable; A: $1
    function setDrawableByLayerId(id : Integer; drawable : JDrawable) : boolean; cdecl;// (ILandroid/graphics/drawable/Drawable;)Z A: $1
    function setVisible(visible : boolean; restart : boolean) : boolean; cdecl; // (ZZ)Z A: $1
    procedure applyTheme(t : JResources_Theme) ; cdecl;                         // (Landroid/content/res/Resources$Theme;)V A: $1
    procedure draw(canvas : JCanvas) ; cdecl;                                   // (Landroid/graphics/Canvas;)V A: $1
    procedure getHotspotBounds(outRect : JRect) ; cdecl;                        // (Landroid/graphics/Rect;)V A: $1
    procedure getOutline(outline : JOutline) ; cdecl;                           // (Landroid/graphics/Outline;)V A: $1
    procedure inflate(r : JResources; parser : JXmlPullParser; attrs : JAttributeSet; theme : JResources_Theme) ; cdecl;// (Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)V A: $1
    procedure invalidateSelf ; cdecl;                                           // ()V A: $1
    procedure jumpToCurrentState ; cdecl;                                       // ()V A: $1
    procedure setColor(color : JColorStateList) ; cdecl;                        // (Landroid/content/res/ColorStateList;)V A: $1
    procedure setHotspot(x : Single; y : Single) ; cdecl;                       // (FF)V A: $1
    procedure setHotspotBounds(left : Integer; top : Integer; right : Integer; bottom : Integer) ; cdecl;// (IIII)V A: $1
    procedure setPaddingMode(mode : Integer) ; cdecl;                           // (I)V A: $1
    procedure setRadius(radius : Integer) ; cdecl;                              // (I)V A: $1
    property RADIUS_AUTO : Integer read _GetRADIUS_AUTO;                        // I A: $19
  end;

  [JavaSignature('android/graphics/drawable/RippleDrawable')]
  JRippleDrawable = interface(JObject)
    ['{3A1987B1-E7A9-460D-A644-182AC50AD41F}']
    function canApplyTheme : boolean; cdecl;                                    // ()Z A: $1
    function getConstantState : JDrawable_ConstantState; cdecl;                 // ()Landroid/graphics/drawable/Drawable$ConstantState; A: $1
    function getDirtyBounds : JRect; cdecl;                                     // ()Landroid/graphics/Rect; A: $1
    function getOpacity : Integer; cdecl;                                       // ()I A: $1
    function getRadius : Integer; cdecl;                                        // ()I A: $1
    function isStateful : boolean; cdecl;                                       // ()Z A: $1
    function mutate : JDrawable; cdecl;                                         // ()Landroid/graphics/drawable/Drawable; A: $1
    function setDrawableByLayerId(id : Integer; drawable : JDrawable) : boolean; cdecl;// (ILandroid/graphics/drawable/Drawable;)Z A: $1
    function setVisible(visible : boolean; restart : boolean) : boolean; cdecl; // (ZZ)Z A: $1
    procedure applyTheme(t : JResources_Theme) ; cdecl;                         // (Landroid/content/res/Resources$Theme;)V A: $1
    procedure draw(canvas : JCanvas) ; cdecl;                                   // (Landroid/graphics/Canvas;)V A: $1
    procedure getHotspotBounds(outRect : JRect) ; cdecl;                        // (Landroid/graphics/Rect;)V A: $1
    procedure getOutline(outline : JOutline) ; cdecl;                           // (Landroid/graphics/Outline;)V A: $1
    procedure inflate(r : JResources; parser : JXmlPullParser; attrs : JAttributeSet; theme : JResources_Theme) ; cdecl;// (Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)V A: $1
    procedure invalidateSelf ; cdecl;                                           // ()V A: $1
    procedure jumpToCurrentState ; cdecl;                                       // ()V A: $1
    procedure setColor(color : JColorStateList) ; cdecl;                        // (Landroid/content/res/ColorStateList;)V A: $1
    procedure setHotspot(x : Single; y : Single) ; cdecl;                       // (FF)V A: $1
    procedure setHotspotBounds(left : Integer; top : Integer; right : Integer; bottom : Integer) ; cdecl;// (IIII)V A: $1
    procedure setPaddingMode(mode : Integer) ; cdecl;                           // (I)V A: $1
    procedure setRadius(radius : Integer) ; cdecl;                              // (I)V A: $1
  end;

  TJRippleDrawable = class(TJavaGenericImport<JRippleDrawableClass, JRippleDrawable>)
  end;

const
  TJRippleDrawableRADIUS_AUTO = -1;

implementation

end.
