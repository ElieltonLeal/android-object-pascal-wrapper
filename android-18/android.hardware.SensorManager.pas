//
// Generated by JavaToPas v1.4 20140526 - 133525
////////////////////////////////////////////////////////////////////////////////
unit android.hardware.SensorManager;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  android.hardware.Sensor,
  android.hardware.SensorListener,
  android.hardware.SensorEventListener,
  Androidapi.JNI.os,
  android.hardware.TriggerEventListener;

type
  JSensorManager = interface;

  JSensorManagerClass = interface(JObjectClass)
    ['{35D92178-FE5F-48E6-8729-A39CE1E53B41}']
    function _GetAXIS_MINUS_X : Integer; cdecl;                                 //  A: $19
    function _GetAXIS_MINUS_Y : Integer; cdecl;                                 //  A: $19
    function _GetAXIS_MINUS_Z : Integer; cdecl;                                 //  A: $19
    function _GetAXIS_X : Integer; cdecl;                                       //  A: $19
    function _GetAXIS_Y : Integer; cdecl;                                       //  A: $19
    function _GetAXIS_Z : Integer; cdecl;                                       //  A: $19
    function _GetDATA_X : Integer; cdecl;                                       //  A: $19
    function _GetDATA_Y : Integer; cdecl;                                       //  A: $19
    function _GetDATA_Z : Integer; cdecl;                                       //  A: $19
    function _GetGRAVITY_DEATH_STAR_I : Single; cdecl;                          //  A: $19
    function _GetGRAVITY_EARTH : Single; cdecl;                                 //  A: $19
    function _GetGRAVITY_JUPITER : Single; cdecl;                               //  A: $19
    function _GetGRAVITY_MARS : Single; cdecl;                                  //  A: $19
    function _GetGRAVITY_MERCURY : Single; cdecl;                               //  A: $19
    function _GetGRAVITY_MOON : Single; cdecl;                                  //  A: $19
    function _GetGRAVITY_NEPTUNE : Single; cdecl;                               //  A: $19
    function _GetGRAVITY_PLUTO : Single; cdecl;                                 //  A: $19
    function _GetGRAVITY_SATURN : Single; cdecl;                                //  A: $19
    function _GetGRAVITY_SUN : Single; cdecl;                                   //  A: $19
    function _GetGRAVITY_THE_ISLAND : Single; cdecl;                            //  A: $19
    function _GetGRAVITY_URANUS : Single; cdecl;                                //  A: $19
    function _GetGRAVITY_VENUS : Single; cdecl;                                 //  A: $19
    function _GetLIGHT_CLOUDY : Single; cdecl;                                  //  A: $19
    function _GetLIGHT_FULLMOON : Single; cdecl;                                //  A: $19
    function _GetLIGHT_NO_MOON : Single; cdecl;                                 //  A: $19
    function _GetLIGHT_OVERCAST : Single; cdecl;                                //  A: $19
    function _GetLIGHT_SHADE : Single; cdecl;                                   //  A: $19
    function _GetLIGHT_SUNLIGHT : Single; cdecl;                                //  A: $19
    function _GetLIGHT_SUNLIGHT_MAX : Single; cdecl;                            //  A: $19
    function _GetLIGHT_SUNRISE : Single; cdecl;                                 //  A: $19
    function _GetMAGNETIC_FIELD_EARTH_MAX : Single; cdecl;                      //  A: $19
    function _GetMAGNETIC_FIELD_EARTH_MIN : Single; cdecl;                      //  A: $19
    function _GetPRESSURE_STANDARD_ATMOSPHERE : Single; cdecl;                  //  A: $19
    function _GetRAW_DATA_INDEX : Integer; cdecl;                               //  A: $19
    function _GetRAW_DATA_X : Integer; cdecl;                                   //  A: $19
    function _GetRAW_DATA_Y : Integer; cdecl;                                   //  A: $19
    function _GetRAW_DATA_Z : Integer; cdecl;                                   //  A: $19
    function _GetSENSOR_ACCELEROMETER : Integer; cdecl;                         //  A: $19
    function _GetSENSOR_ALL : Integer; cdecl;                                   //  A: $19
    function _GetSENSOR_DELAY_FASTEST : Integer; cdecl;                         //  A: $19
    function _GetSENSOR_DELAY_GAME : Integer; cdecl;                            //  A: $19
    function _GetSENSOR_DELAY_NORMAL : Integer; cdecl;                          //  A: $19
    function _GetSENSOR_DELAY_UI : Integer; cdecl;                              //  A: $19
    function _GetSENSOR_LIGHT : Integer; cdecl;                                 //  A: $19
    function _GetSENSOR_MAGNETIC_FIELD : Integer; cdecl;                        //  A: $19
    function _GetSENSOR_MAX : Integer; cdecl;                                   //  A: $19
    function _GetSENSOR_MIN : Integer; cdecl;                                   //  A: $19
    function _GetSENSOR_ORIENTATION : Integer; cdecl;                           //  A: $19
    function _GetSENSOR_ORIENTATION_RAW : Integer; cdecl;                       //  A: $19
    function _GetSENSOR_PROXIMITY : Integer; cdecl;                             //  A: $19
    function _GetSENSOR_STATUS_ACCURACY_HIGH : Integer; cdecl;                  //  A: $19
    function _GetSENSOR_STATUS_ACCURACY_LOW : Integer; cdecl;                   //  A: $19
    function _GetSENSOR_STATUS_ACCURACY_MEDIUM : Integer; cdecl;                //  A: $19
    function _GetSENSOR_STATUS_UNRELIABLE : Integer; cdecl;                     //  A: $19
    function _GetSENSOR_TEMPERATURE : Integer; cdecl;                           //  A: $19
    function _GetSENSOR_TRICORDER : Integer; cdecl;                             //  A: $19
    function _GetSTANDARD_GRAVITY : Single; cdecl;                              //  A: $19
    function cancelTriggerSensor(listener : JTriggerEventListener; sensor : JSensor) : boolean; cdecl;// (Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z A: $1
    function getAltitude(p0 : Single; p : Single) : Single; cdecl;              // (FF)F A: $9
    function getDefaultSensor(&type : Integer) : JSensor; cdecl;                // (I)Landroid/hardware/Sensor; A: $1
    function getInclination(I : TJavaArray<Single>) : Single; cdecl;            // ([F)F A: $9
    function getOrientation(R : TJavaArray<Single>; values : TJavaArray<Single>) : TJavaArray<Single>; cdecl;// ([F[F)[F A: $9
    function getRotationMatrix(R : TJavaArray<Single>; I : TJavaArray<Single>; gravity : TJavaArray<Single>; geomagnetic : TJavaArray<Single>) : boolean; cdecl;// ([F[F[F[F)Z A: $9
    function getSensorList(&type : Integer) : JList; cdecl;                     // (I)Ljava/util/List; A: $1
    function getSensors : Integer; deprecated; cdecl;                           // ()I A: $1
    function registerListener(listener : JSensorEventListener; sensor : JSensor; rate : Integer) : boolean; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;I)Z A: $1
    function registerListener(listener : JSensorEventListener; sensor : JSensor; rate : Integer; handler : JHandler) : boolean; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;ILandroid/os/Handler;)Z A: $1
    function registerListener(listener : JSensorListener; sensors : Integer) : boolean; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;I)Z A: $1
    function registerListener(listener : JSensorListener; sensors : Integer; rate : Integer) : boolean; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;II)Z A: $1
    function remapCoordinateSystem(inR : TJavaArray<Single>; X : Integer; Y : Integer; outR : TJavaArray<Single>) : boolean; cdecl;// ([FII[F)Z A: $9
    function requestTriggerSensor(listener : JTriggerEventListener; sensor : JSensor) : boolean; cdecl;// (Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z A: $1
    procedure getAngleChange(angleChange : TJavaArray<Single>; R : TJavaArray<Single>; prevR : TJavaArray<Single>) ; cdecl;// ([F[F[F)V A: $9
    procedure getQuaternionFromVector(Q : TJavaArray<Single>; rv : TJavaArray<Single>) ; cdecl;// ([F[F)V A: $9
    procedure getRotationMatrixFromVector(R : TJavaArray<Single>; rotationVector : TJavaArray<Single>) ; cdecl;// ([F[F)V A: $9
    procedure unregisterListener(listener : JSensorEventListener) ; cdecl; overload;// (Landroid/hardware/SensorEventListener;)V A: $1
    procedure unregisterListener(listener : JSensorEventListener; sensor : JSensor) ; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;)V A: $1
    procedure unregisterListener(listener : JSensorListener) ; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;)V A: $1
    procedure unregisterListener(listener : JSensorListener; sensors : Integer) ; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;I)V A: $1
    property AXIS_MINUS_X : Integer read _GetAXIS_MINUS_X;                      // I A: $19
    property AXIS_MINUS_Y : Integer read _GetAXIS_MINUS_Y;                      // I A: $19
    property AXIS_MINUS_Z : Integer read _GetAXIS_MINUS_Z;                      // I A: $19
    property AXIS_X : Integer read _GetAXIS_X;                                  // I A: $19
    property AXIS_Y : Integer read _GetAXIS_Y;                                  // I A: $19
    property AXIS_Z : Integer read _GetAXIS_Z;                                  // I A: $19
    property DATA_X : Integer read _GetDATA_X;                                  // I A: $19
    property DATA_Y : Integer read _GetDATA_Y;                                  // I A: $19
    property DATA_Z : Integer read _GetDATA_Z;                                  // I A: $19
    property GRAVITY_DEATH_STAR_I : Single read _GetGRAVITY_DEATH_STAR_I;       // F A: $19
    property GRAVITY_EARTH : Single read _GetGRAVITY_EARTH;                     // F A: $19
    property GRAVITY_JUPITER : Single read _GetGRAVITY_JUPITER;                 // F A: $19
    property GRAVITY_MARS : Single read _GetGRAVITY_MARS;                       // F A: $19
    property GRAVITY_MERCURY : Single read _GetGRAVITY_MERCURY;                 // F A: $19
    property GRAVITY_MOON : Single read _GetGRAVITY_MOON;                       // F A: $19
    property GRAVITY_NEPTUNE : Single read _GetGRAVITY_NEPTUNE;                 // F A: $19
    property GRAVITY_PLUTO : Single read _GetGRAVITY_PLUTO;                     // F A: $19
    property GRAVITY_SATURN : Single read _GetGRAVITY_SATURN;                   // F A: $19
    property GRAVITY_SUN : Single read _GetGRAVITY_SUN;                         // F A: $19
    property GRAVITY_THE_ISLAND : Single read _GetGRAVITY_THE_ISLAND;           // F A: $19
    property GRAVITY_URANUS : Single read _GetGRAVITY_URANUS;                   // F A: $19
    property GRAVITY_VENUS : Single read _GetGRAVITY_VENUS;                     // F A: $19
    property LIGHT_CLOUDY : Single read _GetLIGHT_CLOUDY;                       // F A: $19
    property LIGHT_FULLMOON : Single read _GetLIGHT_FULLMOON;                   // F A: $19
    property LIGHT_NO_MOON : Single read _GetLIGHT_NO_MOON;                     // F A: $19
    property LIGHT_OVERCAST : Single read _GetLIGHT_OVERCAST;                   // F A: $19
    property LIGHT_SHADE : Single read _GetLIGHT_SHADE;                         // F A: $19
    property LIGHT_SUNLIGHT : Single read _GetLIGHT_SUNLIGHT;                   // F A: $19
    property LIGHT_SUNLIGHT_MAX : Single read _GetLIGHT_SUNLIGHT_MAX;           // F A: $19
    property LIGHT_SUNRISE : Single read _GetLIGHT_SUNRISE;                     // F A: $19
    property MAGNETIC_FIELD_EARTH_MAX : Single read _GetMAGNETIC_FIELD_EARTH_MAX;// F A: $19
    property MAGNETIC_FIELD_EARTH_MIN : Single read _GetMAGNETIC_FIELD_EARTH_MIN;// F A: $19
    property PRESSURE_STANDARD_ATMOSPHERE : Single read _GetPRESSURE_STANDARD_ATMOSPHERE;// F A: $19
    property RAW_DATA_INDEX : Integer read _GetRAW_DATA_INDEX;                  // I A: $19
    property RAW_DATA_X : Integer read _GetRAW_DATA_X;                          // I A: $19
    property RAW_DATA_Y : Integer read _GetRAW_DATA_Y;                          // I A: $19
    property RAW_DATA_Z : Integer read _GetRAW_DATA_Z;                          // I A: $19
    property SENSOR_ACCELEROMETER : Integer read _GetSENSOR_ACCELEROMETER;      // I A: $19
    property SENSOR_ALL : Integer read _GetSENSOR_ALL;                          // I A: $19
    property SENSOR_DELAY_FASTEST : Integer read _GetSENSOR_DELAY_FASTEST;      // I A: $19
    property SENSOR_DELAY_GAME : Integer read _GetSENSOR_DELAY_GAME;            // I A: $19
    property SENSOR_DELAY_NORMAL : Integer read _GetSENSOR_DELAY_NORMAL;        // I A: $19
    property SENSOR_DELAY_UI : Integer read _GetSENSOR_DELAY_UI;                // I A: $19
    property SENSOR_LIGHT : Integer read _GetSENSOR_LIGHT;                      // I A: $19
    property SENSOR_MAGNETIC_FIELD : Integer read _GetSENSOR_MAGNETIC_FIELD;    // I A: $19
    property SENSOR_MAX : Integer read _GetSENSOR_MAX;                          // I A: $19
    property SENSOR_MIN : Integer read _GetSENSOR_MIN;                          // I A: $19
    property SENSOR_ORIENTATION : Integer read _GetSENSOR_ORIENTATION;          // I A: $19
    property SENSOR_ORIENTATION_RAW : Integer read _GetSENSOR_ORIENTATION_RAW;  // I A: $19
    property SENSOR_PROXIMITY : Integer read _GetSENSOR_PROXIMITY;              // I A: $19
    property SENSOR_STATUS_ACCURACY_HIGH : Integer read _GetSENSOR_STATUS_ACCURACY_HIGH;// I A: $19
    property SENSOR_STATUS_ACCURACY_LOW : Integer read _GetSENSOR_STATUS_ACCURACY_LOW;// I A: $19
    property SENSOR_STATUS_ACCURACY_MEDIUM : Integer read _GetSENSOR_STATUS_ACCURACY_MEDIUM;// I A: $19
    property SENSOR_STATUS_UNRELIABLE : Integer read _GetSENSOR_STATUS_UNRELIABLE;// I A: $19
    property SENSOR_TEMPERATURE : Integer read _GetSENSOR_TEMPERATURE;          // I A: $19
    property SENSOR_TRICORDER : Integer read _GetSENSOR_TRICORDER;              // I A: $19
    property STANDARD_GRAVITY : Single read _GetSTANDARD_GRAVITY;               // F A: $19
  end;

  [JavaSignature('android/hardware/SensorManager')]
  JSensorManager = interface(JObject)
    ['{4EB89C30-E267-4CA4-B431-E4D89E699FAB}']
    function cancelTriggerSensor(listener : JTriggerEventListener; sensor : JSensor) : boolean; cdecl;// (Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z A: $1
    function getDefaultSensor(&type : Integer) : JSensor; cdecl;                // (I)Landroid/hardware/Sensor; A: $1
    function getSensorList(&type : Integer) : JList; cdecl;                     // (I)Ljava/util/List; A: $1
    function getSensors : Integer; deprecated; cdecl;                           // ()I A: $1
    function registerListener(listener : JSensorEventListener; sensor : JSensor; rate : Integer) : boolean; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;I)Z A: $1
    function registerListener(listener : JSensorEventListener; sensor : JSensor; rate : Integer; handler : JHandler) : boolean; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;ILandroid/os/Handler;)Z A: $1
    function registerListener(listener : JSensorListener; sensors : Integer) : boolean; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;I)Z A: $1
    function registerListener(listener : JSensorListener; sensors : Integer; rate : Integer) : boolean; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;II)Z A: $1
    function requestTriggerSensor(listener : JTriggerEventListener; sensor : JSensor) : boolean; cdecl;// (Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z A: $1
    procedure unregisterListener(listener : JSensorEventListener) ; cdecl; overload;// (Landroid/hardware/SensorEventListener;)V A: $1
    procedure unregisterListener(listener : JSensorEventListener; sensor : JSensor) ; cdecl; overload;// (Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;)V A: $1
    procedure unregisterListener(listener : JSensorListener) ; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;)V A: $1
    procedure unregisterListener(listener : JSensorListener; sensors : Integer) ; deprecated; cdecl; overload;// (Landroid/hardware/SensorListener;I)V A: $1
  end;

  TJSensorManager = class(TJavaGenericImport<JSensorManagerClass, JSensorManager>)
  end;

const
  TJSensorManagerSENSOR_ORIENTATION = 1;
  TJSensorManagerSENSOR_ACCELEROMETER = 2;
  TJSensorManagerSENSOR_TEMPERATURE = 4;
  TJSensorManagerSENSOR_MAGNETIC_FIELD = 8;
  TJSensorManagerSENSOR_LIGHT = 16;
  TJSensorManagerSENSOR_PROXIMITY = 32;
  TJSensorManagerSENSOR_TRICORDER = 64;
  TJSensorManagerSENSOR_ORIENTATION_RAW = 128;
  TJSensorManagerSENSOR_ALL = 127;
  TJSensorManagerSENSOR_MIN = 1;
  TJSensorManagerSENSOR_MAX = 64;
  TJSensorManagerDATA_X = 0;
  TJSensorManagerDATA_Y = 1;
  TJSensorManagerDATA_Z = 2;
  TJSensorManagerRAW_DATA_INDEX = 3;
  TJSensorManagerRAW_DATA_X = 3;
  TJSensorManagerRAW_DATA_Y = 4;
  TJSensorManagerRAW_DATA_Z = 5;
  TJSensorManagerSTANDARD_GRAVITY = 9.80665016174316;
  TJSensorManagerGRAVITY_SUN = 275;
  TJSensorManagerGRAVITY_MERCURY = 3.70000004768372;
  TJSensorManagerGRAVITY_VENUS = 8.86999988555908;
  TJSensorManagerGRAVITY_EARTH = 9.80665016174316;
  TJSensorManagerGRAVITY_MOON = 1.60000002384186;
  TJSensorManagerGRAVITY_MARS = 3.71000003814697;
  TJSensorManagerGRAVITY_JUPITER = 23.1200008392334;
  TJSensorManagerGRAVITY_SATURN = 8.96000003814697;
  TJSensorManagerGRAVITY_URANUS = 8.6899995803833;
  TJSensorManagerGRAVITY_NEPTUNE = 11;
  TJSensorManagerGRAVITY_PLUTO = 0.600000023841858;
  TJSensorManagerGRAVITY_DEATH_STAR_I = 3.53036142541896E-7;
  TJSensorManagerGRAVITY_THE_ISLAND = 4.81516218185425;
  TJSensorManagerMAGNETIC_FIELD_EARTH_MAX = 60;
  TJSensorManagerMAGNETIC_FIELD_EARTH_MIN = 30;
  TJSensorManagerPRESSURE_STANDARD_ATMOSPHERE = 1013.25;
  TJSensorManagerLIGHT_SUNLIGHT_MAX = 120000;
  TJSensorManagerLIGHT_SUNLIGHT = 110000;
  TJSensorManagerLIGHT_SHADE = 20000;
  TJSensorManagerLIGHT_OVERCAST = 10000;
  TJSensorManagerLIGHT_SUNRISE = 400;
  TJSensorManagerLIGHT_CLOUDY = 100;
  TJSensorManagerLIGHT_FULLMOON = 0.25;
  TJSensorManagerLIGHT_NO_MOON = 0.00100000004749745;
  TJSensorManagerSENSOR_DELAY_FASTEST = 0;
  TJSensorManagerSENSOR_DELAY_GAME = 1;
  TJSensorManagerSENSOR_DELAY_UI = 2;
  TJSensorManagerSENSOR_DELAY_NORMAL = 3;
  TJSensorManagerSENSOR_STATUS_UNRELIABLE = 0;
  TJSensorManagerSENSOR_STATUS_ACCURACY_LOW = 1;
  TJSensorManagerSENSOR_STATUS_ACCURACY_MEDIUM = 2;
  TJSensorManagerSENSOR_STATUS_ACCURACY_HIGH = 3;
  TJSensorManagerAXIS_X = 1;
  TJSensorManagerAXIS_Y = 2;
  TJSensorManagerAXIS_Z = 3;
  TJSensorManagerAXIS_MINUS_X = 129;
  TJSensorManagerAXIS_MINUS_Y = 130;
  TJSensorManagerAXIS_MINUS_Z = 131;

implementation

end.
