//
// Generated by JavaToPas v1.5 20140918 - 132056
////////////////////////////////////////////////////////////////////////////////
unit android.database.DatabaseErrorHandler;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  android.database.sqlite.SQLiteTransactionListener,
  android.database.sqlite.SQLiteStatement,
  android.content.ContentProvider,
  Androidapi.JNI.os,
  android.content.ContentValues,
  android.database.sqlite.SQLiteQuery;

type
  JSQLiteDatabase_CursorFactory = interface; // merged
  JSQLiteCursorDriver = interface; // merged
  JSQLiteDatabase = interface; // merged
  JDatabaseErrorHandler = interface;

  JDatabaseErrorHandlerClass = interface(JObjectClass)
    ['{FD8AEF91-C02E-41B3-B2E9-C8C6ACEBEB43}']
    procedure onCorruption(JSQLiteDatabaseparam0 : JSQLiteDatabase) ; cdecl;    // (Landroid/database/sqlite/SQLiteDatabase;)V A: $401
  end;

  [JavaSignature('android/database/DatabaseErrorHandler')]
  JDatabaseErrorHandler = interface(JObject)
    ['{70485D4C-0956-4829-AB16-EF62FA58A3F2}']
    procedure onCorruption(JSQLiteDatabaseparam0 : JSQLiteDatabase) ; cdecl;    // (Landroid/database/sqlite/SQLiteDatabase;)V A: $401
  end;

  TJDatabaseErrorHandler = class(TJavaGenericImport<JDatabaseErrorHandlerClass, JDatabaseErrorHandler>)
  end;

  // Merged from: .\android-19\android.database.sqlite.SQLiteDatabase.pas
  JSQLiteDatabaseClass = interface(JObjectClass)
    ['{A0169442-F2A4-4143-8FF4-5CBFACE1F790}']
    function _GetCONFLICT_ABORT : Integer; cdecl;                               //  A: $19
    function _GetCONFLICT_FAIL : Integer; cdecl;                                //  A: $19
    function _GetCONFLICT_IGNORE : Integer; cdecl;                              //  A: $19
    function _GetCONFLICT_NONE : Integer; cdecl;                                //  A: $19
    function _GetCONFLICT_REPLACE : Integer; cdecl;                             //  A: $19
    function _GetCONFLICT_ROLLBACK : Integer; cdecl;                            //  A: $19
    function _GetCREATE_IF_NECESSARY : Integer; cdecl;                          //  A: $19
    function _GetENABLE_WRITE_AHEAD_LOGGING : Integer; cdecl;                   //  A: $19
    function _GetMAX_SQL_CACHE_SIZE : Integer; cdecl;                           //  A: $19
    function _GetNO_LOCALIZED_COLLATORS : Integer; cdecl;                       //  A: $19
    function _GetOPEN_READONLY : Integer; cdecl;                                //  A: $19
    function _GetOPEN_READWRITE : Integer; cdecl;                               //  A: $19
    function _GetSQLITE_MAX_LIKE_PATTERN_LENGTH : Integer; cdecl;               //  A: $19
    function compileStatement(sql : JString) : JSQLiteStatement; cdecl;         // (Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement; A: $1
    function create(factory : JSQLiteDatabase_CursorFactory) : JSQLiteDatabase; cdecl;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function delete(table : JString; whereClause : JString; whereArgs : TJavaArray<JString>) : Integer; cdecl;// (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I A: $1
    function deleteDatabase(&file : JFile) : boolean; cdecl;                    // (Ljava/io/File;)Z A: $9
    function enableWriteAheadLogging : boolean; cdecl;                          // ()Z A: $1
    function findEditTable(tables : JString) : JString; cdecl;                  // (Ljava/lang/String;)Ljava/lang/String; A: $9
    function getAttachedDbs : JList; cdecl;                                     // ()Ljava/util/List; A: $1
    function getMaximumSize : Int64; cdecl;                                     // ()J A: $1
    function getPageSize : Int64; cdecl;                                        // ()J A: $1
    function getPath : JString; cdecl;                                          // ()Ljava/lang/String; A: $11
    function getSyncedTables : JMap; deprecated; cdecl;                         // ()Ljava/util/Map; A: $1
    function getVersion : Integer; cdecl;                                       // ()I A: $1
    function inTransaction : boolean; cdecl;                                    // ()Z A: $1
    function insert(table : JString; nullColumnHack : JString; values : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function insertOrThrow(table : JString; nullColumnHack : JString; values : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function insertWithOnConflict(table : JString; nullColumnHack : JString; initialValues : JContentValues; conflictAlgorithm : Integer) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;I)J A: $1
    function isDatabaseIntegrityOk : boolean; cdecl;                            // ()Z A: $1
    function isDbLockedByCurrentThread : boolean; cdecl;                        // ()Z A: $1
    function isDbLockedByOtherThreads : boolean; deprecated; cdecl;             // ()Z A: $1
    function isOpen : boolean; cdecl;                                           // ()Z A: $1
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $1
    function isWriteAheadLoggingEnabled : boolean; cdecl;                       // ()Z A: $1
    function needUpgrade(newVersion : Integer) : boolean; cdecl;                // (I)Z A: $1
    function openDatabase(path : JString; factory : JSQLiteDatabase_CursorFactory; flags : Integer) : JSQLiteDatabase; cdecl; overload;// (Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function openDatabase(path : JString; factory : JSQLiteDatabase_CursorFactory; flags : Integer; errorHandler : JDatabaseErrorHandler) : JSQLiteDatabase; cdecl; overload;// (Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ILandroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function openOrCreateDatabase(&file : JFile; factory : JSQLiteDatabase_CursorFactory) : JSQLiteDatabase; cdecl; overload;// (Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function openOrCreateDatabase(path : JString; factory : JSQLiteDatabase_CursorFactory) : JSQLiteDatabase; cdecl; overload;// (Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function openOrCreateDatabase(path : JString; factory : JSQLiteDatabase_CursorFactory; errorHandler : JDatabaseErrorHandler) : JSQLiteDatabase; cdecl; overload;// (Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase; A: $9
    function query(distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function query(distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function query(table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function query(table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function queryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function queryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function rawQuery(sql : JString; selectionArgs : TJavaArray<JString>) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function rawQuery(sql : JString; selectionArgs : TJavaArray<JString>; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function rawQueryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; sql : JString; selectionArgs : TJavaArray<JString>; editTable : JString) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function rawQueryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; sql : JString; selectionArgs : TJavaArray<JString>; editTable : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function releaseMemory : Integer; cdecl;                                    // ()I A: $9
    function replace(table : JString; nullColumnHack : JString; initialValues : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function replaceOrThrow(table : JString; nullColumnHack : JString; initialValues : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function setMaximumSize(numBytes : Int64) : Int64; cdecl;                   // (J)J A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    function update(table : JString; values : JContentValues; whereClause : JString; whereArgs : TJavaArray<JString>) : Integer; cdecl;// (Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I A: $1
    function updateWithOnConflict(table : JString; values : JContentValues; whereClause : JString; whereArgs : TJavaArray<JString>; conflictAlgorithm : Integer) : Integer; cdecl;// (Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;I)I A: $1
    function yieldIfContended : boolean; deprecated; cdecl;                     // ()Z A: $1
    function yieldIfContendedSafely : boolean; cdecl; overload;                 // ()Z A: $1
    function yieldIfContendedSafely(sleepAfterYieldDelay : Int64) : boolean; cdecl; overload;// (J)Z A: $1
    procedure beginTransaction ; cdecl;                                         // ()V A: $1
    procedure beginTransactionNonExclusive ; cdecl;                             // ()V A: $1
    procedure beginTransactionWithListener(transactionListener : JSQLiteTransactionListener) ; cdecl;// (Landroid/database/sqlite/SQLiteTransactionListener;)V A: $1
    procedure beginTransactionWithListenerNonExclusive(transactionListener : JSQLiteTransactionListener) ; cdecl;// (Landroid/database/sqlite/SQLiteTransactionListener;)V A: $1
    procedure disableWriteAheadLogging ; cdecl;                                 // ()V A: $1
    procedure endTransaction ; cdecl;                                           // ()V A: $1
    procedure execSQL(sql : JString) ; cdecl; overload;                         // (Ljava/lang/String;)V A: $1
    procedure execSQL(sql : JString; bindArgs : TJavaArray<JObject>) ; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/Object;)V A: $1
    procedure markTableSyncable(table : JString; deletedTable : JString) ; deprecated; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $1
    procedure markTableSyncable(table : JString; foreignKey : JString; updateTable : JString) ; deprecated; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V A: $1
    procedure setForeignKeyConstraintsEnabled(enable : boolean) ; cdecl;        // (Z)V A: $1
    procedure setLocale(locale : JLocale) ; cdecl;                              // (Ljava/util/Locale;)V A: $1
    procedure setLockingEnabled(lockingEnabled : boolean) ; deprecated; cdecl;  // (Z)V A: $1
    procedure setMaxSqlCacheSize(cacheSize : Integer) ; cdecl;                  // (I)V A: $1
    procedure setPageSize(numBytes : Int64) ; cdecl;                            // (J)V A: $1
    procedure setTransactionSuccessful ; cdecl;                                 // ()V A: $1
    procedure setVersion(version : Integer) ; cdecl;                            // (I)V A: $1
    property CONFLICT_ABORT : Integer read _GetCONFLICT_ABORT;                  // I A: $19
    property CONFLICT_FAIL : Integer read _GetCONFLICT_FAIL;                    // I A: $19
    property CONFLICT_IGNORE : Integer read _GetCONFLICT_IGNORE;                // I A: $19
    property CONFLICT_NONE : Integer read _GetCONFLICT_NONE;                    // I A: $19
    property CONFLICT_REPLACE : Integer read _GetCONFLICT_REPLACE;              // I A: $19
    property CONFLICT_ROLLBACK : Integer read _GetCONFLICT_ROLLBACK;            // I A: $19
    property CREATE_IF_NECESSARY : Integer read _GetCREATE_IF_NECESSARY;        // I A: $19
    property ENABLE_WRITE_AHEAD_LOGGING : Integer read _GetENABLE_WRITE_AHEAD_LOGGING;// I A: $19
    property MAX_SQL_CACHE_SIZE : Integer read _GetMAX_SQL_CACHE_SIZE;          // I A: $19
    property NO_LOCALIZED_COLLATORS : Integer read _GetNO_LOCALIZED_COLLATORS;  // I A: $19
    property OPEN_READONLY : Integer read _GetOPEN_READONLY;                    // I A: $19
    property OPEN_READWRITE : Integer read _GetOPEN_READWRITE;                  // I A: $19
    property SQLITE_MAX_LIKE_PATTERN_LENGTH : Integer read _GetSQLITE_MAX_LIKE_PATTERN_LENGTH;// I A: $19
  end;

  [JavaSignature('android/database/sqlite/SQLiteDatabase$CursorFactory')]
  JSQLiteDatabase = interface(JObject)
    ['{8786B051-42DC-4713-AB41-6E63F0A648D6}']
    function compileStatement(sql : JString) : JSQLiteStatement; cdecl;         // (Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement; A: $1
    function delete(table : JString; whereClause : JString; whereArgs : TJavaArray<JString>) : Integer; cdecl;// (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I A: $1
    function enableWriteAheadLogging : boolean; cdecl;                          // ()Z A: $1
    function getAttachedDbs : JList; cdecl;                                     // ()Ljava/util/List; A: $1
    function getMaximumSize : Int64; cdecl;                                     // ()J A: $1
    function getPageSize : Int64; cdecl;                                        // ()J A: $1
    function getSyncedTables : JMap; deprecated; cdecl;                         // ()Ljava/util/Map; A: $1
    function getVersion : Integer; cdecl;                                       // ()I A: $1
    function inTransaction : boolean; cdecl;                                    // ()Z A: $1
    function insert(table : JString; nullColumnHack : JString; values : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function insertOrThrow(table : JString; nullColumnHack : JString; values : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function insertWithOnConflict(table : JString; nullColumnHack : JString; initialValues : JContentValues; conflictAlgorithm : Integer) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;I)J A: $1
    function isDatabaseIntegrityOk : boolean; cdecl;                            // ()Z A: $1
    function isDbLockedByCurrentThread : boolean; cdecl;                        // ()Z A: $1
    function isDbLockedByOtherThreads : boolean; deprecated; cdecl;             // ()Z A: $1
    function isOpen : boolean; cdecl;                                           // ()Z A: $1
    function isReadOnly : boolean; cdecl;                                       // ()Z A: $1
    function isWriteAheadLoggingEnabled : boolean; cdecl;                       // ()Z A: $1
    function needUpgrade(newVersion : Integer) : boolean; cdecl;                // (I)Z A: $1
    function query(distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function query(distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function query(table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function query(table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function queryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function queryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; distinct : boolean; table : JString; columns : TJavaArray<JString>; selection : JString; selectionArgs : TJavaArray<JString>; groupBy : JString; having : JString; orderBy : JString; limit : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function rawQuery(sql : JString; selectionArgs : TJavaArray<JString>) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function rawQuery(sql : JString; selectionArgs : TJavaArray<JString>; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function rawQueryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; sql : JString; selectionArgs : TJavaArray<JString>; editTable : JString) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; A: $1
    function rawQueryWithFactory(cursorFactory : JSQLiteDatabase_CursorFactory; sql : JString; selectionArgs : TJavaArray<JString>; editTable : JString; cancellationSignal : JCancellationSignal) : JCursor; cdecl; overload;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor; A: $1
    function replace(table : JString; nullColumnHack : JString; initialValues : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function replaceOrThrow(table : JString; nullColumnHack : JString; initialValues : JContentValues) : Int64; cdecl;// (Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J A: $1
    function setMaximumSize(numBytes : Int64) : Int64; cdecl;                   // (J)J A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    function update(table : JString; values : JContentValues; whereClause : JString; whereArgs : TJavaArray<JString>) : Integer; cdecl;// (Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I A: $1
    function updateWithOnConflict(table : JString; values : JContentValues; whereClause : JString; whereArgs : TJavaArray<JString>; conflictAlgorithm : Integer) : Integer; cdecl;// (Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;I)I A: $1
    function yieldIfContended : boolean; deprecated; cdecl;                     // ()Z A: $1
    function yieldIfContendedSafely : boolean; cdecl; overload;                 // ()Z A: $1
    function yieldIfContendedSafely(sleepAfterYieldDelay : Int64) : boolean; cdecl; overload;// (J)Z A: $1
    procedure beginTransaction ; cdecl;                                         // ()V A: $1
    procedure beginTransactionNonExclusive ; cdecl;                             // ()V A: $1
    procedure beginTransactionWithListener(transactionListener : JSQLiteTransactionListener) ; cdecl;// (Landroid/database/sqlite/SQLiteTransactionListener;)V A: $1
    procedure beginTransactionWithListenerNonExclusive(transactionListener : JSQLiteTransactionListener) ; cdecl;// (Landroid/database/sqlite/SQLiteTransactionListener;)V A: $1
    procedure disableWriteAheadLogging ; cdecl;                                 // ()V A: $1
    procedure endTransaction ; cdecl;                                           // ()V A: $1
    procedure execSQL(sql : JString) ; cdecl; overload;                         // (Ljava/lang/String;)V A: $1
    procedure execSQL(sql : JString; bindArgs : TJavaArray<JObject>) ; cdecl; overload;// (Ljava/lang/String;[Ljava/lang/Object;)V A: $1
    procedure markTableSyncable(table : JString; deletedTable : JString) ; deprecated; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;)V A: $1
    procedure markTableSyncable(table : JString; foreignKey : JString; updateTable : JString) ; deprecated; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V A: $1
    procedure setForeignKeyConstraintsEnabled(enable : boolean) ; cdecl;        // (Z)V A: $1
    procedure setLocale(locale : JLocale) ; cdecl;                              // (Ljava/util/Locale;)V A: $1
    procedure setLockingEnabled(lockingEnabled : boolean) ; deprecated; cdecl;  // (Z)V A: $1
    procedure setMaxSqlCacheSize(cacheSize : Integer) ; cdecl;                  // (I)V A: $1
    procedure setPageSize(numBytes : Int64) ; cdecl;                            // (J)V A: $1
    procedure setTransactionSuccessful ; cdecl;                                 // ()V A: $1
    procedure setVersion(version : Integer) ; cdecl;                            // (I)V A: $1
  end;

  TJSQLiteDatabase = class(TJavaGenericImport<JSQLiteDatabaseClass, JSQLiteDatabase>)
  end;

  // Merged from: .\android-19\android.database.sqlite.SQLiteCursorDriver.pas
  JSQLiteCursorDriverClass = interface(JObjectClass)
    ['{38D7E1BF-2861-44B1-8085-272908F7223C}']
    function query(JSQLiteDatabase_CursorFactoryparam0 : JSQLiteDatabase_CursorFactory; TJavaArrayJStringparam1 : TJavaArray<JString>) : JCursor; cdecl;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;[Ljava/lang/String;)Landroid/database/Cursor; A: $401
    procedure cursorClosed ; cdecl;                                             // ()V A: $401
    procedure cursorDeactivated ; cdecl;                                        // ()V A: $401
    procedure cursorRequeried(JCursorparam0 : JCursor) ; cdecl;                 // (Landroid/database/Cursor;)V A: $401
    procedure setBindArguments(TJavaArrayJStringparam0 : TJavaArray<JString>) ; cdecl;// ([Ljava/lang/String;)V A: $401
  end;

  [JavaSignature('android/database/sqlite/SQLiteCursorDriver')]
  JSQLiteCursorDriver = interface(JObject)
    ['{15BB617F-27EE-42B8-9886-B5E5783434FD}']
    function query(JSQLiteDatabase_CursorFactoryparam0 : JSQLiteDatabase_CursorFactory; TJavaArrayJStringparam1 : TJavaArray<JString>) : JCursor; cdecl;// (Landroid/database/sqlite/SQLiteDatabase$CursorFactory;[Ljava/lang/String;)Landroid/database/Cursor; A: $401
    procedure cursorClosed ; cdecl;                                             // ()V A: $401
    procedure cursorDeactivated ; cdecl;                                        // ()V A: $401
    procedure cursorRequeried(JCursorparam0 : JCursor) ; cdecl;                 // (Landroid/database/Cursor;)V A: $401
    procedure setBindArguments(TJavaArrayJStringparam0 : TJavaArray<JString>) ; cdecl;// ([Ljava/lang/String;)V A: $401
  end;

  TJSQLiteCursorDriver = class(TJavaGenericImport<JSQLiteCursorDriverClass, JSQLiteCursorDriver>)
  end;

  // Merged from: .\android-19\android.database.sqlite.SQLiteDatabase_CursorFactory.pas
  JSQLiteDatabase_CursorFactoryClass = interface(JObjectClass)
    ['{CD2AA2AF-FDE2-46D9-86C5-069C812E885A}']
    function newCursor(JSQLiteDatabaseparam0 : JSQLiteDatabase; JSQLiteCursorDriverparam1 : JSQLiteCursorDriver; JStringparam2 : JString; JSQLiteQueryparam3 : JSQLiteQuery) : JCursor; cdecl;// (Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteCursorDriver;Ljava/lang/String;Landroid/database/sqlite/SQLiteQuery;)Landroid/database/Cursor; A: $401
  end;

  [JavaSignature('android/database/sqlite/SQLiteDatabase_CursorFactory')]
  JSQLiteDatabase_CursorFactory = interface(JObject)
    ['{BBBC9E78-2A58-4C46-91C7-4AB7C0CC84E2}']
    function newCursor(JSQLiteDatabaseparam0 : JSQLiteDatabase; JSQLiteCursorDriverparam1 : JSQLiteCursorDriver; JStringparam2 : JString; JSQLiteQueryparam3 : JSQLiteQuery) : JCursor; cdecl;// (Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteCursorDriver;Ljava/lang/String;Landroid/database/sqlite/SQLiteQuery;)Landroid/database/Cursor; A: $401
  end;

  TJSQLiteDatabase_CursorFactory = class(TJavaGenericImport<JSQLiteDatabase_CursorFactoryClass, JSQLiteDatabase_CursorFactory>)
  end;



const
  TJSQLiteDatabaseCONFLICT_ROLLBACK = 1;
  TJSQLiteDatabaseCONFLICT_ABORT = 2;
  TJSQLiteDatabaseCONFLICT_FAIL = 3;
  TJSQLiteDatabaseCONFLICT_IGNORE = 4;
  TJSQLiteDatabaseCONFLICT_REPLACE = 5;
  TJSQLiteDatabaseCONFLICT_NONE = 0;
  TJSQLiteDatabaseSQLITE_MAX_LIKE_PATTERN_LENGTH = 50000;
  TJSQLiteDatabaseOPEN_READWRITE = 0;
  TJSQLiteDatabaseOPEN_READONLY = 1;
  TJSQLiteDatabaseNO_LOCALIZED_COLLATORS = 16;
  TJSQLiteDatabaseCREATE_IF_NECESSARY = 268435456;
  TJSQLiteDatabaseENABLE_WRITE_AHEAD_LOGGING = 536870912;
  TJSQLiteDatabaseMAX_SQL_CACHE_SIZE = 100;


implementation

end.
