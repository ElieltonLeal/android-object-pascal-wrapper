//
// Generated by JavaToPas v1.5 20180804 - 082433
////////////////////////////////////////////////////////////////////////////////
unit android.net.wifi.hotspot2.pps.Credential;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  Androidapi.JNI.os,
  android.net.wifi.hotspot2.pps.Credential_UserCredential,
  android.net.wifi.hotspot2.pps.Credential_CertificateCredential,
  android.net.wifi.hotspot2.pps.Credential_SimCredential,
  java.security.cert.X509Certificate,
  java.security.PrivateKey;

type
  JCredential = interface;

  JCredentialClass = interface(JObjectClass)
    ['{50508CDF-E6DF-492C-83F2-7EE6512DCBA1}']
    function _GetCREATOR : JParcelable_Creator; cdecl;                          //  A: $19
    function describeContents : Integer; cdecl;                                 // ()I A: $1
    function equals(thatObject : JObject) : boolean; cdecl;                     // (Ljava/lang/Object;)Z A: $1
    function getCaCertificate : JX509Certificate; cdecl;                        // ()Ljava/security/cert/X509Certificate; A: $1
    function getCertCredential : JCredential_CertificateCredential; cdecl;      // ()Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential; A: $1
    function getClientCertificateChain : TJavaArray<JX509Certificate>; cdecl;   // ()[Ljava/security/cert/X509Certificate; A: $1
    function getClientPrivateKey : JPrivateKey; cdecl;                          // ()Ljava/security/PrivateKey; A: $1
    function getRealm : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    function getSimCredential : JCredential_SimCredential; cdecl;               // ()Landroid/net/wifi/hotspot2/pps/Credential$SimCredential; A: $1
    function getUserCredential : JCredential_UserCredential; cdecl;             // ()Landroid/net/wifi/hotspot2/pps/Credential$UserCredential; A: $1
    function hashCode : Integer; cdecl;                                         // ()I A: $1
    function init : JCredential; cdecl; overload;                               // ()V A: $1
    function init(source : JCredential) : JCredential; cdecl; overload;         // (Landroid/net/wifi/hotspot2/pps/Credential;)V A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure setCaCertificate(caCertificate : JX509Certificate) ; cdecl;       // (Ljava/security/cert/X509Certificate;)V A: $1
    procedure setCertCredential(certCredential : JCredential_CertificateCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;)V A: $1
    procedure setClientCertificateChain(certificateChain : TJavaArray<JX509Certificate>) ; cdecl;// ([Ljava/security/cert/X509Certificate;)V A: $1
    procedure setClientPrivateKey(clientPrivateKey : JPrivateKey) ; cdecl;      // (Ljava/security/PrivateKey;)V A: $1
    procedure setRealm(realm : JString) ; cdecl;                                // (Ljava/lang/String;)V A: $1
    procedure setSimCredential(simCredential : JCredential_SimCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;)V A: $1
    procedure setUserCredential(userCredential : JCredential_UserCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;)V A: $1
    procedure writeToParcel(dest : JParcel; flags : Integer) ; cdecl;           // (Landroid/os/Parcel;I)V A: $1
    property CREATOR : JParcelable_Creator read _GetCREATOR;                    // Landroid/os/Parcelable$Creator; A: $19
  end;

  [JavaSignature('android/net/wifi/hotspot2/pps/Credential$SimCredential')]
  JCredential = interface(JObject)
    ['{945F17BA-955A-4BB3-B081-CEBCDA2E5272}']
    function describeContents : Integer; cdecl;                                 // ()I A: $1
    function equals(thatObject : JObject) : boolean; cdecl;                     // (Ljava/lang/Object;)Z A: $1
    function getCaCertificate : JX509Certificate; cdecl;                        // ()Ljava/security/cert/X509Certificate; A: $1
    function getCertCredential : JCredential_CertificateCredential; cdecl;      // ()Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential; A: $1
    function getClientCertificateChain : TJavaArray<JX509Certificate>; cdecl;   // ()[Ljava/security/cert/X509Certificate; A: $1
    function getClientPrivateKey : JPrivateKey; cdecl;                          // ()Ljava/security/PrivateKey; A: $1
    function getRealm : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    function getSimCredential : JCredential_SimCredential; cdecl;               // ()Landroid/net/wifi/hotspot2/pps/Credential$SimCredential; A: $1
    function getUserCredential : JCredential_UserCredential; cdecl;             // ()Landroid/net/wifi/hotspot2/pps/Credential$UserCredential; A: $1
    function hashCode : Integer; cdecl;                                         // ()I A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    procedure setCaCertificate(caCertificate : JX509Certificate) ; cdecl;       // (Ljava/security/cert/X509Certificate;)V A: $1
    procedure setCertCredential(certCredential : JCredential_CertificateCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;)V A: $1
    procedure setClientCertificateChain(certificateChain : TJavaArray<JX509Certificate>) ; cdecl;// ([Ljava/security/cert/X509Certificate;)V A: $1
    procedure setClientPrivateKey(clientPrivateKey : JPrivateKey) ; cdecl;      // (Ljava/security/PrivateKey;)V A: $1
    procedure setRealm(realm : JString) ; cdecl;                                // (Ljava/lang/String;)V A: $1
    procedure setSimCredential(simCredential : JCredential_SimCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;)V A: $1
    procedure setUserCredential(userCredential : JCredential_UserCredential) ; cdecl;// (Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;)V A: $1
    procedure writeToParcel(dest : JParcel; flags : Integer) ; cdecl;           // (Landroid/os/Parcel;I)V A: $1
  end;

  TJCredential = class(TJavaGenericImport<JCredentialClass, JCredential>)
  end;

implementation

end.
