//
// Generated by JavaToPas v1.5 20180804 - 082402
////////////////////////////////////////////////////////////////////////////////
unit java.time.Year;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.time.chrono.ChronoLocalDate,
  java.time.Duration,
  java.time.MonthDay,
  java.time.YearMonth,
  java.time.Month;

type
  JYear = interface;

  JYearClass = interface(JObjectClass)
    ['{16FA5B88-A904-4182-ACEC-80B035078F46}']
    function &of(isoYear : Integer) : JYear; cdecl;                             // (I)Ljava/time/Year; A: $9
    function &until(endExclusive : JTemporal; &unit : JTemporalUnit) : Int64; cdecl;// (Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J A: $1
    function &with(adjuster : JTemporalAdjuster) : JYear; cdecl; overload;      // (Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Year; A: $1
    function &with(field : JTemporalField; newValue : Int64) : JYear; cdecl; overload;// (Ljava/time/temporal/TemporalField;J)Ljava/time/Year; A: $1
    function _GetMAX_VALUE : Integer; cdecl;                                    //  A: $19
    function _GetMIN_VALUE : Integer; cdecl;                                    //  A: $19
    function adjustInto(temporal : JTemporal) : JTemporal; cdecl;               // (Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal; A: $1
    function atDay(dayOfYear : Integer) : JLocalDate; cdecl;                    // (I)Ljava/time/LocalDate; A: $1
    function atMonth(month : Integer) : JYearMonth; cdecl; overload;            // (I)Ljava/time/YearMonth; A: $1
    function atMonth(month : JMonth) : JYearMonth; cdecl; overload;             // (Ljava/time/Month;)Ljava/time/YearMonth; A: $1
    function atMonthDay(monthDay : JMonthDay) : JLocalDate; cdecl;              // (Ljava/time/MonthDay;)Ljava/time/LocalDate; A: $1
    function compareTo(other : JYear) : Integer; cdecl;                         // (Ljava/time/Year;)I A: $1
    function equals(obj : JObject) : boolean; cdecl;                            // (Ljava/lang/Object;)Z A: $1
    function format(formatter : JDateTimeFormatter) : JString; cdecl;           // (Ljava/time/format/DateTimeFormatter;)Ljava/lang/String; A: $1
    function from(temporal : JTemporalAccessor) : JYear; cdecl;                 // (Ljava/time/temporal/TemporalAccessor;)Ljava/time/Year; A: $9
    function get(field : JTemporalField) : Integer; cdecl;                      // (Ljava/time/temporal/TemporalField;)I A: $1
    function getLong(field : JTemporalField) : Int64; cdecl;                    // (Ljava/time/temporal/TemporalField;)J A: $1
    function getValue : Integer; cdecl;                                         // ()I A: $1
    function hashCode : Integer; cdecl;                                         // ()I A: $1
    function isAfter(other : JYear) : boolean; cdecl;                           // (Ljava/time/Year;)Z A: $1
    function isBefore(other : JYear) : boolean; cdecl;                          // (Ljava/time/Year;)Z A: $1
    function isLeap : boolean; cdecl; overload;                                 // ()Z A: $1
    function isLeap(year : Int64) : boolean; cdecl; overload;                   // (J)Z A: $9
    function isSupported(&unit : JTemporalUnit) : boolean; cdecl; overload;     // (Ljava/time/temporal/TemporalUnit;)Z A: $1
    function isSupported(field : JTemporalField) : boolean; cdecl; overload;    // (Ljava/time/temporal/TemporalField;)Z A: $1
    function isValidMonthDay(monthDay : JMonthDay) : boolean; cdecl;            // (Ljava/time/MonthDay;)Z A: $1
    function length : Integer; cdecl;                                           // ()I A: $1
    function minus(amountToSubtract : Int64; &unit : JTemporalUnit) : JYear; cdecl; overload;// (JLjava/time/temporal/TemporalUnit;)Ljava/time/Year; A: $1
    function minus(amountToSubtract : JTemporalAmount) : JYear; cdecl; overload;// (Ljava/time/temporal/TemporalAmount;)Ljava/time/Year; A: $1
    function minusYears(yearsToSubtract : Int64) : JYear; cdecl;                // (J)Ljava/time/Year; A: $1
    function now : JYear; cdecl; overload;                                      // ()Ljava/time/Year; A: $9
    function now(clock : JClock) : JYear; cdecl; overload;                      // (Ljava/time/Clock;)Ljava/time/Year; A: $9
    function now(zone : JZoneId) : JYear; cdecl; overload;                      // (Ljava/time/ZoneId;)Ljava/time/Year; A: $9
    function parse(text : JCharSequence) : JYear; cdecl; overload;              // (Ljava/lang/CharSequence;)Ljava/time/Year; A: $9
    function parse(text : JCharSequence; formatter : JDateTimeFormatter) : JYear; cdecl; overload;// (Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/Year; A: $9
    function plus(amountToAdd : Int64; &unit : JTemporalUnit) : JYear; cdecl; overload;// (JLjava/time/temporal/TemporalUnit;)Ljava/time/Year; A: $1
    function plus(amountToAdd : JTemporalAmount) : JYear; cdecl; overload;      // (Ljava/time/temporal/TemporalAmount;)Ljava/time/Year; A: $1
    function plusYears(yearsToAdd : Int64) : JYear; cdecl;                      // (J)Ljava/time/Year; A: $1
    function query(query : JTemporalQuery) : JObject; cdecl;                    // (Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object; A: $1
    function range(field : JTemporalField) : JValueRange; cdecl;                // (Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange; A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    property MAX_VALUE : Integer read _GetMAX_VALUE;                            // I A: $19
    property MIN_VALUE : Integer read _GetMIN_VALUE;                            // I A: $19
  end;

  [JavaSignature('java/time/Year')]
  JYear = interface(JObject)
    ['{E9225CFF-D397-47E4-830D-5EAF9B722EB7}']
    function &until(endExclusive : JTemporal; &unit : JTemporalUnit) : Int64; cdecl;// (Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J A: $1
    function &with(adjuster : JTemporalAdjuster) : JYear; cdecl; overload;      // (Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Year; A: $1
    function &with(field : JTemporalField; newValue : Int64) : JYear; cdecl; overload;// (Ljava/time/temporal/TemporalField;J)Ljava/time/Year; A: $1
    function adjustInto(temporal : JTemporal) : JTemporal; cdecl;               // (Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal; A: $1
    function atDay(dayOfYear : Integer) : JLocalDate; cdecl;                    // (I)Ljava/time/LocalDate; A: $1
    function atMonth(month : Integer) : JYearMonth; cdecl; overload;            // (I)Ljava/time/YearMonth; A: $1
    function atMonth(month : JMonth) : JYearMonth; cdecl; overload;             // (Ljava/time/Month;)Ljava/time/YearMonth; A: $1
    function atMonthDay(monthDay : JMonthDay) : JLocalDate; cdecl;              // (Ljava/time/MonthDay;)Ljava/time/LocalDate; A: $1
    function compareTo(other : JYear) : Integer; cdecl;                         // (Ljava/time/Year;)I A: $1
    function equals(obj : JObject) : boolean; cdecl;                            // (Ljava/lang/Object;)Z A: $1
    function format(formatter : JDateTimeFormatter) : JString; cdecl;           // (Ljava/time/format/DateTimeFormatter;)Ljava/lang/String; A: $1
    function get(field : JTemporalField) : Integer; cdecl;                      // (Ljava/time/temporal/TemporalField;)I A: $1
    function getLong(field : JTemporalField) : Int64; cdecl;                    // (Ljava/time/temporal/TemporalField;)J A: $1
    function getValue : Integer; cdecl;                                         // ()I A: $1
    function hashCode : Integer; cdecl;                                         // ()I A: $1
    function isAfter(other : JYear) : boolean; cdecl;                           // (Ljava/time/Year;)Z A: $1
    function isBefore(other : JYear) : boolean; cdecl;                          // (Ljava/time/Year;)Z A: $1
    function isLeap : boolean; cdecl; overload;                                 // ()Z A: $1
    function isSupported(&unit : JTemporalUnit) : boolean; cdecl; overload;     // (Ljava/time/temporal/TemporalUnit;)Z A: $1
    function isSupported(field : JTemporalField) : boolean; cdecl; overload;    // (Ljava/time/temporal/TemporalField;)Z A: $1
    function isValidMonthDay(monthDay : JMonthDay) : boolean; cdecl;            // (Ljava/time/MonthDay;)Z A: $1
    function length : Integer; cdecl;                                           // ()I A: $1
    function minus(amountToSubtract : Int64; &unit : JTemporalUnit) : JYear; cdecl; overload;// (JLjava/time/temporal/TemporalUnit;)Ljava/time/Year; A: $1
    function minus(amountToSubtract : JTemporalAmount) : JYear; cdecl; overload;// (Ljava/time/temporal/TemporalAmount;)Ljava/time/Year; A: $1
    function minusYears(yearsToSubtract : Int64) : JYear; cdecl;                // (J)Ljava/time/Year; A: $1
    function plus(amountToAdd : Int64; &unit : JTemporalUnit) : JYear; cdecl; overload;// (JLjava/time/temporal/TemporalUnit;)Ljava/time/Year; A: $1
    function plus(amountToAdd : JTemporalAmount) : JYear; cdecl; overload;      // (Ljava/time/temporal/TemporalAmount;)Ljava/time/Year; A: $1
    function plusYears(yearsToAdd : Int64) : JYear; cdecl;                      // (J)Ljava/time/Year; A: $1
    function query(query : JTemporalQuery) : JObject; cdecl;                    // (Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object; A: $1
    function range(field : JTemporalField) : JValueRange; cdecl;                // (Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange; A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
  end;

  TJYear = class(TJavaGenericImport<JYearClass, JYear>)
  end;

const
  TJYearMAX_VALUE = 999999999;
  TJYearMIN_VALUE = -999999999;

implementation

end.
