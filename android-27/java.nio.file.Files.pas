//
// Generated by JavaToPas v1.5 20180804 - 082357
////////////////////////////////////////////////////////////////////////////////
unit java.nio.file.Files;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.nio.channels.AsynchronousFileChannel,
  java.nio.file.OpenOption,
  java.nio.channels.SeekableByteChannel,
  java.nio.file.attribute.FileAttribute,
  java.nio.file.DirectoryStream,
  java.nio.file.DirectoryStream_Filter,
  java.nio.file.CopyOption,
  java.nio.file.FileStore,
  java.nio.file.attribute.FileAttributeView,
  java.nio.file.LinkOption,
  java.nio.file.attribute.BasicFileAttributes,
  java.nio.file.attribute.UserPrincipal,
  java.nio.file.attribute.FileTime,
  java.nio.file.FileVisitor,
  java.io.BufferedReader,
  java.nio.charset.Charset,
  java.io.BufferedWriter,
  java.util.stream.DoubleStream,
  java.nio.file.FileVisitOption,
  java.util.function.BiPredicate;

type
  JFiles = interface;

  JFilesClass = interface(JObjectClass)
    ['{E90B492C-CBDF-4D80-8E09-31F281710269}']
    function &write(path : JPath; bytes : TJavaArray<Byte>; options : TJavaArray<JOpenOption>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path; A: $89
    function &write(path : JPath; lines : JIterable; cs : JCharset; options : TJavaArray<JOpenOption>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/Iterable;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path; A: $89
    function &write(path : JPath; lines : JIterable; options : TJavaArray<JOpenOption>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path; A: $89
    function copy(&in : JInputStream; target : JPath; options : TJavaArray<JCopyOption>) : Int64; cdecl; overload;// (Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J A: $89
    function copy(source : JPath; &out : JOutputStream) : Int64; cdecl; overload;// (Ljava/nio/file/Path;Ljava/io/OutputStream;)J A: $9
    function copy(source : JPath; target : JPath; options : TJavaArray<JCopyOption>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path; A: $89
    function createDirectories(dir : JPath; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createDirectory(dir : JPath; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createFile(path : JPath; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createLink(link : JPath; existing : JPath) : JPath; cdecl;         // (Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path; A: $9
    function createSymbolicLink(link : JPath; target : JPath; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl;// (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createTempDirectory(dir : JPath; prefix : JString; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createTempDirectory(prefix : JString; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl; overload;// (Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createTempFile(dir : JPath; prefix : JString; suffix : JString; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function createTempFile(prefix : JString; suffix : JString; attrs : TJavaArray<JFileAttribute>) : JPath; cdecl; overload;// (Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path; A: $89
    function deleteIfExists(path : JPath) : boolean; cdecl;                     // (Ljava/nio/file/Path;)Z A: $9
    function exists(path : JPath; options : TJavaArray<JLinkOption>) : boolean; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z A: $89
    function find(start : JPath; maxDepth : Integer; matcher : JBiPredicate; options : TJavaArray<JFileVisitOption>) : JStream; cdecl;// (Ljava/nio/file/Path;ILjava/util/function/BiPredicate;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream; A: $89
    function getAttribute(path : JPath; attribute : JString; options : TJavaArray<JLinkOption>) : JObject; cdecl;// (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object; A: $89
    function getFileAttributeView(path : JPath; &type : JClass; options : TJavaArray<JLinkOption>) : JFileAttributeView; cdecl;// (Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView; A: $89
    function getFileStore(path : JPath) : JFileStore; cdecl;                    // (Ljava/nio/file/Path;)Ljava/nio/file/FileStore; A: $9
    function getLastModifiedTime(path : JPath; options : TJavaArray<JLinkOption>) : JFileTime; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime; A: $89
    function getOwner(path : JPath; options : TJavaArray<JLinkOption>) : JUserPrincipal; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal; A: $89
    function getPosixFilePermissions(path : JPath; options : TJavaArray<JLinkOption>) : JSet; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set; A: $89
    function isDirectory(path : JPath; options : TJavaArray<JLinkOption>) : boolean; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z A: $89
    function isExecutable(path : JPath) : boolean; cdecl;                       // (Ljava/nio/file/Path;)Z A: $9
    function isHidden(path : JPath) : boolean; cdecl;                           // (Ljava/nio/file/Path;)Z A: $9
    function isReadable(path : JPath) : boolean; cdecl;                         // (Ljava/nio/file/Path;)Z A: $9
    function isRegularFile(path : JPath; options : TJavaArray<JLinkOption>) : boolean; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z A: $89
    function isSameFile(path : JPath; path2 : JPath) : boolean; cdecl;          // (Ljava/nio/file/Path;Ljava/nio/file/Path;)Z A: $9
    function isSymbolicLink(path : JPath) : boolean; cdecl;                     // (Ljava/nio/file/Path;)Z A: $9
    function isWritable(path : JPath) : boolean; cdecl;                         // (Ljava/nio/file/Path;)Z A: $9
    function lines(path : JPath) : JStream; cdecl; overload;                    // (Ljava/nio/file/Path;)Ljava/util/stream/Stream; A: $9
    function lines(path : JPath; cs : JCharset) : JStream; cdecl; overload;     // (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/stream/Stream; A: $9
    function list(dir : JPath) : JStream; cdecl;                                // (Ljava/nio/file/Path;)Ljava/util/stream/Stream; A: $9
    function move(source : JPath; target : JPath; options : TJavaArray<JCopyOption>) : JPath; cdecl;// (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path; A: $89
    function newBufferedReader(path : JPath) : JBufferedReader; cdecl; overload;// (Ljava/nio/file/Path;)Ljava/io/BufferedReader; A: $9
    function newBufferedReader(path : JPath; cs : JCharset) : JBufferedReader; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/io/BufferedReader; A: $9
    function newBufferedWriter(path : JPath; cs : JCharset; options : TJavaArray<JOpenOption>) : JBufferedWriter; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter; A: $89
    function newBufferedWriter(path : JPath; options : TJavaArray<JOpenOption>) : JBufferedWriter; cdecl; overload;// (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter; A: $89
    function newByteChannel(path : JPath; options : JSet; attrs : TJavaArray<JFileAttribute>) : JSeekableByteChannel; cdecl; overload;// (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel; A: $89
    function newByteChannel(path : JPath; options : TJavaArray<JOpenOption>) : JSeekableByteChannel; cdecl; overload;// (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel; A: $89
    function newDirectoryStream(dir : JPath) : JDirectoryStream; cdecl; overload;// (Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream; A: $9
    function newDirectoryStream(dir : JPath; filter : JDirectoryStream_Filter) : JDirectoryStream; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream; A: $9
    function newDirectoryStream(dir : JPath; glob : JString) : JDirectoryStream; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream; A: $9
    function newInputStream(path : JPath; options : TJavaArray<JOpenOption>) : JInputStream; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream; A: $89
    function newOutputStream(path : JPath; options : TJavaArray<JOpenOption>) : JOutputStream; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream; A: $89
    function notExists(path : JPath; options : TJavaArray<JLinkOption>) : boolean; cdecl;// (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z A: $89
    function probeContentType(path : JPath) : JString; cdecl;                   // (Ljava/nio/file/Path;)Ljava/lang/String; A: $9
    function readAllBytes(path : JPath) : TJavaArray<Byte>; cdecl;              // (Ljava/nio/file/Path;)[B A: $9
    function readAllLines(path : JPath) : JList; cdecl; overload;               // (Ljava/nio/file/Path;)Ljava/util/List; A: $9
    function readAllLines(path : JPath; cs : JCharset) : JList; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List; A: $9
    function readAttributes(path : JPath; &type : JClass; options : TJavaArray<JLinkOption>) : JBasicFileAttributes; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes; A: $89
    function readAttributes(path : JPath; attributes : JString; options : TJavaArray<JLinkOption>) : JMap; cdecl; overload;// (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map; A: $89
    function readSymbolicLink(link : JPath) : JPath; cdecl;                     // (Ljava/nio/file/Path;)Ljava/nio/file/Path; A: $9
    function setAttribute(path : JPath; attribute : JString; value : JObject; options : TJavaArray<JLinkOption>) : JPath; cdecl;// (Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path; A: $89
    function setLastModifiedTime(path : JPath; time : JFileTime) : JPath; cdecl;// (Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path; A: $9
    function setOwner(path : JPath; owner : JUserPrincipal) : JPath; cdecl;     // (Ljava/nio/file/Path;Ljava/nio/file/attribute/UserPrincipal;)Ljava/nio/file/Path; A: $9
    function setPosixFilePermissions(path : JPath; perms : JSet) : JPath; cdecl;// (Ljava/nio/file/Path;Ljava/util/Set;)Ljava/nio/file/Path; A: $9
    function size(path : JPath) : Int64; cdecl;                                 // (Ljava/nio/file/Path;)J A: $9
    function walk(start : JPath; maxDepth : Integer; options : TJavaArray<JFileVisitOption>) : JStream; cdecl; overload;// (Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream; A: $89
    function walk(start : JPath; options : TJavaArray<JFileVisitOption>) : JStream; cdecl; overload;// (Ljava/nio/file/Path;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream; A: $89
    function walkFileTree(start : JPath; options : JSet; maxDepth : Integer; visitor : JFileVisitor) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path; A: $9
    function walkFileTree(start : JPath; visitor : JFileVisitor) : JPath; cdecl; overload;// (Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path; A: $9
    procedure delete(path : JPath) ; cdecl;                                     // (Ljava/nio/file/Path;)V A: $9
  end;

  [JavaSignature('java/nio/file/Files')]
  JFiles = interface(JObject)
    ['{62DA9D9F-2288-49D6-8D20-770567C95FE7}']
  end;

  TJFiles = class(TJavaGenericImport<JFilesClass, JFiles>)
  end;

implementation

end.
