//
// Generated by JavaToPas v1.5 20171018 - 171157
////////////////////////////////////////////////////////////////////////////////
unit java.util.stream.Collectors;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  java.util.stream.Collector,
  java.util.function.Supplier,
  java.util.function.Function,
  java.util.function.ToIntFunction,
  java.util.function.ToLongFunction,
  java.util.function.ToDoubleFunction,
  java.util.function.BinaryOperator,
  java.util.function.Predicate;

type
  JCollectors = interface;

  JCollectorsClass = interface(JObjectClass)
    ['{45A6E55E-B40B-4A2D-BF90-9BDE211A2302}']
    function averagingDouble(mapper : JToDoubleFunction) : JCollector; cdecl;   // (Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector; A: $9
    function averagingInt(mapper : JToIntFunction) : JCollector; cdecl;         // (Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector; A: $9
    function averagingLong(mapper : JToLongFunction) : JCollector; cdecl;       // (Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector; A: $9
    function collectingAndThen(downstream : JCollector; finisher : JFunction) : JCollector; cdecl;// (Ljava/util/stream/Collector;Ljava/util/function/Function;)Ljava/util/stream/Collector; A: $9
    function counting : JCollector; cdecl;                                      // ()Ljava/util/stream/Collector; A: $9
    function groupingBy(classifier : JFunction) : JCollector; cdecl; overload;  // (Ljava/util/function/Function;)Ljava/util/stream/Collector; A: $9
    function groupingBy(classifier : JFunction; downstream : JCollector) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function groupingBy(classifier : JFunction; mapFactory : JSupplier; downstream : JCollector) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function groupingByConcurrent(classifier : JFunction) : JCollector; cdecl; overload;// (Ljava/util/function/Function;)Ljava/util/stream/Collector; A: $9
    function groupingByConcurrent(classifier : JFunction; downstream : JCollector) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function groupingByConcurrent(classifier : JFunction; mapFactory : JSupplier; downstream : JCollector) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function joining : JCollector; cdecl; overload;                             // ()Ljava/util/stream/Collector; A: $9
    function joining(delimiter : JCharSequence) : JCollector; cdecl; overload;  // (Ljava/lang/CharSequence;)Ljava/util/stream/Collector; A: $9
    function joining(delimiter : JCharSequence; prefix : JCharSequence; suffix : JCharSequence) : JCollector; cdecl; overload;// (Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector; A: $9
    function mapping(mapper : JFunction; downstream : JCollector) : JCollector; cdecl;// (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function maxBy(comparator : JComparator) : JCollector; cdecl;               // (Ljava/util/Comparator;)Ljava/util/stream/Collector; A: $9
    function minBy(comparator : JComparator) : JCollector; cdecl;               // (Ljava/util/Comparator;)Ljava/util/stream/Collector; A: $9
    function partitioningBy(predicate : JPredicate) : JCollector; cdecl; overload;// (Ljava/util/function/Predicate;)Ljava/util/stream/Collector; A: $9
    function partitioningBy(predicate : JPredicate; downstream : JCollector) : JCollector; cdecl; overload;// (Ljava/util/function/Predicate;Ljava/util/stream/Collector;)Ljava/util/stream/Collector; A: $9
    function reducing(identity : JObject; mapper : JFunction; op : JBinaryOperator) : JCollector; cdecl; overload;// (Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector; A: $9
    function reducing(identity : JObject; op : JBinaryOperator) : JCollector; cdecl; overload;// (Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector; A: $9
    function reducing(op : JBinaryOperator) : JCollector; cdecl; overload;      // (Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector; A: $9
    function summarizingDouble(mapper : JToDoubleFunction) : JCollector; cdecl; // (Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector; A: $9
    function summarizingInt(mapper : JToIntFunction) : JCollector; cdecl;       // (Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector; A: $9
    function summarizingLong(mapper : JToLongFunction) : JCollector; cdecl;     // (Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector; A: $9
    function summingDouble(mapper : JToDoubleFunction) : JCollector; cdecl;     // (Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector; A: $9
    function summingInt(mapper : JToIntFunction) : JCollector; cdecl;           // (Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector; A: $9
    function summingLong(mapper : JToLongFunction) : JCollector; cdecl;         // (Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector; A: $9
    function toCollection(collectionFactory : JSupplier) : JCollector; cdecl;   // (Ljava/util/function/Supplier;)Ljava/util/stream/Collector; A: $9
    function toConcurrentMap(keyMapper : JFunction; valueMapper : JFunction) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector; A: $9
    function toConcurrentMap(keyMapper : JFunction; valueMapper : JFunction; mergeFunction : JBinaryOperator) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector; A: $9
    function toConcurrentMap(keyMapper : JFunction; valueMapper : JFunction; mergeFunction : JBinaryOperator; mapSupplier : JSupplier) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;Ljava/util/function/Supplier;)Ljava/util/stream/Collector; A: $9
    function toList : JCollector; cdecl;                                        // ()Ljava/util/stream/Collector; A: $9
    function toMap(keyMapper : JFunction; valueMapper : JFunction) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector; A: $9
    function toMap(keyMapper : JFunction; valueMapper : JFunction; mergeFunction : JBinaryOperator) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector; A: $9
    function toMap(keyMapper : JFunction; valueMapper : JFunction; mergeFunction : JBinaryOperator; mapSupplier : JSupplier) : JCollector; cdecl; overload;// (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;Ljava/util/function/Supplier;)Ljava/util/stream/Collector; A: $9
    function toSet : JCollector; cdecl;                                         // ()Ljava/util/stream/Collector; A: $9
  end;

  [JavaSignature('java/util/stream/Collectors')]
  JCollectors = interface(JObject)
    ['{554F81E4-DF04-46B5-BD09-CB1E49FAE872}']
  end;

  TJCollectors = class(TJavaGenericImport<JCollectorsClass, JCollectors>)
  end;

implementation

end.
