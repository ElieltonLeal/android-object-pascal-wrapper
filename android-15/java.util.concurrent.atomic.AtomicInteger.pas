//
// Generated by JavaToPas v1.4 20140515 - 181230
////////////////////////////////////////////////////////////////////////////////
unit java.util.concurrent.atomic.AtomicInteger;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes;

type
  JAtomicInteger = interface;

  JAtomicIntegerClass = interface(JObjectClass)
    ['{C736095B-6CB8-4616-A116-6D9E593F7405}']
    function addAndGet(delta : Integer) : Integer; cdecl;                       // (I)I A: $11
    function compareAndSet(expect : Integer; update : Integer) : boolean; cdecl;// (II)Z A: $11
    function decrementAndGet : Integer; cdecl;                                  // ()I A: $11
    function doubleValue : Double; cdecl;                                       // ()D A: $1
    function floatValue : Single; cdecl;                                        // ()F A: $1
    function get : Integer; cdecl;                                              // ()I A: $11
    function getAndAdd(delta : Integer) : Integer; cdecl;                       // (I)I A: $11
    function getAndDecrement : Integer; cdecl;                                  // ()I A: $11
    function getAndIncrement : Integer; cdecl;                                  // ()I A: $11
    function getAndSet(newValue : Integer) : Integer; cdecl;                    // (I)I A: $11
    function incrementAndGet : Integer; cdecl;                                  // ()I A: $11
    function init : JAtomicInteger; cdecl; overload;                            // ()V A: $1
    function init(initialValue : Integer) : JAtomicInteger; cdecl; overload;    // (I)V A: $1
    function intValue : Integer; cdecl;                                         // ()I A: $1
    function longValue : Int64; cdecl;                                          // ()J A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
    function weakCompareAndSet(expect : Integer; update : Integer) : boolean; cdecl;// (II)Z A: $11
    procedure &set(newValue : Integer) ; cdecl;                                 // (I)V A: $11
    procedure lazySet(newValue : Integer) ; cdecl;                              // (I)V A: $11
  end;

  [JavaSignature('java/util/concurrent/atomic/AtomicInteger')]
  JAtomicInteger = interface(JObject)
    ['{8C8FF686-4B81-4E2B-9C4C-06B9365424B3}']
    function doubleValue : Double; cdecl;                                       // ()D A: $1
    function floatValue : Single; cdecl;                                        // ()F A: $1
    function intValue : Integer; cdecl;                                         // ()I A: $1
    function longValue : Int64; cdecl;                                          // ()J A: $1
    function toString : JString; cdecl;                                         // ()Ljava/lang/String; A: $1
  end;

  TJAtomicInteger = class(TJavaGenericImport<JAtomicIntegerClass, JAtomicInteger>)
  end;

implementation

end.
